const espreePayloads = new Map;
espreePayloads.set("backbone-1.1.0.js", "//     Backbone.js 1.1.0\n\n//     (c) 2010-2011 Jeremy Ashkenas, DocumentCloud Inc.\n//     (c) 2011-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(){\n\n  // Initial Setup\n  // -------------\n\n  // Save a reference to the global object (`window` in the browser, `exports`\n  // on the server).\n  var root = this;\n\n  // Save the previous value of the `Backbone` variable, so that it can be\n  // restored later on, if `noConflict` is used.\n  var previousBackbone = root.Backbone;\n\n  // Create local references to array methods we'll want to use later.\n  var array = [];\n  var push = array.push;\n  var slice = array.slice;\n  var splice = array.splice;\n\n  // The top-level namespace. All public Backbone classes and modules will\n  // be attached to this. Exported for both the browser and the server.\n  var Backbone;\n  if (typeof exports !== 'undefined') {\n    Backbone = exports;\n  } else {\n    Backbone = root.Backbone = {};\n  }\n\n  // Current version of the library. Keep in sync with `package.json`.\n  Backbone.VERSION = '1.1.0';\n\n  // Require Underscore, if we're on the server, and it's not already present.\n  var _ = root._;\n  if (!_ && (typeof require !== 'undefined')) _ = require('underscore');\n\n  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n  Backbone.$ = root.jQuery || root.Zepto || root.ender || root.$;\n\n  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n  // to its previous owner. Returns a reference to this Backbone object.\n  Backbone.noConflict = function() {\n    root.Backbone = previousBackbone;\n    return this;\n  };\n\n  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n  // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n  // set a `X-Http-Method-Override` header.\n  Backbone.emulateHTTP = false;\n\n  // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n  // `application/json` requests ... will encode the body as\n  // `application/x-www-form-urlencoded` instead and will send the model in a\n  // form param named `model`.\n  Backbone.emulateJSON = false;\n\n  // Backbone.Events\n  // ---------------\n\n  // A module that can be mixed in to *any object* in order to provide it with\n  // custom events. You may bind with `on` or remove with `off` callback\n  // functions to an event; `trigger`-ing an event fires all callbacks in\n  // succession.\n  //\n  //     var object = {};\n  //     _.extend(object, Backbone.Events);\n  //     object.on('expand', function(){ alert('expanded'); });\n  //     object.trigger('expand');\n  //\n  var Events = Backbone.Events = {\n\n    // Bind an event to a `callback` function. Passing `\"all\"` will bind\n    // the callback to all events fired.\n    on: function(name, callback, context) {\n      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;\n      this._events || (this._events = {});\n      var events = this._events[name] || (this._events[name] = []);\n      events.push({callback: callback, context: context, ctx: context || this});\n      return this;\n    },\n\n    // Bind an event to only be triggered a single time. After the first time\n    // the callback is invoked, it will be removed.\n    once: function(name, callback, context) {\n      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;\n      var self = this;\n      var once = _.once(function() {\n        self.off(name, once);\n        callback.apply(this, arguments);\n      });\n      once._callback = callback;\n      return this.on(name, once, context);\n    },\n\n    // Remove one or many callbacks. If `context` is null, removes all\n    // callbacks with that function. If `callback` is null, removes all\n    // callbacks for the event. If `name` is null, removes all bound\n    // callbacks for all events.\n    off: function(name, callback, context) {\n      var retain, ev, events, names, i, l, j, k;\n      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;\n      if (!name && !callback && !context) {\n        this._events = {};\n        return this;\n      }\n      names = name ? [name] : _.keys(this._events);\n      for (i = 0, l = names.length; i < l; i++) {\n        name = names[i];\n        if (events = this._events[name]) {\n          this._events[name] = retain = [];\n          if (callback || context) {\n            for (j = 0, k = events.length; j < k; j++) {\n              ev = events[j];\n              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||\n                  (context && context !== ev.context)) {\n                retain.push(ev);\n              }\n            }\n          }\n          if (!retain.length) delete this._events[name];\n        }\n      }\n\n      return this;\n    },\n\n    // Trigger one or many events, firing all bound callbacks. Callbacks are\n    // passed the same arguments as `trigger` is, apart from the event name\n    // (unless you're listening on `\"all\"`, which will cause your callback to\n    // receive the true name of the event as the first argument).\n    trigger: function(name) {\n      if (!this._events) return this;\n      var args = slice.call(arguments, 1);\n      if (!eventsApi(this, 'trigger', name, args)) return this;\n      var events = this._events[name];\n      var allEvents = this._events.all;\n      if (events) triggerEvents(events, args);\n      if (allEvents) triggerEvents(allEvents, arguments);\n      return this;\n    },\n\n    // Tell this object to stop listening to either specific events ... or\n    // to every object it's currently listening to.\n    stopListening: function(obj, name, callback) {\n      var listeningTo = this._listeningTo;\n      if (!listeningTo) return this;\n      var remove = !name && !callback;\n      if (!callback && typeof name === 'object') callback = this;\n      if (obj) (listeningTo = {})[obj._listenId] = obj;\n      for (var id in listeningTo) {\n        obj = listeningTo[id];\n        obj.off(name, callback, this);\n        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];\n      }\n      return this;\n    }\n\n  };\n\n  // Regular expression used to split event strings.\n  var eventSplitter = /\\s+/;\n\n  // Implement fancy features of the Events API such as multiple event\n  // names `\"change blur\"` and jQuery-style event maps `{change: action}`\n  // in terms of the existing API.\n  var eventsApi = function(obj, action, name, rest) {\n    if (!name) return true;\n\n    // Handle event maps.\n    if (typeof name === 'object') {\n      for (var key in name) {\n        obj[action].apply(obj, [key, name[key]].concat(rest));\n      }\n      return false;\n    }\n\n    // Handle space separated event names.\n    if (eventSplitter.test(name)) {\n      var names = name.split(eventSplitter);\n      for (var i = 0, l = names.length; i < l; i++) {\n        obj[action].apply(obj, [names[i]].concat(rest));\n      }\n      return false;\n    }\n\n    return true;\n  };\n\n  // A difficult-to-believe, but optimized internal dispatch function for\n  // triggering events. Tries to keep the usual cases speedy (most internal\n  // Backbone events have 3 arguments).\n  var triggerEvents = function(events, args) {\n    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n    switch (args.length) {\n      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);\n    }\n  };\n\n  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};\n\n  // Inversion-of-control versions of `on` and `once`. Tell *this* object to\n  // listen to an event in another object ... keeping track of what it's\n  // listening to.\n  _.each(listenMethods, function(implementation, method) {\n    Events[method] = function(obj, name, callback) {\n      var listeningTo = this._listeningTo || (this._listeningTo = {});\n      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n      listeningTo[id] = obj;\n      if (!callback && typeof name === 'object') callback = this;\n      obj[implementation](name, callback, this);\n      return this;\n    };\n  });\n\n  // Aliases for backwards compatibility.\n  Events.bind   = Events.on;\n  Events.unbind = Events.off;\n\n  // Allow the `Backbone` object to serve as a global event bus, for folks who\n  // want global \"pubsub\" in a convenient place.\n  _.extend(Backbone, Events);\n\n  // Backbone.Model\n  // --------------\n\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.cid = _.uniqueId('c');\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n  // Attach all inheritable methods to the Model prototype.\n  _.extend(Model.prototype, Events, {\n\n    // A hash of attributes whose current and previous value differ.\n    changed: null,\n\n    // The value returned during the last failed validation.\n    validationError: null,\n\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n    // CouchDB users may want to set this to `\"_id\"`.\n    idAttribute: 'id',\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Return a copy of the model's `attributes` object.\n    toJSON: function(options) {\n      return _.clone(this.attributes);\n    },\n\n    // Proxy `Backbone.sync` by default -- but override this if you need\n    // custom syncing semantics for *this* particular model.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Get the value of an attribute.\n    get: function(attr) {\n      return this.attributes[attr];\n    },\n\n    // Get the HTML-escaped value of an attribute.\n    escape: function(attr) {\n      return _.escape(this.get(attr));\n    },\n\n    // Returns `true` if the attribute contains a value that is not null\n    // or undefined.\n    has: function(attr) {\n      return this.get(attr) != null;\n    },\n\n    // Set a hash of model attributes on the object, firing `\"change\"`. This is\n    // the core primitive operation of a model, updating the data and notifying\n    // anyone who needs to know about the change in state. The heart of the beast.\n    set: function(key, val, options) {\n      var attr, attrs, unset, changes, silent, changing, prev, current;\n      if (key == null) return this;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      if (typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options || (options = {});\n\n      // Run validation.\n      if (!this._validate(attrs, options)) return false;\n\n      // Extract attributes and options.\n      unset           = options.unset;\n      silent          = options.silent;\n      changes         = [];\n      changing        = this._changing;\n      this._changing  = true;\n\n      if (!changing) {\n        this._previousAttributes = _.clone(this.attributes);\n        this.changed = {};\n      }\n      current = this.attributes, prev = this._previousAttributes;\n\n      // Check for changes of `id`.\n      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];\n\n      // For each `set` attribute, update or delete the current value.\n      for (attr in attrs) {\n        val = attrs[attr];\n        if (!_.isEqual(current[attr], val)) changes.push(attr);\n        if (!_.isEqual(prev[attr], val)) {\n          this.changed[attr] = val;\n        } else {\n          delete this.changed[attr];\n        }\n        unset ? delete current[attr] : current[attr] = val;\n      }\n\n      // Trigger all relevant attribute changes.\n      if (!silent) {\n        if (changes.length) this._pending = true;\n        for (var i = 0, l = changes.length; i < l; i++) {\n          this.trigger('change:' + changes[i], this, current[changes[i]], options);\n        }\n      }\n\n      // You might be wondering why there's a `while` loop here. Changes can\n      // be recursively nested within `\"change\"` events.\n      if (changing) return this;\n      if (!silent) {\n        while (this._pending) {\n          this._pending = false;\n          this.trigger('change', this, options);\n        }\n      }\n      this._pending = false;\n      this._changing = false;\n      return this;\n    },\n\n    // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n    // if the attribute doesn't exist.\n    unset: function(attr, options) {\n      return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n    },\n\n    // Clear all attributes on the model, firing `\"change\"`.\n    clear: function(options) {\n      var attrs = {};\n      for (var key in this.attributes) attrs[key] = void 0;\n      return this.set(attrs, _.extend({}, options, {unset: true}));\n    },\n\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function(attr) {\n      if (attr == null) return !_.isEmpty(this.changed);\n      return _.has(this.changed, attr);\n    },\n\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function(diff) {\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n      var val, changed = false;\n      var old = this._changing ? this._previousAttributes : this.attributes;\n      for (var attr in diff) {\n        if (_.isEqual(old[attr], (val = diff[attr]))) continue;\n        (changed || (changed = {}))[attr] = val;\n      }\n      return changed;\n    },\n\n    // Get the previous value of an attribute, recorded at the time the last\n    // `\"change\"` event was fired.\n    previous: function(attr) {\n      if (attr == null || !this._previousAttributes) return null;\n      return this._previousAttributes[attr];\n    },\n\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function() {\n      return _.clone(this._previousAttributes);\n    },\n\n    // Fetch the model from the server. If the server's representation of the\n    // model differs from its current attributes, they will be overridden,\n    // triggering a `\"change\"` event.\n    fetch: function(options) {\n      options = options ? _.clone(options) : {};\n      if (options.parse === void 0) options.parse = true;\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        if (!model.set(model.parse(resp, options), options)) return false;\n        if (success) success(model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Set a hash of model attributes, and sync the model to the server.\n    // If the server returns an attributes hash that differs, the model's\n    // state will be `set` again.\n    save: function(key, val, options) {\n      var attrs, method, xhr, attributes = this.attributes;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      if (key == null || typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options = _.extend({validate: true}, options);\n\n      // If we're not waiting and attributes exist, save acts as\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\n      // the model will be valid when the attributes, if any, are set.\n      if (attrs && !options.wait) {\n        if (!this.set(attrs, options)) return false;\n      } else {\n        if (!this._validate(attrs, options)) return false;\n      }\n\n      // Set temporary attributes if `{wait: true}`.\n      if (attrs && options.wait) {\n        this.attributes = _.extend({}, attributes, attrs);\n      }\n\n      // After a successful server-side save, the client is (optionally)\n      // updated with the server-side state.\n      if (options.parse === void 0) options.parse = true;\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        // Ensure attributes are restored during synchronous saves.\n        model.attributes = attributes;\n        var serverAttrs = model.parse(resp, options);\n        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);\n        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {\n          return false;\n        }\n        if (success) success(model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n\n      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n      if (method === 'patch') options.attrs = attrs;\n      xhr = this.sync(method, this, options);\n\n      // Restore attributes.\n      if (attrs && options.wait) this.attributes = attributes;\n\n      return xhr;\n    },\n\n    // Destroy this model on the server if it was already persisted.\n    // Optimistically removes the model from its collection, if it has one.\n    // If `wait: true` is passed, waits for the server to respond before removal.\n    destroy: function(options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var success = options.success;\n\n      var destroy = function() {\n        model.trigger('destroy', model, model.collection, options);\n      };\n\n      options.success = function(resp) {\n        if (options.wait || model.isNew()) destroy();\n        if (success) success(model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n\n      if (this.isNew()) {\n        options.success();\n        return false;\n      }\n      wrapError(this, options);\n\n      var xhr = this.sync('delete', this, options);\n      if (!options.wait) destroy();\n      return xhr;\n    },\n\n    // Default URL for the model's representation on the server -- if you're\n    // using Backbone's restful methods, override this to change the endpoint\n    // that will be called.\n    url: function() {\n      var base = _.result(this, 'urlRoot') || _.result(this.collection, 'url') || urlError();\n      if (this.isNew()) return base;\n      return base + (base.charAt(base.length - 1) === '/' ? '' : '/') + encodeURIComponent(this.id);\n    },\n\n    // **parse** converts a response into the hash of attributes to be `set` on\n    // the model. The default implementation is just to pass the response along.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new model with identical attributes to this one.\n    clone: function() {\n      return new this.constructor(this.attributes);\n    },\n\n    // A model is new if it has never been saved to the server, and lacks an id.\n    isNew: function() {\n      return this.id == null;\n    },\n\n    // Check if the model is currently in a valid state.\n    isValid: function(options) {\n      return this._validate({}, _.extend(options || {}, { validate: true }));\n    },\n\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function(attrs, options) {\n      if (!options.validate || !this.validate) return true;\n      attrs = _.extend({}, this.attributes, attrs);\n      var error = this.validationError = this.validate(attrs, options) || null;\n      if (!error) return true;\n      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n      return false;\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Model.\n  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];\n\n  // Mix in each Underscore method as a proxy to `Model#attributes`.\n  _.each(modelMethods, function(method) {\n    Model.prototype[method] = function() {\n      var args = slice.call(arguments);\n      args.unshift(this.attributes);\n      return _[method].apply(_, args);\n    };\n  });\n\n  // Backbone.Collection\n  // -------------------\n\n  // If models tend to represent a single row of data, a Backbone Collection is\n  // more analagous to a table full of data ... or a small slice or page of that\n  // table, or a collection of rows that belong together for a particular reason\n  // -- all of the messages in this particular folder, all of the documents\n  // belonging to this particular author, and so on. Collections maintain\n  // indexes of their models, both in order, and for lookup by `id`.\n\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\n  // If a `comparator` is specified, the Collection will maintain\n  // its models in sort order, as they're added and removed.\n  var Collection = Backbone.Collection = function(models, options) {\n    options || (options = {});\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n    this._reset();\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, _.extend({silent: true}, options));\n  };\n\n  // Default options for `Collection#set`.\n  var setOptions = {add: true, remove: true, merge: true};\n  var addOptions = {add: true, remove: false};\n\n  // Define the Collection's inheritable methods.\n  _.extend(Collection.prototype, Events, {\n\n    // The default model for a collection is just a **Backbone.Model**.\n    // This should be overridden in most cases.\n    model: Model,\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // The JSON representation of a Collection is an array of the\n    // models' attributes.\n    toJSON: function(options) {\n      return this.map(function(model){ return model.toJSON(options); });\n    },\n\n    // Proxy `Backbone.sync` by default.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Add a model, or list of models to the set.\n    add: function(models, options) {\n      return this.set(models, _.extend({merge: false}, options, addOptions));\n    },\n\n    // Remove a model, or a list of models from the set.\n    remove: function(models, options) {\n      var singular = !_.isArray(models);\n      models = singular ? [models] : _.clone(models);\n      options || (options = {});\n      var i, l, index, model;\n      for (i = 0, l = models.length; i < l; i++) {\n        model = models[i] = this.get(models[i]);\n        if (!model) continue;\n        delete this._byId[model.id];\n        delete this._byId[model.cid];\n        index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--;\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n        this._removeReference(model);\n      }\n      return singular ? models[0] : models;\n    },\n\n    // Update a collection by `set`-ing a new list of models, adding new ones,\n    // removing models that are no longer present, and merging models that\n    // already exist in the collection, as necessary. Similar to **Model#set**,\n    // the core operation for updating the data contained by the collection.\n    set: function(models, options) {\n      options = _.defaults({}, options, setOptions);\n      if (options.parse) models = this.parse(models, options);\n      var singular = !_.isArray(models);\n      models = singular ? (models ? [models] : []) : _.clone(models);\n      var i, l, id, model, attrs, existing, sort;\n      var at = options.at;\n      var targetModel = this.model;\n      var sortable = this.comparator && (at == null) && options.sort !== false;\n      var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n      var toAdd = [], toRemove = [], modelMap = {};\n      var add = options.add, merge = options.merge, remove = options.remove;\n      var order = !sortable && add && remove ? [] : false;\n\n      // Turn bare objects into model references, and prevent invalid models\n      // from being added.\n      for (i = 0, l = models.length; i < l; i++) {\n        attrs = models[i];\n        if (attrs instanceof Model) {\n          id = model = attrs;\n        } else {\n          id = attrs[targetModel.prototype.idAttribute];\n        }\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        if (existing = this.get(id)) {\n          if (remove) modelMap[existing.cid] = true;\n          if (merge) {\n            attrs = attrs === model ? model.attributes : attrs;\n            if (options.parse) attrs = existing.parse(attrs, options);\n            existing.set(attrs, options);\n            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;\n          }\n          models[i] = existing;\n\n        // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\n          model = models[i] = this._prepareModel(attrs, options);\n          if (!model) continue;\n          toAdd.push(model);\n\n          // Listen to added models' events, and index models for lookup by\n          // `id` and by `cid`.\n          model.on('all', this._onModelEvent, this);\n          this._byId[model.cid] = model;\n          if (model.id != null) this._byId[model.id] = model;\n        }\n        if (order) order.push(existing || model);\n      }\n\n      // Remove nonexistent models if appropriate.\n      if (remove) {\n        for (i = 0, l = this.length; i < l; ++i) {\n          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);\n        }\n        if (toRemove.length) this.remove(toRemove, options);\n      }\n\n      // See if sorting is needed, update `length` and splice in new models.\n      if (toAdd.length || (order && order.length)) {\n        if (sortable) sort = true;\n        this.length += toAdd.length;\n        if (at != null) {\n          for (i = 0, l = toAdd.length; i < l; i++) {\n            this.models.splice(at + i, 0, toAdd[i]);\n          }\n        } else {\n          if (order) this.models.length = 0;\n          var orderedModels = order || toAdd;\n          for (i = 0, l = orderedModels.length; i < l; i++) {\n            this.models.push(orderedModels[i]);\n          }\n        }\n      }\n\n      // Silently sort the collection if appropriate.\n      if (sort) this.sort({silent: true});\n\n      // Unless silenced, it's time to fire all appropriate add/sort events.\n      if (!options.silent) {\n        for (i = 0, l = toAdd.length; i < l; i++) {\n          (model = toAdd[i]).trigger('add', model, this, options);\n        }\n        if (sort || (order && order.length)) this.trigger('sort', this, options);\n      }\n      \n      // Return the added (or merged) model (or models).\n      return singular ? models[0] : models;\n    },\n\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any granular `add` or `remove` events. Fires `reset` when finished.\n    // Useful for bulk operations and optimizations.\n    reset: function(models, options) {\n      options || (options = {});\n      for (var i = 0, l = this.models.length; i < l; i++) {\n        this._removeReference(this.models[i]);\n      }\n      options.previousModels = this.models;\n      this._reset();\n      models = this.add(models, _.extend({silent: true}, options));\n      if (!options.silent) this.trigger('reset', this, options);\n      return models;\n    },\n\n    // Add a model to the end of the collection.\n    push: function(model, options) {\n      return this.add(model, _.extend({at: this.length}, options));\n    },\n\n    // Remove a model from the end of the collection.\n    pop: function(options) {\n      var model = this.at(this.length - 1);\n      this.remove(model, options);\n      return model;\n    },\n\n    // Add a model to the beginning of the collection.\n    unshift: function(model, options) {\n      return this.add(model, _.extend({at: 0}, options));\n    },\n\n    // Remove a model from the beginning of the collection.\n    shift: function(options) {\n      var model = this.at(0);\n      this.remove(model, options);\n      return model;\n    },\n\n    // Slice out a sub-array of models from the collection.\n    slice: function() {\n      return slice.apply(this.models, arguments);\n    },\n\n    // Get a model from the set by id.\n    get: function(obj) {\n      if (obj == null) return void 0;\n      return this._byId[obj.id] || this._byId[obj.cid] || this._byId[obj];\n    },\n\n    // Get the model at the given index.\n    at: function(index) {\n      return this.models[index];\n    },\n\n    // Return models with matching attributes. Useful for simple cases of\n    // `filter`.\n    where: function(attrs, first) {\n      if (_.isEmpty(attrs)) return first ? void 0 : [];\n      return this[first ? 'find' : 'filter'](function(model) {\n        for (var key in attrs) {\n          if (attrs[key] !== model.get(key)) return false;\n        }\n        return true;\n      });\n    },\n\n    // Return the first model with matching attributes. Useful for simple cases\n    // of `find`.\n    findWhere: function(attrs) {\n      return this.where(attrs, true);\n    },\n\n    // Force the collection to re-sort itself. You don't need to call this under\n    // normal circumstances, as the set will maintain sort order as each item\n    // is added.\n    sort: function(options) {\n      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');\n      options || (options = {});\n\n      // Run sort based on type of `comparator`.\n      if (_.isString(this.comparator) || this.comparator.length === 1) {\n        this.models = this.sortBy(this.comparator, this);\n      } else {\n        this.models.sort(_.bind(this.comparator, this));\n      }\n\n      if (!options.silent) this.trigger('sort', this, options);\n      return this;\n    },\n\n    // Pluck an attribute from each model in the collection.\n    pluck: function(attr) {\n      return _.invoke(this.models, 'get', attr);\n    },\n\n    // Fetch the default set of models for this collection, resetting the\n    // collection when they arrive. If `reset: true` is passed, the response\n    // data will be passed through the `reset` method instead of `set`.\n    fetch: function(options) {\n      options = options ? _.clone(options) : {};\n      if (options.parse === void 0) options.parse = true;\n      var success = options.success;\n      var collection = this;\n      options.success = function(resp) {\n        var method = options.reset ? 'reset' : 'set';\n        collection[method](resp, options);\n        if (success) success(collection, resp, options);\n        collection.trigger('sync', collection, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Create a new instance of a model in this collection. Add the model to the\n    // collection immediately, unless `wait: true` is passed, in which case we\n    // wait for the server to agree.\n    create: function(model, options) {\n      options = options ? _.clone(options) : {};\n      if (!(model = this._prepareModel(model, options))) return false;\n      if (!options.wait) this.add(model, options);\n      var collection = this;\n      var success = options.success;\n      options.success = function(model, resp, options) {\n        if (options.wait) collection.add(model, options);\n        if (success) success(model, resp, options);\n      };\n      model.save(null, options);\n      return model;\n    },\n\n    // **parse** converts a response into a list of models to be added to the\n    // collection. The default implementation is just to pass it through.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new collection with an identical list of models as this one.\n    clone: function() {\n      return new this.constructor(this.models);\n    },\n\n    // Private method to reset all internal state. Called when the collection\n    // is first initialized or reset.\n    _reset: function() {\n      this.length = 0;\n      this.models = [];\n      this._byId  = {};\n    },\n\n    // Prepare a hash of attributes (or other model) to be added to this\n    // collection.\n    _prepareModel: function(attrs, options) {\n      if (attrs instanceof Model) {\n        if (!attrs.collection) attrs.collection = this;\n        return attrs;\n      }\n      options = options ? _.clone(options) : {};\n      options.collection = this;\n      var model = new this.model(attrs, options);\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n\n    // Internal method to sever a model's ties to a collection.\n    _removeReference: function(model) {\n      if (this === model.collection) delete model.collection;\n      model.off('all', this._onModelEvent, this);\n    },\n\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function(event, model, collection, options) {\n      if ((event === 'add' || event === 'remove') && collection !== this) return;\n      if (event === 'destroy') this.remove(model, options);\n      if (model && event === 'change:' + model.idAttribute) {\n        delete this._byId[model.previous(model.idAttribute)];\n        if (model.id != null) this._byId[model.id] = model;\n      }\n      this.trigger.apply(this, arguments);\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Collection.\n  // 90% of the core usefulness of Backbone Collections is actually implemented\n  // right here:\n  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',\n    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',\n    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',\n    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',\n    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',\n    'lastIndexOf', 'isEmpty', 'chain'];\n\n  // Mix in each Underscore method as a proxy to `Collection#models`.\n  _.each(methods, function(method) {\n    Collection.prototype[method] = function() {\n      var args = slice.call(arguments);\n      args.unshift(this.models);\n      return _[method].apply(_, args);\n    };\n  });\n\n  // Underscore methods that take a property name as an argument.\n  var attributeMethods = ['groupBy', 'countBy', 'sortBy'];\n\n  // Use attributes instead of properties.\n  _.each(attributeMethods, function(method) {\n    Collection.prototype[method] = function(value, context) {\n      var iterator = _.isFunction(value) ? value : function(model) {\n        return model.get(value);\n      };\n      return _[method](this.models, iterator, context);\n    };\n  });\n\n  // Backbone.View\n  // -------------\n\n  // Backbone Views are almost more convention than they are actual code. A View\n  // is simply a JavaScript object that represents a logical chunk of UI in the\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\n  // UI as a **View** allows you to define your DOM events declaratively, without\n  // having to worry about render order ... and makes it easy for the view to\n  // react to specific changes in the state of your models.\n\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    options || (options = {});\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n    this.delegateEvents();\n  };\n\n  // Cached regex to split keys for `delegate`.\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n  // List of view options to be merged as properties.\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n  // Set up all inheritable **Backbone.View** properties and methods.\n  _.extend(View.prototype, Events, {\n\n    // The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n\n    // jQuery delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be preferred to global lookups where possible.\n    $: function(selector) {\n      return this.$el.find(selector);\n    },\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // **render** is the core function that your view should override, in order\n    // to populate its element (`this.el`), with the appropriate HTML. The\n    // convention is for **render** to always return `this`.\n    render: function() {\n      return this;\n    },\n\n    // Remove this view by taking the element out of the DOM, and removing any\n    // applicable Backbone.Events listeners.\n    remove: function() {\n      this.$el.remove();\n      this.stopListening();\n      return this;\n    },\n\n    // Change the view's element (`this.el` property), including event\n    // re-delegation.\n    setElement: function(element, delegate) {\n      if (this.$el) this.undelegateEvents();\n      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);\n      this.el = this.$el[0];\n      if (delegate !== false) this.delegateEvents();\n      return this;\n    },\n\n    // Set callbacks, where `this.events` is a hash of\n    //\n    // *{\"event selector\": \"callback\"}*\n    //\n    //     {\n    //       'mousedown .title':  'edit',\n    //       'click .button':     'save',\n    //       'click .open':       function(e) { ... }\n    //     }\n    //\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\n    // Uses event delegation for efficiency.\n    // Omitting the selector binds the event to `this.el`.\n    // This only works for delegate-able events: not `focus`, `blur`, and\n    // not `change`, `submit`, and `reset` in Internet Explorer.\n    delegateEvents: function(events) {\n      if (!(events || (events = _.result(this, 'events')))) return this;\n      this.undelegateEvents();\n      for (var key in events) {\n        var method = events[key];\n        if (!_.isFunction(method)) method = this[events[key]];\n        if (!method) continue;\n\n        var match = key.match(delegateEventSplitter);\n        var eventName = match[1], selector = match[2];\n        method = _.bind(method, this);\n        eventName += '.delegateEvents' + this.cid;\n        if (selector === '') {\n          this.$el.on(eventName, method);\n        } else {\n          this.$el.on(eventName, selector, method);\n        }\n      }\n      return this;\n    },\n\n    // Clears all callbacks previously bound to the view with `delegateEvents`.\n    // You usually don't need to use this, but may wish to if you have multiple\n    // Backbone views attached to the same DOM element.\n    undelegateEvents: function() {\n      this.$el.off('.delegateEvents' + this.cid);\n      return this;\n    },\n\n    // Ensure that the View has a DOM element to render into.\n    // If `this.el` is a string, pass it through `$()`, take the first\n    // matching element, and re-assign it to `el`. Otherwise, create\n    // an element from the `id`, `className` and `tagName` properties.\n    _ensureElement: function() {\n      if (!this.el) {\n        var attrs = _.extend({}, _.result(this, 'attributes'));\n        if (this.id) attrs.id = _.result(this, 'id');\n        if (this.className) attrs['class'] = _.result(this, 'className');\n        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);\n        this.setElement($el, false);\n      } else {\n        this.setElement(_.result(this, 'el'), false);\n      }\n    }\n\n  });\n\n  // Backbone.sync\n  // -------------\n\n  // Override this function to change the manner in which Backbone persists\n  // models to the server. You will be passed the type of request, and the\n  // model in question. By default, makes a RESTful Ajax request\n  // to the model's `url()`. Some possible customizations could be:\n  //\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.\n  // * Send up the models as XML instead of JSON.\n  // * Persist models via WebSockets instead of Ajax.\n  //\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n  // as `POST`, with a `_method` parameter containing the true HTTP method,\n  // as well as all requests with the body as `application/x-www-form-urlencoded`\n  // instead of `application/json` with the model in a param named `model`.\n  // Useful when interfacing with server-side languages like **PHP** that make\n  // it difficult to read the body of `PUT` requests.\n  Backbone.sync = function(method, model, options) {\n    var type = methodMap[method];\n\n    // Default options, unless specified.\n    _.defaults(options || (options = {}), {\n      emulateHTTP: Backbone.emulateHTTP,\n      emulateJSON: Backbone.emulateJSON\n    });\n\n    // Default JSON-request options.\n    var params = {type: type, dataType: 'json'};\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n      params.url = _.result(model, 'url') || urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (options.emulateJSON) {\n      params.contentType = 'application/x-www-form-urlencoded';\n      params.data = params.data ? {model: params.data} : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n      params.type = 'POST';\n      if (options.emulateJSON) params.data._method = type;\n      var beforeSend = options.beforeSend;\n      options.beforeSend = function(xhr) {\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\n        if (beforeSend) return beforeSend.apply(this, arguments);\n      };\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET' && !options.emulateJSON) {\n      params.processData = false;\n    }\n\n    // If we're sending a `PATCH` request, and we're in an old Internet Explorer\n    // that still has ActiveX enabled by default, override jQuery to use that\n    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.\n    if (params.type === 'PATCH' && noXhrPatch) {\n      params.xhr = function() {\n        return new ActiveXObject(\"Microsoft.XMLHTTP\");\n      };\n    }\n\n    // Make the request, allowing the user to override any Ajax options.\n    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n    model.trigger('request', model, xhr, options);\n    return xhr;\n  };\n\n  var noXhrPatch = typeof window !== 'undefined' && !!window.ActiveXObject && !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);\n\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n  var methodMap = {\n    'create': 'POST',\n    'update': 'PUT',\n    'patch':  'PATCH',\n    'delete': 'DELETE',\n    'read':   'GET'\n  };\n\n  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n  // Override this if you'd like to use a different library.\n  Backbone.ajax = function() {\n    return Backbone.$.ajax.apply(Backbone.$, arguments);\n  };\n\n  // Backbone.Router\n  // ---------------\n\n  // Routers map faux-URLs to actions, and fire events when routes are\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\n  var Router = Backbone.Router = function(options) {\n    options || (options = {});\n    if (options.routes) this.routes = options.routes;\n    this._bindRoutes();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regular expressions for matching named param parts and splatted\n  // parts of route strings.\n  var optionalParam = /\\((.*?)\\)/g;\n  var namedParam    = /(\\(\\?)?:\\w+/g;\n  var splatParam    = /\\*\\w+/g;\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n  // Set up all inheritable **Backbone.Router** properties and methods.\n  _.extend(Router.prototype, Events, {\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Manually bind a single named route to a callback. For example:\n    //\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\n    //       ...\n    //     });\n    //\n    route: function(route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n      if (!callback) callback = this[name];\n      var router = this;\n      Backbone.history.route(route, function(fragment) {\n        var args = router._extractParameters(route, fragment);\n        callback && callback.apply(router, args);\n        router.trigger.apply(router, ['route:' + name].concat(args));\n        router.trigger('route', name, args);\n        Backbone.history.trigger('route', router, name, args);\n      });\n      return this;\n    },\n\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\n    navigate: function(fragment, options) {\n      Backbone.history.navigate(fragment, options);\n      return this;\n    },\n\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\n    // order of the routes here to support behavior where the most general\n    // routes can be defined at the bottom of the route map.\n    _bindRoutes: function() {\n      if (!this.routes) return;\n      this.routes = _.result(this, 'routes');\n      var route, routes = _.keys(this.routes);\n      while ((route = routes.pop()) != null) {\n        this.route(route, this.routes[route]);\n      }\n    },\n\n    // Convert a route string into a regular expression, suitable for matching\n    // against the current location hash.\n    _routeToRegExp: function(route) {\n      route = route.replace(escapeRegExp, '\\\\$&')\n                   .replace(optionalParam, '(?:$1)?')\n                   .replace(namedParam, function(match, optional) {\n                     return optional ? match : '([^\\/]+)';\n                   })\n                   .replace(splatParam, '(.*?)');\n      return new RegExp('^' + route + '$');\n    },\n\n    // Given a route, and a URL fragment that it matches, return the array of\n    // extracted decoded parameters. Empty or unmatched parameters will be\n    // treated as `null` to normalize cross-browser behavior.\n    _extractParameters: function(route, fragment) {\n      var params = route.exec(fragment).slice(1);\n      return _.map(params, function(param) {\n        return param ? decodeURIComponent(param) : null;\n      });\n    }\n\n  });\n\n  // Backbone.History\n  // ----------------\n\n  // Handles cross-browser history management, based on either\n  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n  // and URL fragments. If the browser supports neither (old IE, natch),\n  // falls back to polling.\n  var History = Backbone.History = function() {\n    this.handlers = [];\n    _.bindAll(this, 'checkUrl');\n\n    // Ensure that `History` can be used outside of the browser.\n    if (typeof window !== 'undefined') {\n      this.location = window.location;\n      this.history = window.history;\n    }\n  };\n\n  // Cached regex for stripping a leading hash/slash and trailing space.\n  var routeStripper = /^[#\\/]|\\s+$/g;\n\n  // Cached regex for stripping leading and trailing slashes.\n  var rootStripper = /^\\/+|\\/+$/g;\n\n  // Cached regex for detecting MSIE.\n  var isExplorer = /msie [\\w.]+/;\n\n  // Cached regex for removing a trailing slash.\n  var trailingSlash = /\\/$/;\n\n  // Cached regex for stripping urls of hash and query.\n  var pathStripper = /[?#].*$/;\n\n  // Has the history handling already been started?\n  History.started = false;\n\n  // Set up all inheritable **Backbone.History** properties and methods.\n  _.extend(History.prototype, Events, {\n\n    // The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n\n    // Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function(window) {\n      var match = (window || this).location.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n\n    // Get the cross-browser normalized URL fragment, either from the URL,\n    // the hash, or the override.\n    getFragment: function(fragment, forcePushState) {\n      if (fragment == null) {\n        if (this._hasPushState || !this._wantsHashChange || forcePushState) {\n          fragment = this.location.pathname;\n          var root = this.root.replace(trailingSlash, '');\n          if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);\n        } else {\n          fragment = this.getHash();\n        }\n      }\n      return fragment.replace(routeStripper, '');\n    },\n\n    // Start the hash change handling, returning `true` if the current URL matches\n    // an existing route, and `false` otherwise.\n    start: function(options) {\n      if (History.started) throw new Error(\"Backbone.history has already been started\");\n      History.started = true;\n\n      // Figure out the initial configuration. Do we need an iframe?\n      // Is pushState desired ... is it available?\n      this.options          = _.extend({root: '/'}, this.options, options);\n      this.root             = this.options.root;\n      this._wantsHashChange = this.options.hashChange !== false;\n      this._wantsPushState  = !!this.options.pushState;\n      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);\n      var fragment          = this.getFragment();\n      var docMode           = document.documentMode;\n      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));\n\n      // Normalize root to always include a leading and trailing slash.\n      this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n      if (oldIE && this._wantsHashChange) {\n        this.iframe = Backbone.$('<iframe src=\"javascript:0\" tabindex=\"-1\" />').hide().appendTo('body')[0].contentWindow;\n        this.navigate(fragment);\n      }\n\n      // Depending on whether we're using pushState or hashes, and whether\n      // 'onhashchange' is supported, determine how we check the URL state.\n      if (this._hasPushState) {\n        Backbone.$(window).on('popstate', this.checkUrl);\n      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {\n        Backbone.$(window).on('hashchange', this.checkUrl);\n      } else if (this._wantsHashChange) {\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n      }\n\n      // Determine if we need to change the base url, for a pushState link\n      // opened by a non-pushState browser.\n      this.fragment = fragment;\n      var loc = this.location;\n      var atRoot = loc.pathname.replace(/[^\\/]$/, '$&/') === this.root;\n\n      // Transition from hashChange to pushState or vice versa if both are\n      // requested.\n      if (this._wantsHashChange && this._wantsPushState) {\n\n        // If we've started off with a route from a `pushState`-enabled\n        // browser, but we're currently in a browser that doesn't support it...\n        if (!this._hasPushState && !atRoot) {\n          this.fragment = this.getFragment(null, true);\n          this.location.replace(this.root + this.location.search + '#' + this.fragment);\n          // Return immediately as browser will do redirect to new url\n          return true;\n\n        // Or if we've started out with a hash-based route, but we're currently\n        // in a browser where it could be `pushState`-based instead...\n        } else if (this._hasPushState && atRoot && loc.hash) {\n          this.fragment = this.getHash().replace(routeStripper, '');\n          this.history.replaceState({}, document.title, this.root + this.fragment + loc.search);\n        }\n\n      }\n\n      if (!this.options.silent) return this.loadUrl();\n    },\n\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n    // but possibly useful for unit testing Routers.\n    stop: function() {\n      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);\n      clearInterval(this._checkUrlInterval);\n      History.started = false;\n    },\n\n    // Add a route to be tested when the fragment changes. Routes added later\n    // may override previous routes.\n    route: function(route, callback) {\n      this.handlers.unshift({route: route, callback: callback});\n    },\n\n    // Checks the current URL to see if it has changed, and if it has,\n    // calls `loadUrl`, normalizing across the hidden iframe.\n    checkUrl: function(e) {\n      var current = this.getFragment();\n      if (current === this.fragment && this.iframe) {\n        current = this.getFragment(this.getHash(this.iframe));\n      }\n      if (current === this.fragment) return false;\n      if (this.iframe) this.navigate(current);\n      this.loadUrl();\n    },\n\n    // Attempt to load the current URL fragment. If a route succeeds with a\n    // match, returns `true`. If no defined routes matches the fragment,\n    // returns `false`.\n    loadUrl: function(fragment) {\n      fragment = this.fragment = this.getFragment(fragment);\n      return _.any(this.handlers, function(handler) {\n        if (handler.route.test(fragment)) {\n          handler.callback(fragment);\n          return true;\n        }\n      });\n    },\n\n    // Save a fragment into the hash history, or replace the URL state if the\n    // 'replace' option is passed. You are responsible for properly URL-encoding\n    // the fragment in advance.\n    //\n    // The options object can contain `trigger: true` if you wish to have the\n    // route callback be fired (not usually desirable), or `replace: true`, if\n    // you wish to modify the current URL without adding an entry to the history.\n    navigate: function(fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: !!options};\n\n      var url = this.root + (fragment = this.getFragment(fragment || ''));\n\n      // Strip the fragment of the query and hash for matching.\n      fragment = fragment.replace(pathStripper, '');\n\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n\n      // Don't include a trailing slash on the root.\n      if (fragment === '' && url !== '/') url = url.slice(0, -1);\n\n      // If pushState is available, we use it to set the fragment as a real URL.\n      if (this._hasPushState) {\n        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n      // If hash changes haven't been explicitly disabled, update the hash\n      // fragment to store history.\n      } else if (this._wantsHashChange) {\n        this._updateHash(this.location, fragment, options.replace);\n        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {\n          // Opening and closing the iframe tricks IE7 and earlier to push a\n          // history entry on hash-tag change.  When replace is true, we don't\n          // want this.\n          if(!options.replace) this.iframe.document.open().close();\n          this._updateHash(this.iframe.location, fragment, options.replace);\n        }\n\n      // If you've told us that you explicitly don't want fallback hashchange-\n      // based history, then `navigate` becomes a page refresh.\n      } else {\n        return this.location.assign(url);\n      }\n      if (options.trigger) return this.loadUrl(fragment);\n    },\n\n    // Update the hash location, either replacing the current entry, or adding\n    // a new one to the browser history.\n    _updateHash: function(location, fragment, replace) {\n      if (replace) {\n        var href = location.href.replace(/(javascript:|#).*$/, '');\n        location.replace(href + '#' + fragment);\n      } else {\n        // Some browsers require that `hash` contains a leading #.\n        location.hash = '#' + fragment;\n      }\n    }\n\n  });\n\n  // Create the default Backbone.history.\n  Backbone.history = new History;\n\n  // Helpers\n  // -------\n\n  // Helper function to correctly set up the prototype chain, for subclasses.\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and\n  // class properties to be extended.\n  var extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent's constructor.\n    if (protoProps && _.has(protoProps, 'constructor')) {\n      child = protoProps.constructor;\n    } else {\n      child = function(){ return parent.apply(this, arguments); };\n    }\n\n    // Add static properties to the constructor function, if supplied.\n    _.extend(child, parent, staticProps);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function.\n    var Surrogate = function(){ this.constructor = child; };\n    Surrogate.prototype = parent.prototype;\n    child.prototype = new Surrogate;\n\n    // Add prototype properties (instance properties) to the subclass,\n    // if supplied.\n    if (protoProps) _.extend(child.prototype, protoProps);\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n  };\n\n  // Set up inheritance for the model, collection, router, view and history.\n  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n  // Throw an error when a URL is needed, and none is supplied.\n  var urlError = function() {\n    throw new Error('A \"url\" property or function must be specified');\n  };\n\n  // Wrap an optional error callback with a fallback error event.\n  var wrapError = function(model, options) {\n    var error = options.error;\n    options.error = function(resp) {\n      if (error) error(model, resp, options);\n      model.trigger('error', model, resp, options);\n    };\n  };\n\n}).call(this);\n");
espreePayloads.set("jquery-3.2.1.js", "/*!\n * jQuery JavaScript Library v3.2.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2017-03-20T18:59Z\n */\n( function( global, factory ) {\n\n	\"use strict\";\n\n	if ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n		// For CommonJS and CommonJS-like environments where a proper `window`\n		// is present, execute the factory and get jQuery.\n		// For environments that do not have a `window` with a `document`\n		// (such as Node.js), expose a factory as module.exports.\n		// This accentuates the need for the creation of a real `window`.\n		// e.g. var jQuery = require(\"jquery\")(window);\n		// See ticket #14549 for more info.\n		module.exports = global.document ?\n			factory( global, true ) :\n			function( w ) {\n				if ( !w.document ) {\n					throw new Error( \"jQuery requires a window with a document\" );\n				}\n				return factory( w );\n			};\n	} else {\n		factory( global );\n	}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\n\n\n	function DOMEval( code, doc ) {\n		doc = doc || document;\n\n		var script = doc.createElement( \"script\" );\n\n		script.text = code;\n		doc.head.appendChild( script ).parentNode.removeChild( script );\n	}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n	version = \"3.2.1\",\n\n	// Define a local copy of jQuery\n	jQuery = function( selector, context ) {\n\n		// The jQuery object is actually just the init constructor 'enhanced'\n		// Need init if jQuery is called (just allow error to be thrown if not included)\n		return new jQuery.fn.init( selector, context );\n	},\n\n	// Support: Android <=4.0 only\n	// Make sure we trim BOM and NBSP\n	rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n	// Matches dashed string for camelizing\n	rmsPrefix = /^-ms-/,\n	rdashAlpha = /-([a-z])/g,\n\n	// Used by jQuery.camelCase as callback to replace()\n	fcamelCase = function( all, letter ) {\n		return letter.toUpperCase();\n	};\n\njQuery.fn = jQuery.prototype = {\n\n	// The current version of jQuery being used\n	jquery: version,\n\n	constructor: jQuery,\n\n	// The default length of a jQuery object is 0\n	length: 0,\n\n	toArray: function() {\n		return slice.call( this );\n	},\n\n	// Get the Nth element in the matched element set OR\n	// Get the whole matched element set as a clean array\n	get: function( num ) {\n\n		// Return all the elements in a clean array\n		if ( num == null ) {\n			return slice.call( this );\n		}\n\n		// Return just the one element from the set\n		return num < 0 ? this[ num + this.length ] : this[ num ];\n	},\n\n	// Take an array of elements and push it onto the stack\n	// (returning the new matched element set)\n	pushStack: function( elems ) {\n\n		// Build a new jQuery matched element set\n		var ret = jQuery.merge( this.constructor(), elems );\n\n		// Add the old object onto the stack (as a reference)\n		ret.prevObject = this;\n\n		// Return the newly-formed element set\n		return ret;\n	},\n\n	// Execute a callback for every element in the matched set.\n	each: function( callback ) {\n		return jQuery.each( this, callback );\n	},\n\n	map: function( callback ) {\n		return this.pushStack( jQuery.map( this, function( elem, i ) {\n			return callback.call( elem, i, elem );\n		} ) );\n	},\n\n	slice: function() {\n		return this.pushStack( slice.apply( this, arguments ) );\n	},\n\n	first: function() {\n		return this.eq( 0 );\n	},\n\n	last: function() {\n		return this.eq( -1 );\n	},\n\n	eq: function( i ) {\n		var len = this.length,\n			j = +i + ( i < 0 ? len : 0 );\n		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n	},\n\n	end: function() {\n		return this.prevObject || this.constructor();\n	},\n\n	// For internal use only.\n	// Behaves like an Array's method, not like a jQuery method.\n	push: push,\n	sort: arr.sort,\n	splice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n	var options, name, src, copy, copyIsArray, clone,\n		target = arguments[ 0 ] || {},\n		i = 1,\n		length = arguments.length,\n		deep = false;\n\n	// Handle a deep copy situation\n	if ( typeof target === \"boolean\" ) {\n		deep = target;\n\n		// Skip the boolean and the target\n		target = arguments[ i ] || {};\n		i++;\n	}\n\n	// Handle case when target is a string or something (possible in deep copy)\n	if ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n		target = {};\n	}\n\n	// Extend jQuery itself if only one argument is passed\n	if ( i === length ) {\n		target = this;\n		i--;\n	}\n\n	for ( ; i < length; i++ ) {\n\n		// Only deal with non-null/undefined values\n		if ( ( options = arguments[ i ] ) != null ) {\n\n			// Extend the base object\n			for ( name in options ) {\n				src = target[ name ];\n				copy = options[ name ];\n\n				// Prevent never-ending loop\n				if ( target === copy ) {\n					continue;\n				}\n\n				// Recurse if we're merging plain objects or arrays\n				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n					( copyIsArray = Array.isArray( copy ) ) ) ) {\n\n					if ( copyIsArray ) {\n						copyIsArray = false;\n						clone = src && Array.isArray( src ) ? src : [];\n\n					} else {\n						clone = src && jQuery.isPlainObject( src ) ? src : {};\n					}\n\n					// Never move original objects, clone them\n					target[ name ] = jQuery.extend( deep, clone, copy );\n\n				// Don't bring in undefined values\n				} else if ( copy !== undefined ) {\n					target[ name ] = copy;\n				}\n			}\n		}\n	}\n\n	// Return the modified object\n	return target;\n};\n\njQuery.extend( {\n\n	// Unique for each copy of jQuery on the page\n	expando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n	// Assume jQuery is ready without the ready module\n	isReady: true,\n\n	error: function( msg ) {\n		throw new Error( msg );\n	},\n\n	noop: function() {},\n\n	isFunction: function( obj ) {\n		return jQuery.type( obj ) === \"function\";\n	},\n\n	isWindow: function( obj ) {\n		return obj != null && obj === obj.window;\n	},\n\n	isNumeric: function( obj ) {\n\n		// As of jQuery 3.0, isNumeric is limited to\n		// strings and numbers (primitives or objects)\n		// that can be coerced to finite numbers (gh-2662)\n		var type = jQuery.type( obj );\n		return ( type === \"number\" || type === \"string\" ) &&\n\n			// parseFloat NaNs numeric-cast false positives (\"\")\n			// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n			// subtraction forces infinities to NaN\n			!isNaN( obj - parseFloat( obj ) );\n	},\n\n	isPlainObject: function( obj ) {\n		var proto, Ctor;\n\n		// Detect obvious negatives\n		// Use toString instead of jQuery.type to catch host objects\n		if ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n			return false;\n		}\n\n		proto = getProto( obj );\n\n		// Objects with no prototype (e.g., `Object.create( null )`) are plain\n		if ( !proto ) {\n			return true;\n		}\n\n		// Objects with prototype are plain iff they were constructed by a global Object function\n		Ctor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n		return typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n	},\n\n	isEmptyObject: function( obj ) {\n\n		/* eslint-disable no-unused-vars */\n		// See https://github.com/eslint/eslint/issues/6125\n		var name;\n\n		for ( name in obj ) {\n			return false;\n		}\n		return true;\n	},\n\n	type: function( obj ) {\n		if ( obj == null ) {\n			return obj + \"\";\n		}\n\n		// Support: Android <=2.3 only (functionish RegExp)\n		return typeof obj === \"object\" || typeof obj === \"function\" ?\n			class2type[ toString.call( obj ) ] || \"object\" :\n			typeof obj;\n	},\n\n	// Evaluates a script in a global context\n	globalEval: function( code ) {\n		DOMEval( code );\n	},\n\n	// Convert dashed to camelCase; used by the css and data modules\n	// Support: IE <=9 - 11, Edge 12 - 13\n	// Microsoft forgot to hump their vendor prefix (#9572)\n	camelCase: function( string ) {\n		return string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n	},\n\n	each: function( obj, callback ) {\n		var length, i = 0;\n\n		if ( isArrayLike( obj ) ) {\n			length = obj.length;\n			for ( ; i < length; i++ ) {\n				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n					break;\n				}\n			}\n		} else {\n			for ( i in obj ) {\n				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n					break;\n				}\n			}\n		}\n\n		return obj;\n	},\n\n	// Support: Android <=4.0 only\n	trim: function( text ) {\n		return text == null ?\n			\"\" :\n			( text + \"\" ).replace( rtrim, \"\" );\n	},\n\n	// results is for internal usage only\n	makeArray: function( arr, results ) {\n		var ret = results || [];\n\n		if ( arr != null ) {\n			if ( isArrayLike( Object( arr ) ) ) {\n				jQuery.merge( ret,\n					typeof arr === \"string\" ?\n					[ arr ] : arr\n				);\n			} else {\n				push.call( ret, arr );\n			}\n		}\n\n		return ret;\n	},\n\n	inArray: function( elem, arr, i ) {\n		return arr == null ? -1 : indexOf.call( arr, elem, i );\n	},\n\n	// Support: Android <=4.0 only, PhantomJS 1 only\n	// push.apply(_, arraylike) throws on ancient WebKit\n	merge: function( first, second ) {\n		var len = +second.length,\n			j = 0,\n			i = first.length;\n\n		for ( ; j < len; j++ ) {\n			first[ i++ ] = second[ j ];\n		}\n\n		first.length = i;\n\n		return first;\n	},\n\n	grep: function( elems, callback, invert ) {\n		var callbackInverse,\n			matches = [],\n			i = 0,\n			length = elems.length,\n			callbackExpect = !invert;\n\n		// Go through the array, only saving the items\n		// that pass the validator function\n		for ( ; i < length; i++ ) {\n			callbackInverse = !callback( elems[ i ], i );\n			if ( callbackInverse !== callbackExpect ) {\n				matches.push( elems[ i ] );\n			}\n		}\n\n		return matches;\n	},\n\n	// arg is for internal usage only\n	map: function( elems, callback, arg ) {\n		var length, value,\n			i = 0,\n			ret = [];\n\n		// Go through the array, translating each of the items to their new values\n		if ( isArrayLike( elems ) ) {\n			length = elems.length;\n			for ( ; i < length; i++ ) {\n				value = callback( elems[ i ], i, arg );\n\n				if ( value != null ) {\n					ret.push( value );\n				}\n			}\n\n		// Go through every key on the object,\n		} else {\n			for ( i in elems ) {\n				value = callback( elems[ i ], i, arg );\n\n				if ( value != null ) {\n					ret.push( value );\n				}\n			}\n		}\n\n		// Flatten any nested arrays\n		return concat.apply( [], ret );\n	},\n\n	// A global GUID counter for objects\n	guid: 1,\n\n	// Bind a function to a context, optionally partially applying any\n	// arguments.\n	proxy: function( fn, context ) {\n		var tmp, args, proxy;\n\n		if ( typeof context === \"string\" ) {\n			tmp = fn[ context ];\n			context = fn;\n			fn = tmp;\n		}\n\n		// Quick check to determine if target is callable, in the spec\n		// this throws a TypeError, but we will just return undefined.\n		if ( !jQuery.isFunction( fn ) ) {\n			return undefined;\n		}\n\n		// Simulated bind\n		args = slice.call( arguments, 2 );\n		proxy = function() {\n			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n		};\n\n		// Set the guid of unique handler to the same of original handler, so it can be removed\n		proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n		return proxy;\n	},\n\n	now: Date.now,\n\n	// jQuery.support is not used in Core but other projects attach their\n	// properties to it so it needs to exist.\n	support: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n	class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n	// Support: real iOS 8.2 only (not reproducible in simulator)\n	// `in` check used to prevent JIT error (gh-2145)\n	// hasOwn isn't used here due to false negatives\n	// regarding Nodelist length in IE\n	var length = !!obj && \"length\" in obj && obj.length,\n		type = jQuery.type( obj );\n\n	if ( type === \"function\" || jQuery.isWindow( obj ) ) {\n		return false;\n	}\n\n	return type === \"array\" || length === 0 ||\n		typeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.3\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-08-08\n */\n(function( window ) {\n\nvar i,\n	support,\n	Expr,\n	getText,\n	isXML,\n	tokenize,\n	compile,\n	select,\n	outermostContext,\n	sortInput,\n	hasDuplicate,\n\n	// Local document vars\n	setDocument,\n	document,\n	docElem,\n	documentIsHTML,\n	rbuggyQSA,\n	rbuggyMatches,\n	matches,\n	contains,\n\n	// Instance-specific data\n	expando = \"sizzle\" + 1 * new Date(),\n	preferredDoc = window.document,\n	dirruns = 0,\n	done = 0,\n	classCache = createCache(),\n	tokenCache = createCache(),\n	compilerCache = createCache(),\n	sortOrder = function( a, b ) {\n		if ( a === b ) {\n			hasDuplicate = true;\n		}\n		return 0;\n	},\n\n	// Instance methods\n	hasOwn = ({}).hasOwnProperty,\n	arr = [],\n	pop = arr.pop,\n	push_native = arr.push,\n	push = arr.push,\n	slice = arr.slice,\n	// Use a stripped-down indexOf as it's faster than native\n	// https://jsperf.com/thor-indexof-vs-for/5\n	indexOf = function( list, elem ) {\n		var i = 0,\n			len = list.length;\n		for ( ; i < len; i++ ) {\n			if ( list[i] === elem ) {\n				return i;\n			}\n		}\n		return -1;\n	},\n\n	booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n	// Regular expressions\n\n	// http://www.w3.org/TR/css3-selectors/#whitespace\n	whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n	identifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n	attributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n		// Operator (capture 2)\n		\"*([*^$|!~]?=)\" + whitespace +\n		// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n		\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n		\"*\\\\]\",\n\n	pseudos = \":(\" + identifier + \")(?:\\\\((\" +\n		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n		// 1. quoted (capture 3; capture 4 or capture 5)\n		\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n		// 2. simple (capture 6)\n		\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n		// 3. anything else (capture 2)\n		\".*\" +\n		\")\\\\)|)\",\n\n	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n	rwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n	rtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n	rcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n	rcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n	rattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n	rpseudo = new RegExp( pseudos ),\n	ridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n	matchExpr = {\n		\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n		\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n		\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n		\"ATTR\": new RegExp( \"^\" + attributes ),\n		\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n		\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n			\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n			\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n		\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n		// For use in libraries implementing .is()\n		// We use this for POS matching in `select`\n		\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n			whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n	},\n\n	rinputs = /^(?:input|select|textarea|button)$/i,\n	rheader = /^h\\d$/i,\n\n	rnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n	// Easily-parseable/retrievable ID or TAG or CLASS selectors\n	rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n	rsibling = /[+~]/,\n\n	// CSS escapes\n	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n	runescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n	funescape = function( _, escaped, escapedWhitespace ) {\n		var high = \"0x\" + escaped - 0x10000;\n		// NaN means non-codepoint\n		// Support: Firefox<24\n		// Workaround erroneous numeric interpretation of +\"0x\"\n		return high !== high || escapedWhitespace ?\n			escaped :\n			high < 0 ?\n				// BMP codepoint\n				String.fromCharCode( high + 0x10000 ) :\n				// Supplemental Plane codepoint (surrogate pair)\n				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n	},\n\n	// CSS string/identifier serialization\n	// https://drafts.csswg.org/cssom/#common-serializing-idioms\n	rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n	fcssescape = function( ch, asCodePoint ) {\n		if ( asCodePoint ) {\n\n			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n			if ( ch === \"\\0\" ) {\n				return \"\\uFFFD\";\n			}\n\n			// Control characters and (dependent upon position) numbers get escaped as code points\n			return ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n		}\n\n		// Other potentially-special ASCII characters get backslash-escaped\n		return \"\\\\\" + ch;\n	},\n\n	// Used for iframes\n	// See setDocument()\n	// Removing the function wrapper causes a \"Permission Denied\"\n	// error in IE\n	unloadHandler = function() {\n		setDocument();\n	},\n\n	disabledAncestor = addCombinator(\n		function( elem ) {\n			return elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n		},\n		{ dir: \"parentNode\", next: \"legend\" }\n	);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n	push.apply(\n		(arr = slice.call( preferredDoc.childNodes )),\n		preferredDoc.childNodes\n	);\n	// Support: Android<4.0\n	// Detect silently failing push.apply\n	arr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n	push = { apply: arr.length ?\n\n		// Leverage slice if possible\n		function( target, els ) {\n			push_native.apply( target, slice.call(els) );\n		} :\n\n		// Support: IE<9\n		// Otherwise append directly\n		function( target, els ) {\n			var j = target.length,\n				i = 0;\n			// Can't trust NodeList.length\n			while ( (target[j++] = els[i++]) ) {}\n			target.length = j - 1;\n		}\n	};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n	var m, i, elem, nid, match, groups, newSelector,\n		newContext = context && context.ownerDocument,\n\n		// nodeType defaults to 9, since context defaults to document\n		nodeType = context ? context.nodeType : 9;\n\n	results = results || [];\n\n	// Return early from calls with invalid selector or context\n	if ( typeof selector !== \"string\" || !selector ||\n		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n		return results;\n	}\n\n	// Try to shortcut find operations (as opposed to filters) in HTML documents\n	if ( !seed ) {\n\n		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n			setDocument( context );\n		}\n		context = context || document;\n\n		if ( documentIsHTML ) {\n\n			// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n			// (excepting DocumentFragment context, where the methods don't exist)\n			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n				// ID selector\n				if ( (m = match[1]) ) {\n\n					// Document context\n					if ( nodeType === 9 ) {\n						if ( (elem = context.getElementById( m )) ) {\n\n							// Support: IE, Opera, Webkit\n							// TODO: identify versions\n							// getElementById can match elements by name instead of ID\n							if ( elem.id === m ) {\n								results.push( elem );\n								return results;\n							}\n						} else {\n							return results;\n						}\n\n					// Element context\n					} else {\n\n						// Support: IE, Opera, Webkit\n						// TODO: identify versions\n						// getElementById can match elements by name instead of ID\n						if ( newContext && (elem = newContext.getElementById( m )) &&\n							contains( context, elem ) &&\n							elem.id === m ) {\n\n							results.push( elem );\n							return results;\n						}\n					}\n\n				// Type selector\n				} else if ( match[2] ) {\n					push.apply( results, context.getElementsByTagName( selector ) );\n					return results;\n\n				// Class selector\n				} else if ( (m = match[3]) && support.getElementsByClassName &&\n					context.getElementsByClassName ) {\n\n					push.apply( results, context.getElementsByClassName( m ) );\n					return results;\n				}\n			}\n\n			// Take advantage of querySelectorAll\n			if ( support.qsa &&\n				!compilerCache[ selector + \" \" ] &&\n				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n				if ( nodeType !== 1 ) {\n					newContext = context;\n					newSelector = selector;\n\n				// qSA looks outside Element context, which is not what we want\n				// Thanks to Andrew Dupont for this workaround technique\n				// Support: IE <=8\n				// Exclude object elements\n				} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n					// Capture the context ID, setting it first if necessary\n					if ( (nid = context.getAttribute( \"id\" )) ) {\n						nid = nid.replace( rcssescape, fcssescape );\n					} else {\n						context.setAttribute( \"id\", (nid = expando) );\n					}\n\n					// Prefix every selector in the list\n					groups = tokenize( selector );\n					i = groups.length;\n					while ( i-- ) {\n						groups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n					}\n					newSelector = groups.join( \",\" );\n\n					// Expand context for sibling selectors\n					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n						context;\n				}\n\n				if ( newSelector ) {\n					try {\n						push.apply( results,\n							newContext.querySelectorAll( newSelector )\n						);\n						return results;\n					} catch ( qsaError ) {\n					} finally {\n						if ( nid === expando ) {\n							context.removeAttribute( \"id\" );\n						}\n					}\n				}\n			}\n		}\n	}\n\n	// All others\n	return select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *	deleting the oldest entry\n */\nfunction createCache() {\n	var keys = [];\n\n	function cache( key, value ) {\n		// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n		if ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n			// Only keep the most recent entries\n			delete cache[ keys.shift() ];\n		}\n		return (cache[ key + \" \" ] = value);\n	}\n	return cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n	fn[ expando ] = true;\n	return fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n	var el = document.createElement(\"fieldset\");\n\n	try {\n		return !!fn( el );\n	} catch (e) {\n		return false;\n	} finally {\n		// Remove from its parent by default\n		if ( el.parentNode ) {\n			el.parentNode.removeChild( el );\n		}\n		// release memory in IE\n		el = null;\n	}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n	var arr = attrs.split(\"|\"),\n		i = arr.length;\n\n	while ( i-- ) {\n		Expr.attrHandle[ arr[i] ] = handler;\n	}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n	var cur = b && a,\n		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n			a.sourceIndex - b.sourceIndex;\n\n	// Use IE sourceIndex if available on both nodes\n	if ( diff ) {\n		return diff;\n	}\n\n	// Check if b follows a\n	if ( cur ) {\n		while ( (cur = cur.nextSibling) ) {\n			if ( cur === b ) {\n				return -1;\n			}\n		}\n	}\n\n	return a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n	return function( elem ) {\n		var name = elem.nodeName.toLowerCase();\n		return name === \"input\" && elem.type === type;\n	};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n	return function( elem ) {\n		var name = elem.nodeName.toLowerCase();\n		return (name === \"input\" || name === \"button\") && elem.type === type;\n	};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n	return function( elem ) {\n\n		// Only certain elements can match :enabled or :disabled\n		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n		if ( \"form\" in elem ) {\n\n			// Check for inherited disabledness on relevant non-disabled elements:\n			// * listed form-associated elements in a disabled fieldset\n			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n			// * option elements in a disabled optgroup\n			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n			// All such elements have a \"form\" property.\n			if ( elem.parentNode && elem.disabled === false ) {\n\n				// Option elements defer to a parent optgroup if present\n				if ( \"label\" in elem ) {\n					if ( \"label\" in elem.parentNode ) {\n						return elem.parentNode.disabled === disabled;\n					} else {\n						return elem.disabled === disabled;\n					}\n				}\n\n				// Support: IE 6 - 11\n				// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n				return elem.isDisabled === disabled ||\n\n					// Where there is no isDisabled, check manually\n					/* jshint -W018 */\n					elem.isDisabled !== !disabled &&\n						disabledAncestor( elem ) === disabled;\n			}\n\n			return elem.disabled === disabled;\n\n		// Try to winnow out elements that can't be disabled before trusting the disabled property.\n		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n		// even exist on them, let alone have a boolean value.\n		} else if ( \"label\" in elem ) {\n			return elem.disabled === disabled;\n		}\n\n		// Remaining elements are neither :enabled nor :disabled\n		return false;\n	};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n	return markFunction(function( argument ) {\n		argument = +argument;\n		return markFunction(function( seed, matches ) {\n			var j,\n				matchIndexes = fn( [], seed.length, argument ),\n				i = matchIndexes.length;\n\n			// Match elements found at the specified indexes\n			while ( i-- ) {\n				if ( seed[ (j = matchIndexes[i]) ] ) {\n					seed[j] = !(matches[j] = seed[j]);\n				}\n			}\n		});\n	});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n	return context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n	// documentElement is verified for cases where it doesn't yet exist\n	// (such as loading iframes in IE - #4833)\n	var documentElement = elem && (elem.ownerDocument || elem).documentElement;\n	return documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n	var hasCompare, subWindow,\n		doc = node ? node.ownerDocument || node : preferredDoc;\n\n	// Return early if doc is invalid or already selected\n	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n		return document;\n	}\n\n	// Update global variables\n	document = doc;\n	docElem = document.documentElement;\n	documentIsHTML = !isXML( document );\n\n	// Support: IE 9-11, Edge\n	// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n	if ( preferredDoc !== document &&\n		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n		// Support: IE 11, Edge\n		if ( subWindow.addEventListener ) {\n			subWindow.addEventListener( \"unload\", unloadHandler, false );\n\n		// Support: IE 9 - 10 only\n		} else if ( subWindow.attachEvent ) {\n			subWindow.attachEvent( \"onunload\", unloadHandler );\n		}\n	}\n\n	/* Attributes\n	---------------------------------------------------------------------- */\n\n	// Support: IE<8\n	// Verify that getAttribute really returns attributes and not properties\n	// (excepting IE8 booleans)\n	support.attributes = assert(function( el ) {\n		el.className = \"i\";\n		return !el.getAttribute(\"className\");\n	});\n\n	/* getElement(s)By*\n	---------------------------------------------------------------------- */\n\n	// Check if getElementsByTagName(\"*\") returns only elements\n	support.getElementsByTagName = assert(function( el ) {\n		el.appendChild( document.createComment(\"\") );\n		return !el.getElementsByTagName(\"*\").length;\n	});\n\n	// Support: IE<9\n	support.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n	// Support: IE<10\n	// Check if getElementById returns elements by name\n	// The broken getElementById methods don't pick up programmatically-set names,\n	// so use a roundabout getElementsByName test\n	support.getById = assert(function( el ) {\n		docElem.appendChild( el ).id = expando;\n		return !document.getElementsByName || !document.getElementsByName( expando ).length;\n	});\n\n	// ID filter and find\n	if ( support.getById ) {\n		Expr.filter[\"ID\"] = function( id ) {\n			var attrId = id.replace( runescape, funescape );\n			return function( elem ) {\n				return elem.getAttribute(\"id\") === attrId;\n			};\n		};\n		Expr.find[\"ID\"] = function( id, context ) {\n			if ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n				var elem = context.getElementById( id );\n				return elem ? [ elem ] : [];\n			}\n		};\n	} else {\n		Expr.filter[\"ID\"] =  function( id ) {\n			var attrId = id.replace( runescape, funescape );\n			return function( elem ) {\n				var node = typeof elem.getAttributeNode !== \"undefined\" &&\n					elem.getAttributeNode(\"id\");\n				return node && node.value === attrId;\n			};\n		};\n\n		// Support: IE 6 - 7 only\n		// getElementById is not reliable as a find shortcut\n		Expr.find[\"ID\"] = function( id, context ) {\n			if ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n				var node, i, elems,\n					elem = context.getElementById( id );\n\n				if ( elem ) {\n\n					// Verify the id attribute\n					node = elem.getAttributeNode(\"id\");\n					if ( node && node.value === id ) {\n						return [ elem ];\n					}\n\n					// Fall back on getElementsByName\n					elems = context.getElementsByName( id );\n					i = 0;\n					while ( (elem = elems[i++]) ) {\n						node = elem.getAttributeNode(\"id\");\n						if ( node && node.value === id ) {\n							return [ elem ];\n						}\n					}\n				}\n\n				return [];\n			}\n		};\n	}\n\n	// Tag\n	Expr.find[\"TAG\"] = support.getElementsByTagName ?\n		function( tag, context ) {\n			if ( typeof context.getElementsByTagName !== \"undefined\" ) {\n				return context.getElementsByTagName( tag );\n\n			// DocumentFragment nodes don't have gEBTN\n			} else if ( support.qsa ) {\n				return context.querySelectorAll( tag );\n			}\n		} :\n\n		function( tag, context ) {\n			var elem,\n				tmp = [],\n				i = 0,\n				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n				results = context.getElementsByTagName( tag );\n\n			// Filter out possible comments\n			if ( tag === \"*\" ) {\n				while ( (elem = results[i++]) ) {\n					if ( elem.nodeType === 1 ) {\n						tmp.push( elem );\n					}\n				}\n\n				return tmp;\n			}\n			return results;\n		};\n\n	// Class\n	Expr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n		if ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n			return context.getElementsByClassName( className );\n		}\n	};\n\n	/* QSA/matchesSelector\n	---------------------------------------------------------------------- */\n\n	// QSA and matchesSelector support\n\n	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n	rbuggyMatches = [];\n\n	// qSa(:focus) reports false when true (Chrome 21)\n	// We allow this because of a bug in IE8/9 that throws an error\n	// whenever `document.activeElement` is accessed on an iframe\n	// So, we allow :focus to pass through QSA all the time to avoid the IE error\n	// See https://bugs.jquery.com/ticket/13378\n	rbuggyQSA = [];\n\n	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n		// Build QSA regex\n		// Regex strategy adopted from Diego Perini\n		assert(function( el ) {\n			// Select is set to empty string on purpose\n			// This is to test IE's treatment of not explicitly\n			// setting a boolean content attribute,\n			// since its presence should be enough\n			// https://bugs.jquery.com/ticket/12359\n			docElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n				\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n				\"<option selected=''></option></select>\";\n\n			// Support: IE8, Opera 11-12.16\n			// Nothing should be selected when empty strings follow ^= or $= or *=\n			// The test attribute must be unknown in Opera but \"safe\" for WinRT\n			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n			if ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n				rbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n			}\n\n			// Support: IE8\n			// Boolean attributes and \"value\" are not treated correctly\n			if ( !el.querySelectorAll(\"[selected]\").length ) {\n				rbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n			}\n\n			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n			if ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n				rbuggyQSA.push(\"~=\");\n			}\n\n			// Webkit/Opera - :checked should return selected option elements\n			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n			// IE8 throws error here and will not see later tests\n			if ( !el.querySelectorAll(\":checked\").length ) {\n				rbuggyQSA.push(\":checked\");\n			}\n\n			// Support: Safari 8+, iOS 8+\n			// https://bugs.webkit.org/show_bug.cgi?id=136851\n			// In-page `selector#id sibling-combinator selector` fails\n			if ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n				rbuggyQSA.push(\".#.+[+~]\");\n			}\n		});\n\n		assert(function( el ) {\n			el.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n				\"<select disabled='disabled'><option/></select>\";\n\n			// Support: Windows 8 Native Apps\n			// The type and name attributes are restricted during .innerHTML assignment\n			var input = document.createElement(\"input\");\n			input.setAttribute( \"type\", \"hidden\" );\n			el.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n			// Support: IE8\n			// Enforce case-sensitivity of name attribute\n			if ( el.querySelectorAll(\"[name=d]\").length ) {\n				rbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n			}\n\n			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n			// IE8 throws error here and will not see later tests\n			if ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n				rbuggyQSA.push( \":enabled\", \":disabled\" );\n			}\n\n			// Support: IE9-11+\n			// IE's :disabled selector does not pick up the children of disabled fieldsets\n			docElem.appendChild( el ).disabled = true;\n			if ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n				rbuggyQSA.push( \":enabled\", \":disabled\" );\n			}\n\n			// Opera 10-11 does not throw on post-comma invalid pseudos\n			el.querySelectorAll(\"*,:x\");\n			rbuggyQSA.push(\",.*:\");\n		});\n	}\n\n	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n		docElem.webkitMatchesSelector ||\n		docElem.mozMatchesSelector ||\n		docElem.oMatchesSelector ||\n		docElem.msMatchesSelector) )) ) {\n\n		assert(function( el ) {\n			// Check to see if it's possible to do matchesSelector\n			// on a disconnected node (IE 9)\n			support.disconnectedMatch = matches.call( el, \"*\" );\n\n			// This should fail with an exception\n			// Gecko does not error, returns false instead\n			matches.call( el, \"[s!='']:x\" );\n			rbuggyMatches.push( \"!=\", pseudos );\n		});\n	}\n\n	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n	/* Contains\n	---------------------------------------------------------------------- */\n	hasCompare = rnative.test( docElem.compareDocumentPosition );\n\n	// Element contains another\n	// Purposefully self-exclusive\n	// As in, an element does not contain itself\n	contains = hasCompare || rnative.test( docElem.contains ) ?\n		function( a, b ) {\n			var adown = a.nodeType === 9 ? a.documentElement : a,\n				bup = b && b.parentNode;\n			return a === bup || !!( bup && bup.nodeType === 1 && (\n				adown.contains ?\n					adown.contains( bup ) :\n					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n			));\n		} :\n		function( a, b ) {\n			if ( b ) {\n				while ( (b = b.parentNode) ) {\n					if ( b === a ) {\n						return true;\n					}\n				}\n			}\n			return false;\n		};\n\n	/* Sorting\n	---------------------------------------------------------------------- */\n\n	// Document order sorting\n	sortOrder = hasCompare ?\n	function( a, b ) {\n\n		// Flag for duplicate removal\n		if ( a === b ) {\n			hasDuplicate = true;\n			return 0;\n		}\n\n		// Sort on method existence if only one input has compareDocumentPosition\n		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n		if ( compare ) {\n			return compare;\n		}\n\n		// Calculate position if both inputs belong to the same document\n		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n			a.compareDocumentPosition( b ) :\n\n			// Otherwise we know they are disconnected\n			1;\n\n		// Disconnected nodes\n		if ( compare & 1 ||\n			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n			// Choose the first element that is related to our preferred document\n			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n				return -1;\n			}\n			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n				return 1;\n			}\n\n			// Maintain original order\n			return sortInput ?\n				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n				0;\n		}\n\n		return compare & 4 ? -1 : 1;\n	} :\n	function( a, b ) {\n		// Exit early if the nodes are identical\n		if ( a === b ) {\n			hasDuplicate = true;\n			return 0;\n		}\n\n		var cur,\n			i = 0,\n			aup = a.parentNode,\n			bup = b.parentNode,\n			ap = [ a ],\n			bp = [ b ];\n\n		// Parentless nodes are either documents or disconnected\n		if ( !aup || !bup ) {\n			return a === document ? -1 :\n				b === document ? 1 :\n				aup ? -1 :\n				bup ? 1 :\n				sortInput ?\n				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n				0;\n\n		// If the nodes are siblings, we can do a quick check\n		} else if ( aup === bup ) {\n			return siblingCheck( a, b );\n		}\n\n		// Otherwise we need full lists of their ancestors for comparison\n		cur = a;\n		while ( (cur = cur.parentNode) ) {\n			ap.unshift( cur );\n		}\n		cur = b;\n		while ( (cur = cur.parentNode) ) {\n			bp.unshift( cur );\n		}\n\n		// Walk down the tree looking for a discrepancy\n		while ( ap[i] === bp[i] ) {\n			i++;\n		}\n\n		return i ?\n			// Do a sibling check if the nodes have a common ancestor\n			siblingCheck( ap[i], bp[i] ) :\n\n			// Otherwise nodes in our document sort first\n			ap[i] === preferredDoc ? -1 :\n			bp[i] === preferredDoc ? 1 :\n			0;\n	};\n\n	return document;\n};\n\nSizzle.matches = function( expr, elements ) {\n	return Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n	// Set document vars if needed\n	if ( ( elem.ownerDocument || elem ) !== document ) {\n		setDocument( elem );\n	}\n\n	// Make sure that attribute selectors are quoted\n	expr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n	if ( support.matchesSelector && documentIsHTML &&\n		!compilerCache[ expr + \" \" ] &&\n		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n		try {\n			var ret = matches.call( elem, expr );\n\n			// IE 9's matchesSelector returns false on disconnected nodes\n			if ( ret || support.disconnectedMatch ||\n					// As well, disconnected nodes are said to be in a document\n					// fragment in IE 9\n					elem.document && elem.document.nodeType !== 11 ) {\n				return ret;\n			}\n		} catch (e) {}\n	}\n\n	return Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n	// Set document vars if needed\n	if ( ( context.ownerDocument || context ) !== document ) {\n		setDocument( context );\n	}\n	return contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n	// Set document vars if needed\n	if ( ( elem.ownerDocument || elem ) !== document ) {\n		setDocument( elem );\n	}\n\n	var fn = Expr.attrHandle[ name.toLowerCase() ],\n		// Don't get fooled by Object.prototype properties (jQuery #13807)\n		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n			fn( elem, name, !documentIsHTML ) :\n			undefined;\n\n	return val !== undefined ?\n		val :\n		support.attributes || !documentIsHTML ?\n			elem.getAttribute( name ) :\n			(val = elem.getAttributeNode(name)) && val.specified ?\n				val.value :\n				null;\n};\n\nSizzle.escape = function( sel ) {\n	return (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n	throw new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n	var elem,\n		duplicates = [],\n		j = 0,\n		i = 0;\n\n	// Unless we *know* we can detect duplicates, assume their presence\n	hasDuplicate = !support.detectDuplicates;\n	sortInput = !support.sortStable && results.slice( 0 );\n	results.sort( sortOrder );\n\n	if ( hasDuplicate ) {\n		while ( (elem = results[i++]) ) {\n			if ( elem === results[ i ] ) {\n				j = duplicates.push( i );\n			}\n		}\n		while ( j-- ) {\n			results.splice( duplicates[ j ], 1 );\n		}\n	}\n\n	// Clear input after sorting to release objects\n	// See https://github.com/jquery/sizzle/pull/225\n	sortInput = null;\n\n	return results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n	var node,\n		ret = \"\",\n		i = 0,\n		nodeType = elem.nodeType;\n\n	if ( !nodeType ) {\n		// If no nodeType, this is expected to be an array\n		while ( (node = elem[i++]) ) {\n			// Do not traverse comment nodes\n			ret += getText( node );\n		}\n	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n		// Use textContent for elements\n		// innerText usage removed for consistency of new lines (jQuery #11153)\n		if ( typeof elem.textContent === \"string\" ) {\n			return elem.textContent;\n		} else {\n			// Traverse its children\n			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n				ret += getText( elem );\n			}\n		}\n	} else if ( nodeType === 3 || nodeType === 4 ) {\n		return elem.nodeValue;\n	}\n	// Do not include comment or processing instruction nodes\n\n	return ret;\n};\n\nExpr = Sizzle.selectors = {\n\n	// Can be adjusted by the user\n	cacheLength: 50,\n\n	createPseudo: markFunction,\n\n	match: matchExpr,\n\n	attrHandle: {},\n\n	find: {},\n\n	relative: {\n		\">\": { dir: \"parentNode\", first: true },\n		\" \": { dir: \"parentNode\" },\n		\"+\": { dir: \"previousSibling\", first: true },\n		\"~\": { dir: \"previousSibling\" }\n	},\n\n	preFilter: {\n		\"ATTR\": function( match ) {\n			match[1] = match[1].replace( runescape, funescape );\n\n			// Move the given value to match[3] whether quoted or unquoted\n			match[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n			if ( match[2] === \"~=\" ) {\n				match[3] = \" \" + match[3] + \" \";\n			}\n\n			return match.slice( 0, 4 );\n		},\n\n		\"CHILD\": function( match ) {\n			/* matches from matchExpr[\"CHILD\"]\n				1 type (only|nth|...)\n				2 what (child|of-type)\n				3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n				4 xn-component of xn+y argument ([+-]?\\d*n|)\n				5 sign of xn-component\n				6 x of xn-component\n				7 sign of y-component\n				8 y of y-component\n			*/\n			match[1] = match[1].toLowerCase();\n\n			if ( match[1].slice( 0, 3 ) === \"nth\" ) {\n				// nth-* requires argument\n				if ( !match[3] ) {\n					Sizzle.error( match[0] );\n				}\n\n				// numeric x and y parameters for Expr.filter.CHILD\n				// remember that false/true cast respectively to 0/1\n				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n				match[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n			// other types prohibit arguments\n			} else if ( match[3] ) {\n				Sizzle.error( match[0] );\n			}\n\n			return match;\n		},\n\n		\"PSEUDO\": function( match ) {\n			var excess,\n				unquoted = !match[6] && match[2];\n\n			if ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n				return null;\n			}\n\n			// Accept quoted arguments as-is\n			if ( match[3] ) {\n				match[2] = match[4] || match[5] || \"\";\n\n			// Strip excess characters from unquoted arguments\n			} else if ( unquoted && rpseudo.test( unquoted ) &&\n				// Get excess from tokenize (recursively)\n				(excess = tokenize( unquoted, true )) &&\n				// advance to the next closing parenthesis\n				(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n				// excess is a negative index\n				match[0] = match[0].slice( 0, excess );\n				match[2] = unquoted.slice( 0, excess );\n			}\n\n			// Return only captures needed by the pseudo filter method (type and argument)\n			return match.slice( 0, 3 );\n		}\n	},\n\n	filter: {\n\n		\"TAG\": function( nodeNameSelector ) {\n			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n			return nodeNameSelector === \"*\" ?\n				function() { return true; } :\n				function( elem ) {\n					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n				};\n		},\n\n		\"CLASS\": function( className ) {\n			var pattern = classCache[ className + \" \" ];\n\n			return pattern ||\n				(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n				classCache( className, function( elem ) {\n					return pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n				});\n		},\n\n		\"ATTR\": function( name, operator, check ) {\n			return function( elem ) {\n				var result = Sizzle.attr( elem, name );\n\n				if ( result == null ) {\n					return operator === \"!=\";\n				}\n				if ( !operator ) {\n					return true;\n				}\n\n				result += \"\";\n\n				return operator === \"=\" ? result === check :\n					operator === \"!=\" ? result !== check :\n					operator === \"^=\" ? check && result.indexOf( check ) === 0 :\n					operator === \"*=\" ? check && result.indexOf( check ) > -1 :\n					operator === \"$=\" ? check && result.slice( -check.length ) === check :\n					operator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n					operator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n					false;\n			};\n		},\n\n		\"CHILD\": function( type, what, argument, first, last ) {\n			var simple = type.slice( 0, 3 ) !== \"nth\",\n				forward = type.slice( -4 ) !== \"last\",\n				ofType = what === \"of-type\";\n\n			return first === 1 && last === 0 ?\n\n				// Shortcut for :nth-*(n)\n				function( elem ) {\n					return !!elem.parentNode;\n				} :\n\n				function( elem, context, xml ) {\n					var cache, uniqueCache, outerCache, node, nodeIndex, start,\n						dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n						parent = elem.parentNode,\n						name = ofType && elem.nodeName.toLowerCase(),\n						useCache = !xml && !ofType,\n						diff = false;\n\n					if ( parent ) {\n\n						// :(first|last|only)-(child|of-type)\n						if ( simple ) {\n							while ( dir ) {\n								node = elem;\n								while ( (node = node[ dir ]) ) {\n									if ( ofType ?\n										node.nodeName.toLowerCase() === name :\n										node.nodeType === 1 ) {\n\n										return false;\n									}\n								}\n								// Reverse direction for :only-* (if we haven't yet done so)\n								start = dir = type === \"only\" && !start && \"nextSibling\";\n							}\n							return true;\n						}\n\n						start = [ forward ? parent.firstChild : parent.lastChild ];\n\n						// non-xml :nth-child(...) stores cache data on `parent`\n						if ( forward && useCache ) {\n\n							// Seek `elem` from a previously-cached index\n\n							// ...in a gzip-friendly way\n							node = parent;\n							outerCache = node[ expando ] || (node[ expando ] = {});\n\n							// Support: IE <9 only\n							// Defend against cloned attroperties (jQuery gh-1709)\n							uniqueCache = outerCache[ node.uniqueID ] ||\n								(outerCache[ node.uniqueID ] = {});\n\n							cache = uniqueCache[ type ] || [];\n							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n							diff = nodeIndex && cache[ 2 ];\n							node = nodeIndex && parent.childNodes[ nodeIndex ];\n\n							while ( (node = ++nodeIndex && node && node[ dir ] ||\n\n								// Fallback to seeking `elem` from the start\n								(diff = nodeIndex = 0) || start.pop()) ) {\n\n								// When found, cache indexes on `parent` and break\n								if ( node.nodeType === 1 && ++diff && node === elem ) {\n									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n									break;\n								}\n							}\n\n						} else {\n							// Use previously-cached element index if available\n							if ( useCache ) {\n								// ...in a gzip-friendly way\n								node = elem;\n								outerCache = node[ expando ] || (node[ expando ] = {});\n\n								// Support: IE <9 only\n								// Defend against cloned attroperties (jQuery gh-1709)\n								uniqueCache = outerCache[ node.uniqueID ] ||\n									(outerCache[ node.uniqueID ] = {});\n\n								cache = uniqueCache[ type ] || [];\n								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n								diff = nodeIndex;\n							}\n\n							// xml :nth-child(...)\n							// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n							if ( diff === false ) {\n								// Use the same loop as above to seek `elem` from the start\n								while ( (node = ++nodeIndex && node && node[ dir ] ||\n									(diff = nodeIndex = 0) || start.pop()) ) {\n\n									if ( ( ofType ?\n										node.nodeName.toLowerCase() === name :\n										node.nodeType === 1 ) &&\n										++diff ) {\n\n										// Cache the index of each encountered element\n										if ( useCache ) {\n											outerCache = node[ expando ] || (node[ expando ] = {});\n\n											// Support: IE <9 only\n											// Defend against cloned attroperties (jQuery gh-1709)\n											uniqueCache = outerCache[ node.uniqueID ] ||\n												(outerCache[ node.uniqueID ] = {});\n\n											uniqueCache[ type ] = [ dirruns, diff ];\n										}\n\n										if ( node === elem ) {\n											break;\n										}\n									}\n								}\n							}\n						}\n\n						// Incorporate the offset, then check against cycle size\n						diff -= last;\n						return diff === first || ( diff % first === 0 && diff / first >= 0 );\n					}\n				};\n		},\n\n		\"PSEUDO\": function( pseudo, argument ) {\n			// pseudo-class names are case-insensitive\n			// http://www.w3.org/TR/selectors/#pseudo-classes\n			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n			// Remember that setFilters inherits from pseudos\n			var args,\n				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n					Sizzle.error( \"unsupported pseudo: \" + pseudo );\n\n			// The user may use createPseudo to indicate that\n			// arguments are needed to create the filter function\n			// just as Sizzle does\n			if ( fn[ expando ] ) {\n				return fn( argument );\n			}\n\n			// But maintain support for old signatures\n			if ( fn.length > 1 ) {\n				args = [ pseudo, pseudo, \"\", argument ];\n				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n					markFunction(function( seed, matches ) {\n						var idx,\n							matched = fn( seed, argument ),\n							i = matched.length;\n						while ( i-- ) {\n							idx = indexOf( seed, matched[i] );\n							seed[ idx ] = !( matches[ idx ] = matched[i] );\n						}\n					}) :\n					function( elem ) {\n						return fn( elem, 0, args );\n					};\n			}\n\n			return fn;\n		}\n	},\n\n	pseudos: {\n		// Potentially complex pseudos\n		\"not\": markFunction(function( selector ) {\n			// Trim the selector passed to compile\n			// to avoid treating leading and trailing\n			// spaces as combinators\n			var input = [],\n				results = [],\n				matcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n			return matcher[ expando ] ?\n				markFunction(function( seed, matches, context, xml ) {\n					var elem,\n						unmatched = matcher( seed, null, xml, [] ),\n						i = seed.length;\n\n					// Match elements unmatched by `matcher`\n					while ( i-- ) {\n						if ( (elem = unmatched[i]) ) {\n							seed[i] = !(matches[i] = elem);\n						}\n					}\n				}) :\n				function( elem, context, xml ) {\n					input[0] = elem;\n					matcher( input, null, xml, results );\n					// Don't keep the element (issue #299)\n					input[0] = null;\n					return !results.pop();\n				};\n		}),\n\n		\"has\": markFunction(function( selector ) {\n			return function( elem ) {\n				return Sizzle( selector, elem ).length > 0;\n			};\n		}),\n\n		\"contains\": markFunction(function( text ) {\n			text = text.replace( runescape, funescape );\n			return function( elem ) {\n				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n			};\n		}),\n\n		// \"Whether an element is represented by a :lang() selector\n		// is based solely on the element's language value\n		// being equal to the identifier C,\n		// or beginning with the identifier C immediately followed by \"-\".\n		// The matching of C against the element's language value is performed case-insensitively.\n		// The identifier C does not have to be a valid language name.\"\n		// http://www.w3.org/TR/selectors/#lang-pseudo\n		\"lang\": markFunction( function( lang ) {\n			// lang value must be a valid identifier\n			if ( !ridentifier.test(lang || \"\") ) {\n				Sizzle.error( \"unsupported lang: \" + lang );\n			}\n			lang = lang.replace( runescape, funescape ).toLowerCase();\n			return function( elem ) {\n				var elemLang;\n				do {\n					if ( (elemLang = documentIsHTML ?\n						elem.lang :\n						elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n						elemLang = elemLang.toLowerCase();\n						return elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n					}\n				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n				return false;\n			};\n		}),\n\n		// Miscellaneous\n		\"target\": function( elem ) {\n			var hash = window.location && window.location.hash;\n			return hash && hash.slice( 1 ) === elem.id;\n		},\n\n		\"root\": function( elem ) {\n			return elem === docElem;\n		},\n\n		\"focus\": function( elem ) {\n			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n		},\n\n		// Boolean properties\n		\"enabled\": createDisabledPseudo( false ),\n		\"disabled\": createDisabledPseudo( true ),\n\n		\"checked\": function( elem ) {\n			// In CSS3, :checked should return both checked and selected elements\n			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n			var nodeName = elem.nodeName.toLowerCase();\n			return (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n		},\n\n		\"selected\": function( elem ) {\n			// Accessing this property makes selected-by-default\n			// options in Safari work properly\n			if ( elem.parentNode ) {\n				elem.parentNode.selectedIndex;\n			}\n\n			return elem.selected === true;\n		},\n\n		// Contents\n		\"empty\": function( elem ) {\n			// http://www.w3.org/TR/selectors/#empty-pseudo\n			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n			//   but not by others (comment: 8; processing instruction: 7; etc.)\n			// nodeType < 6 works because attributes (2) do not appear as children\n			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n				if ( elem.nodeType < 6 ) {\n					return false;\n				}\n			}\n			return true;\n		},\n\n		\"parent\": function( elem ) {\n			return !Expr.pseudos[\"empty\"]( elem );\n		},\n\n		// Element/input types\n		\"header\": function( elem ) {\n			return rheader.test( elem.nodeName );\n		},\n\n		\"input\": function( elem ) {\n			return rinputs.test( elem.nodeName );\n		},\n\n		\"button\": function( elem ) {\n			var name = elem.nodeName.toLowerCase();\n			return name === \"input\" && elem.type === \"button\" || name === \"button\";\n		},\n\n		\"text\": function( elem ) {\n			var attr;\n			return elem.nodeName.toLowerCase() === \"input\" &&\n				elem.type === \"text\" &&\n\n				// Support: IE<8\n				// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n				( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n		},\n\n		// Position-in-collection\n		\"first\": createPositionalPseudo(function() {\n			return [ 0 ];\n		}),\n\n		\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n			return [ length - 1 ];\n		}),\n\n		\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n			return [ argument < 0 ? argument + length : argument ];\n		}),\n\n		\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n			var i = 0;\n			for ( ; i < length; i += 2 ) {\n				matchIndexes.push( i );\n			}\n			return matchIndexes;\n		}),\n\n		\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n			var i = 1;\n			for ( ; i < length; i += 2 ) {\n				matchIndexes.push( i );\n			}\n			return matchIndexes;\n		}),\n\n		\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n			var i = argument < 0 ? argument + length : argument;\n			for ( ; --i >= 0; ) {\n				matchIndexes.push( i );\n			}\n			return matchIndexes;\n		}),\n\n		\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n			var i = argument < 0 ? argument + length : argument;\n			for ( ; ++i < length; ) {\n				matchIndexes.push( i );\n			}\n			return matchIndexes;\n		})\n	}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n	Expr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n	Expr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n	var matched, match, tokens, type,\n		soFar, groups, preFilters,\n		cached = tokenCache[ selector + \" \" ];\n\n	if ( cached ) {\n		return parseOnly ? 0 : cached.slice( 0 );\n	}\n\n	soFar = selector;\n	groups = [];\n	preFilters = Expr.preFilter;\n\n	while ( soFar ) {\n\n		// Comma and first run\n		if ( !matched || (match = rcomma.exec( soFar )) ) {\n			if ( match ) {\n				// Don't consume trailing commas as valid\n				soFar = soFar.slice( match[0].length ) || soFar;\n			}\n			groups.push( (tokens = []) );\n		}\n\n		matched = false;\n\n		// Combinators\n		if ( (match = rcombinators.exec( soFar )) ) {\n			matched = match.shift();\n			tokens.push({\n				value: matched,\n				// Cast descendant combinators to space\n				type: match[0].replace( rtrim, \" \" )\n			});\n			soFar = soFar.slice( matched.length );\n		}\n\n		// Filters\n		for ( type in Expr.filter ) {\n			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n				(match = preFilters[ type ]( match ))) ) {\n				matched = match.shift();\n				tokens.push({\n					value: matched,\n					type: type,\n					matches: match\n				});\n				soFar = soFar.slice( matched.length );\n			}\n		}\n\n		if ( !matched ) {\n			break;\n		}\n	}\n\n	// Return the length of the invalid excess\n	// if we're just parsing\n	// Otherwise, throw an error or return tokens\n	return parseOnly ?\n		soFar.length :\n		soFar ?\n			Sizzle.error( selector ) :\n			// Cache the tokens\n			tokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n	var i = 0,\n		len = tokens.length,\n		selector = \"\";\n	for ( ; i < len; i++ ) {\n		selector += tokens[i].value;\n	}\n	return selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n	var dir = combinator.dir,\n		skip = combinator.next,\n		key = skip || dir,\n		checkNonElements = base && key === \"parentNode\",\n		doneName = done++;\n\n	return combinator.first ?\n		// Check against closest ancestor/preceding element\n		function( elem, context, xml ) {\n			while ( (elem = elem[ dir ]) ) {\n				if ( elem.nodeType === 1 || checkNonElements ) {\n					return matcher( elem, context, xml );\n				}\n			}\n			return false;\n		} :\n\n		// Check against all ancestor/preceding elements\n		function( elem, context, xml ) {\n			var oldCache, uniqueCache, outerCache,\n				newCache = [ dirruns, doneName ];\n\n			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n			if ( xml ) {\n				while ( (elem = elem[ dir ]) ) {\n					if ( elem.nodeType === 1 || checkNonElements ) {\n						if ( matcher( elem, context, xml ) ) {\n							return true;\n						}\n					}\n				}\n			} else {\n				while ( (elem = elem[ dir ]) ) {\n					if ( elem.nodeType === 1 || checkNonElements ) {\n						outerCache = elem[ expando ] || (elem[ expando ] = {});\n\n						// Support: IE <9 only\n						// Defend against cloned attroperties (jQuery gh-1709)\n						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n						if ( skip && skip === elem.nodeName.toLowerCase() ) {\n							elem = elem[ dir ] || elem;\n						} else if ( (oldCache = uniqueCache[ key ]) &&\n							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n							// Assign to newCache so results back-propagate to previous elements\n							return (newCache[ 2 ] = oldCache[ 2 ]);\n						} else {\n							// Reuse newcache so results back-propagate to previous elements\n							uniqueCache[ key ] = newCache;\n\n							// A match means we're done; a fail means we have to keep checking\n							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n								return true;\n							}\n						}\n					}\n				}\n			}\n			return false;\n		};\n}\n\nfunction elementMatcher( matchers ) {\n	return matchers.length > 1 ?\n		function( elem, context, xml ) {\n			var i = matchers.length;\n			while ( i-- ) {\n				if ( !matchers[i]( elem, context, xml ) ) {\n					return false;\n				}\n			}\n			return true;\n		} :\n		matchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n	var i = 0,\n		len = contexts.length;\n	for ( ; i < len; i++ ) {\n		Sizzle( selector, contexts[i], results );\n	}\n	return results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n	var elem,\n		newUnmatched = [],\n		i = 0,\n		len = unmatched.length,\n		mapped = map != null;\n\n	for ( ; i < len; i++ ) {\n		if ( (elem = unmatched[i]) ) {\n			if ( !filter || filter( elem, context, xml ) ) {\n				newUnmatched.push( elem );\n				if ( mapped ) {\n					map.push( i );\n				}\n			}\n		}\n	}\n\n	return newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n	if ( postFilter && !postFilter[ expando ] ) {\n		postFilter = setMatcher( postFilter );\n	}\n	if ( postFinder && !postFinder[ expando ] ) {\n		postFinder = setMatcher( postFinder, postSelector );\n	}\n	return markFunction(function( seed, results, context, xml ) {\n		var temp, i, elem,\n			preMap = [],\n			postMap = [],\n			preexisting = results.length,\n\n			// Get initial elements from seed or context\n			elems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n			// Prefilter to get matcher input, preserving a map for seed-results synchronization\n			matcherIn = preFilter && ( seed || !selector ) ?\n				condense( elems, preMap, preFilter, context, xml ) :\n				elems,\n\n			matcherOut = matcher ?\n				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n					// ...intermediate processing is necessary\n					[] :\n\n					// ...otherwise use results directly\n					results :\n				matcherIn;\n\n		// Find primary matches\n		if ( matcher ) {\n			matcher( matcherIn, matcherOut, context, xml );\n		}\n\n		// Apply postFilter\n		if ( postFilter ) {\n			temp = condense( matcherOut, postMap );\n			postFilter( temp, [], context, xml );\n\n			// Un-match failing elements by moving them back to matcherIn\n			i = temp.length;\n			while ( i-- ) {\n				if ( (elem = temp[i]) ) {\n					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n				}\n			}\n		}\n\n		if ( seed ) {\n			if ( postFinder || preFilter ) {\n				if ( postFinder ) {\n					// Get the final matcherOut by condensing this intermediate into postFinder contexts\n					temp = [];\n					i = matcherOut.length;\n					while ( i-- ) {\n						if ( (elem = matcherOut[i]) ) {\n							// Restore matcherIn since elem is not yet a final match\n							temp.push( (matcherIn[i] = elem) );\n						}\n					}\n					postFinder( null, (matcherOut = []), temp, xml );\n				}\n\n				// Move matched elements from seed to results to keep them synchronized\n				i = matcherOut.length;\n				while ( i-- ) {\n					if ( (elem = matcherOut[i]) &&\n						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n						seed[temp] = !(results[temp] = elem);\n					}\n				}\n			}\n\n		// Add elements to results, through postFinder if defined\n		} else {\n			matcherOut = condense(\n				matcherOut === results ?\n					matcherOut.splice( preexisting, matcherOut.length ) :\n					matcherOut\n			);\n			if ( postFinder ) {\n				postFinder( null, results, matcherOut, xml );\n			} else {\n				push.apply( results, matcherOut );\n			}\n		}\n	});\n}\n\nfunction matcherFromTokens( tokens ) {\n	var checkContext, matcher, j,\n		len = tokens.length,\n		leadingRelative = Expr.relative[ tokens[0].type ],\n		implicitRelative = leadingRelative || Expr.relative[\" \"],\n		i = leadingRelative ? 1 : 0,\n\n		// The foundational matcher ensures that elements are reachable from top-level context(s)\n		matchContext = addCombinator( function( elem ) {\n			return elem === checkContext;\n		}, implicitRelative, true ),\n		matchAnyContext = addCombinator( function( elem ) {\n			return indexOf( checkContext, elem ) > -1;\n		}, implicitRelative, true ),\n		matchers = [ function( elem, context, xml ) {\n			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n				(checkContext = context).nodeType ?\n					matchContext( elem, context, xml ) :\n					matchAnyContext( elem, context, xml ) );\n			// Avoid hanging onto element (issue #299)\n			checkContext = null;\n			return ret;\n		} ];\n\n	for ( ; i < len; i++ ) {\n		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n		} else {\n			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n			// Return special upon seeing a positional matcher\n			if ( matcher[ expando ] ) {\n				// Find the next relative operator (if any) for proper handling\n				j = ++i;\n				for ( ; j < len; j++ ) {\n					if ( Expr.relative[ tokens[j].type ] ) {\n						break;\n					}\n				}\n				return setMatcher(\n					i > 1 && elementMatcher( matchers ),\n					i > 1 && toSelector(\n						// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n					).replace( rtrim, \"$1\" ),\n					matcher,\n					i < j && matcherFromTokens( tokens.slice( i, j ) ),\n					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n					j < len && toSelector( tokens )\n				);\n			}\n			matchers.push( matcher );\n		}\n	}\n\n	return elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n	var bySet = setMatchers.length > 0,\n		byElement = elementMatchers.length > 0,\n		superMatcher = function( seed, context, xml, results, outermost ) {\n			var elem, j, matcher,\n				matchedCount = 0,\n				i = \"0\",\n				unmatched = seed && [],\n				setMatched = [],\n				contextBackup = outermostContext,\n				// We must always have either seed elements or outermost context\n				elems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n				// Use integer dirruns iff this is the outermost matcher\n				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n				len = elems.length;\n\n			if ( outermost ) {\n				outermostContext = context === document || context || outermost;\n			}\n\n			// Add elements passing elementMatchers directly to results\n			// Support: IE<9, Safari\n			// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n				if ( byElement && elem ) {\n					j = 0;\n					if ( !context && elem.ownerDocument !== document ) {\n						setDocument( elem );\n						xml = !documentIsHTML;\n					}\n					while ( (matcher = elementMatchers[j++]) ) {\n						if ( matcher( elem, context || document, xml) ) {\n							results.push( elem );\n							break;\n						}\n					}\n					if ( outermost ) {\n						dirruns = dirrunsUnique;\n					}\n				}\n\n				// Track unmatched elements for set filters\n				if ( bySet ) {\n					// They will have gone through all possible matchers\n					if ( (elem = !matcher && elem) ) {\n						matchedCount--;\n					}\n\n					// Lengthen the array for every element, matched or not\n					if ( seed ) {\n						unmatched.push( elem );\n					}\n				}\n			}\n\n			// `i` is now the count of elements visited above, and adding it to `matchedCount`\n			// makes the latter nonnegative.\n			matchedCount += i;\n\n			// Apply set filters to unmatched elements\n			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n			// no element matchers and no seed.\n			// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n			// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n			// numerically zero.\n			if ( bySet && i !== matchedCount ) {\n				j = 0;\n				while ( (matcher = setMatchers[j++]) ) {\n					matcher( unmatched, setMatched, context, xml );\n				}\n\n				if ( seed ) {\n					// Reintegrate element matches to eliminate the need for sorting\n					if ( matchedCount > 0 ) {\n						while ( i-- ) {\n							if ( !(unmatched[i] || setMatched[i]) ) {\n								setMatched[i] = pop.call( results );\n							}\n						}\n					}\n\n					// Discard index placeholder values to get only actual matches\n					setMatched = condense( setMatched );\n				}\n\n				// Add matches to results\n				push.apply( results, setMatched );\n\n				// Seedless set matches succeeding multiple successful matchers stipulate sorting\n				if ( outermost && !seed && setMatched.length > 0 &&\n					( matchedCount + setMatchers.length ) > 1 ) {\n\n					Sizzle.uniqueSort( results );\n				}\n			}\n\n			// Override manipulation of globals by nested matchers\n			if ( outermost ) {\n				dirruns = dirrunsUnique;\n				outermostContext = contextBackup;\n			}\n\n			return unmatched;\n		};\n\n	return bySet ?\n		markFunction( superMatcher ) :\n		superMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n	var i,\n		setMatchers = [],\n		elementMatchers = [],\n		cached = compilerCache[ selector + \" \" ];\n\n	if ( !cached ) {\n		// Generate a function of recursive functions that can be used to check each element\n		if ( !match ) {\n			match = tokenize( selector );\n		}\n		i = match.length;\n		while ( i-- ) {\n			cached = matcherFromTokens( match[i] );\n			if ( cached[ expando ] ) {\n				setMatchers.push( cached );\n			} else {\n				elementMatchers.push( cached );\n			}\n		}\n\n		// Cache the compiled function\n		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n		// Save selector and tokenization\n		cached.selector = selector;\n	}\n	return cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n	var i, tokens, token, type, find,\n		compiled = typeof selector === \"function\" && selector,\n		match = !seed && tokenize( (selector = compiled.selector || selector) );\n\n	results = results || [];\n\n	// Try to minimize operations if there is only one selector in the list and no seed\n	// (the latter of which guarantees us context)\n	if ( match.length === 1 ) {\n\n		// Reduce context if the leading compound selector is an ID\n		tokens = match[0] = match[0].slice( 0 );\n		if ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n			context = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n			if ( !context ) {\n				return results;\n\n			// Precompiled matchers will still verify ancestry, so step up a level\n			} else if ( compiled ) {\n				context = context.parentNode;\n			}\n\n			selector = selector.slice( tokens.shift().value.length );\n		}\n\n		// Fetch a seed set for right-to-left matching\n		i = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n		while ( i-- ) {\n			token = tokens[i];\n\n			// Abort if we hit a combinator\n			if ( Expr.relative[ (type = token.type) ] ) {\n				break;\n			}\n			if ( (find = Expr.find[ type ]) ) {\n				// Search, expanding context for leading sibling combinators\n				if ( (seed = find(\n					token.matches[0].replace( runescape, funescape ),\n					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n				)) ) {\n\n					// If seed is empty or no tokens remain, we can return early\n					tokens.splice( i, 1 );\n					selector = seed.length && toSelector( tokens );\n					if ( !selector ) {\n						push.apply( results, seed );\n						return results;\n					}\n\n					break;\n				}\n			}\n		}\n	}\n\n	// Compile and execute a filtering function if one is not provided\n	// Provide `match` to avoid retokenization if we modified the selector above\n	( compiled || compile( selector, match ) )(\n		seed,\n		context,\n		!documentIsHTML,\n		results,\n		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n	);\n	return results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n	// Should return 1, but returns 4 (following)\n	return el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n	el.innerHTML = \"<a href='#'></a>\";\n	return el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n	addHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n		if ( !isXML ) {\n			return elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n		}\n	});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n	el.innerHTML = \"<input/>\";\n	el.firstChild.setAttribute( \"value\", \"\" );\n	return el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n	addHandle( \"value\", function( elem, name, isXML ) {\n		if ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n			return elem.defaultValue;\n		}\n	});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n	return el.getAttribute(\"disabled\") == null;\n}) ) {\n	addHandle( booleans, function( elem, name, isXML ) {\n		var val;\n		if ( !isXML ) {\n			return elem[ name ] === true ? name.toLowerCase() :\n					(val = elem.getAttributeNode( name )) && val.specified ?\n					val.value :\n				null;\n		}\n	});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n	var matched = [],\n		truncate = until !== undefined;\n\n	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n		if ( elem.nodeType === 1 ) {\n			if ( truncate && jQuery( elem ).is( until ) ) {\n				break;\n			}\n			matched.push( elem );\n		}\n	}\n	return matched;\n};\n\n\nvar siblings = function( n, elem ) {\n	var matched = [];\n\n	for ( ; n; n = n.nextSibling ) {\n		if ( n.nodeType === 1 && n !== elem ) {\n			matched.push( n );\n		}\n	}\n\n	return matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n	if ( jQuery.isFunction( qualifier ) ) {\n		return jQuery.grep( elements, function( elem, i ) {\n			return !!qualifier.call( elem, i, elem ) !== not;\n		} );\n	}\n\n	// Single element\n	if ( qualifier.nodeType ) {\n		return jQuery.grep( elements, function( elem ) {\n			return ( elem === qualifier ) !== not;\n		} );\n	}\n\n	// Arraylike of elements (jQuery, arguments, Array)\n	if ( typeof qualifier !== \"string\" ) {\n		return jQuery.grep( elements, function( elem ) {\n			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n		} );\n	}\n\n	// Simple selector that can be filtered directly, removing non-Elements\n	if ( risSimple.test( qualifier ) ) {\n		return jQuery.filter( qualifier, elements, not );\n	}\n\n	// Complex selector, compare the two sets, removing non-Elements\n	qualifier = jQuery.filter( qualifier, elements );\n	return jQuery.grep( elements, function( elem ) {\n		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;\n	} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n	var elem = elems[ 0 ];\n\n	if ( not ) {\n		expr = \":not(\" + expr + \")\";\n	}\n\n	if ( elems.length === 1 && elem.nodeType === 1 ) {\n		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n	}\n\n	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n		return elem.nodeType === 1;\n	} ) );\n};\n\njQuery.fn.extend( {\n	find: function( selector ) {\n		var i, ret,\n			len = this.length,\n			self = this;\n\n		if ( typeof selector !== \"string\" ) {\n			return this.pushStack( jQuery( selector ).filter( function() {\n				for ( i = 0; i < len; i++ ) {\n					if ( jQuery.contains( self[ i ], this ) ) {\n						return true;\n					}\n				}\n			} ) );\n		}\n\n		ret = this.pushStack( [] );\n\n		for ( i = 0; i < len; i++ ) {\n			jQuery.find( selector, self[ i ], ret );\n		}\n\n		return len > 1 ? jQuery.uniqueSort( ret ) : ret;\n	},\n	filter: function( selector ) {\n		return this.pushStack( winnow( this, selector || [], false ) );\n	},\n	not: function( selector ) {\n		return this.pushStack( winnow( this, selector || [], true ) );\n	},\n	is: function( selector ) {\n		return !!winnow(\n			this,\n\n			// If this is a positional/relative selector, check membership in the returned set\n			// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n			typeof selector === \"string\" && rneedsContext.test( selector ) ?\n				jQuery( selector ) :\n				selector || [],\n			false\n		).length;\n	}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n	// A simple way to check for HTML strings\n	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n	// Strict HTML recognition (#11290: must start with <)\n	// Shortcut simple #id case for speed\n	rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n	init = jQuery.fn.init = function( selector, context, root ) {\n		var match, elem;\n\n		// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n		if ( !selector ) {\n			return this;\n		}\n\n		// Method init() accepts an alternate rootjQuery\n		// so migrate can support jQuery.sub (gh-2101)\n		root = root || rootjQuery;\n\n		// Handle HTML strings\n		if ( typeof selector === \"string\" ) {\n			if ( selector[ 0 ] === \"<\" &&\n				selector[ selector.length - 1 ] === \">\" &&\n				selector.length >= 3 ) {\n\n				// Assume that strings that start and end with <> are HTML and skip the regex check\n				match = [ null, selector, null ];\n\n			} else {\n				match = rquickExpr.exec( selector );\n			}\n\n			// Match html or make sure no context is specified for #id\n			if ( match && ( match[ 1 ] || !context ) ) {\n\n				// HANDLE: $(html) -> $(array)\n				if ( match[ 1 ] ) {\n					context = context instanceof jQuery ? context[ 0 ] : context;\n\n					// Option to run scripts is true for back-compat\n					// Intentionally let the error be thrown if parseHTML is not present\n					jQuery.merge( this, jQuery.parseHTML(\n						match[ 1 ],\n						context && context.nodeType ? context.ownerDocument || context : document,\n						true\n					) );\n\n					// HANDLE: $(html, props)\n					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n						for ( match in context ) {\n\n							// Properties of context are called as methods if possible\n							if ( jQuery.isFunction( this[ match ] ) ) {\n								this[ match ]( context[ match ] );\n\n							// ...and otherwise set as attributes\n							} else {\n								this.attr( match, context[ match ] );\n							}\n						}\n					}\n\n					return this;\n\n				// HANDLE: $(#id)\n				} else {\n					elem = document.getElementById( match[ 2 ] );\n\n					if ( elem ) {\n\n						// Inject the element directly into the jQuery object\n						this[ 0 ] = elem;\n						this.length = 1;\n					}\n					return this;\n				}\n\n			// HANDLE: $(expr, $(...))\n			} else if ( !context || context.jquery ) {\n				return ( context || root ).find( selector );\n\n			// HANDLE: $(expr, context)\n			// (which is just equivalent to: $(context).find(expr)\n			} else {\n				return this.constructor( context ).find( selector );\n			}\n\n		// HANDLE: $(DOMElement)\n		} else if ( selector.nodeType ) {\n			this[ 0 ] = selector;\n			this.length = 1;\n			return this;\n\n		// HANDLE: $(function)\n		// Shortcut for document ready\n		} else if ( jQuery.isFunction( selector ) ) {\n			return root.ready !== undefined ?\n				root.ready( selector ) :\n\n				// Execute immediately if ready is not present\n				selector( jQuery );\n		}\n\n		return jQuery.makeArray( selector, this );\n	};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n	// Methods guaranteed to produce a unique set when starting from a unique set\n	guaranteedUnique = {\n		children: true,\n		contents: true,\n		next: true,\n		prev: true\n	};\n\njQuery.fn.extend( {\n	has: function( target ) {\n		var targets = jQuery( target, this ),\n			l = targets.length;\n\n		return this.filter( function() {\n			var i = 0;\n			for ( ; i < l; i++ ) {\n				if ( jQuery.contains( this, targets[ i ] ) ) {\n					return true;\n				}\n			}\n		} );\n	},\n\n	closest: function( selectors, context ) {\n		var cur,\n			i = 0,\n			l = this.length,\n			matched = [],\n			targets = typeof selectors !== \"string\" && jQuery( selectors );\n\n		// Positional selectors never match, since there's no _selection_ context\n		if ( !rneedsContext.test( selectors ) ) {\n			for ( ; i < l; i++ ) {\n				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n					// Always skip document fragments\n					if ( cur.nodeType < 11 && ( targets ?\n						targets.index( cur ) > -1 :\n\n						// Don't pass non-elements to Sizzle\n						cur.nodeType === 1 &&\n							jQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n						matched.push( cur );\n						break;\n					}\n				}\n			}\n		}\n\n		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n	},\n\n	// Determine the position of an element within the set\n	index: function( elem ) {\n\n		// No argument, return index in parent\n		if ( !elem ) {\n			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n		}\n\n		// Index in selector\n		if ( typeof elem === \"string\" ) {\n			return indexOf.call( jQuery( elem ), this[ 0 ] );\n		}\n\n		// Locate the position of the desired element\n		return indexOf.call( this,\n\n			// If it receives a jQuery object, the first element is used\n			elem.jquery ? elem[ 0 ] : elem\n		);\n	},\n\n	add: function( selector, context ) {\n		return this.pushStack(\n			jQuery.uniqueSort(\n				jQuery.merge( this.get(), jQuery( selector, context ) )\n			)\n		);\n	},\n\n	addBack: function( selector ) {\n		return this.add( selector == null ?\n			this.prevObject : this.prevObject.filter( selector )\n		);\n	}\n} );\n\nfunction sibling( cur, dir ) {\n	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n	return cur;\n}\n\njQuery.each( {\n	parent: function( elem ) {\n		var parent = elem.parentNode;\n		return parent && parent.nodeType !== 11 ? parent : null;\n	},\n	parents: function( elem ) {\n		return dir( elem, \"parentNode\" );\n	},\n	parentsUntil: function( elem, i, until ) {\n		return dir( elem, \"parentNode\", until );\n	},\n	next: function( elem ) {\n		return sibling( elem, \"nextSibling\" );\n	},\n	prev: function( elem ) {\n		return sibling( elem, \"previousSibling\" );\n	},\n	nextAll: function( elem ) {\n		return dir( elem, \"nextSibling\" );\n	},\n	prevAll: function( elem ) {\n		return dir( elem, \"previousSibling\" );\n	},\n	nextUntil: function( elem, i, until ) {\n		return dir( elem, \"nextSibling\", until );\n	},\n	prevUntil: function( elem, i, until ) {\n		return dir( elem, \"previousSibling\", until );\n	},\n	siblings: function( elem ) {\n		return siblings( ( elem.parentNode || {} ).firstChild, elem );\n	},\n	children: function( elem ) {\n		return siblings( elem.firstChild );\n	},\n	contents: function( elem ) {\n        if ( nodeName( elem, \"iframe\" ) ) {\n            return elem.contentDocument;\n        }\n\n        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n        // Treat the template element as a regular one in browsers that\n        // don't support it.\n        if ( nodeName( elem, \"template\" ) ) {\n            elem = elem.content || elem;\n        }\n\n        return jQuery.merge( [], elem.childNodes );\n	}\n}, function( name, fn ) {\n	jQuery.fn[ name ] = function( until, selector ) {\n		var matched = jQuery.map( this, fn, until );\n\n		if ( name.slice( -5 ) !== \"Until\" ) {\n			selector = until;\n		}\n\n		if ( selector && typeof selector === \"string\" ) {\n			matched = jQuery.filter( selector, matched );\n		}\n\n		if ( this.length > 1 ) {\n\n			// Remove duplicates\n			if ( !guaranteedUnique[ name ] ) {\n				jQuery.uniqueSort( matched );\n			}\n\n			// Reverse order for parents* and prev-derivatives\n			if ( rparentsprev.test( name ) ) {\n				matched.reverse();\n			}\n		}\n\n		return this.pushStack( matched );\n	};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n	var object = {};\n	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n		object[ flag ] = true;\n	} );\n	return object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *	options: an optional list of space-separated options that will change how\n *			the callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *	once:			will ensure the callback list can only be fired once (like a Deferred)\n *\n *	memory:			will keep track of previous values and will call any callback added\n *					after the list has been fired right away with the latest \"memorized\"\n *					values (like a Deferred)\n *\n *	unique:			will ensure a callback can only be added once (no duplicate in the list)\n *\n *	stopOnFalse:	interrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n	// Convert options from String-formatted to Object-formatted if needed\n	// (we check in cache first)\n	options = typeof options === \"string\" ?\n		createOptions( options ) :\n		jQuery.extend( {}, options );\n\n	var // Flag to know if list is currently firing\n		firing,\n\n		// Last fire value for non-forgettable lists\n		memory,\n\n		// Flag to know if list was already fired\n		fired,\n\n		// Flag to prevent firing\n		locked,\n\n		// Actual callback list\n		list = [],\n\n		// Queue of execution data for repeatable lists\n		queue = [],\n\n		// Index of currently firing callback (modified by add/remove as needed)\n		firingIndex = -1,\n\n		// Fire callbacks\n		fire = function() {\n\n			// Enforce single-firing\n			locked = locked || options.once;\n\n			// Execute callbacks for all pending executions,\n			// respecting firingIndex overrides and runtime changes\n			fired = firing = true;\n			for ( ; queue.length; firingIndex = -1 ) {\n				memory = queue.shift();\n				while ( ++firingIndex < list.length ) {\n\n					// Run callback and check for early termination\n					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n						options.stopOnFalse ) {\n\n						// Jump to end and forget the data so .add doesn't re-fire\n						firingIndex = list.length;\n						memory = false;\n					}\n				}\n			}\n\n			// Forget the data if we're done with it\n			if ( !options.memory ) {\n				memory = false;\n			}\n\n			firing = false;\n\n			// Clean up if we're done firing for good\n			if ( locked ) {\n\n				// Keep an empty list if we have data for future add calls\n				if ( memory ) {\n					list = [];\n\n				// Otherwise, this object is spent\n				} else {\n					list = \"\";\n				}\n			}\n		},\n\n		// Actual Callbacks object\n		self = {\n\n			// Add a callback or a collection of callbacks to the list\n			add: function() {\n				if ( list ) {\n\n					// If we have memory from a past run, we should fire after adding\n					if ( memory && !firing ) {\n						firingIndex = list.length - 1;\n						queue.push( memory );\n					}\n\n					( function add( args ) {\n						jQuery.each( args, function( _, arg ) {\n							if ( jQuery.isFunction( arg ) ) {\n								if ( !options.unique || !self.has( arg ) ) {\n									list.push( arg );\n								}\n							} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\n\n								// Inspect recursively\n								add( arg );\n							}\n						} );\n					} )( arguments );\n\n					if ( memory && !firing ) {\n						fire();\n					}\n				}\n				return this;\n			},\n\n			// Remove a callback from the list\n			remove: function() {\n				jQuery.each( arguments, function( _, arg ) {\n					var index;\n					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n						list.splice( index, 1 );\n\n						// Handle firing indexes\n						if ( index <= firingIndex ) {\n							firingIndex--;\n						}\n					}\n				} );\n				return this;\n			},\n\n			// Check if a given callback is in the list.\n			// If no argument is given, return whether or not list has callbacks attached.\n			has: function( fn ) {\n				return fn ?\n					jQuery.inArray( fn, list ) > -1 :\n					list.length > 0;\n			},\n\n			// Remove all callbacks from the list\n			empty: function() {\n				if ( list ) {\n					list = [];\n				}\n				return this;\n			},\n\n			// Disable .fire and .add\n			// Abort any current/pending executions\n			// Clear all callbacks and values\n			disable: function() {\n				locked = queue = [];\n				list = memory = \"\";\n				return this;\n			},\n			disabled: function() {\n				return !list;\n			},\n\n			// Disable .fire\n			// Also disable .add unless we have memory (since it would have no effect)\n			// Abort any pending executions\n			lock: function() {\n				locked = queue = [];\n				if ( !memory && !firing ) {\n					list = memory = \"\";\n				}\n				return this;\n			},\n			locked: function() {\n				return !!locked;\n			},\n\n			// Call all callbacks with the given context and arguments\n			fireWith: function( context, args ) {\n				if ( !locked ) {\n					args = args || [];\n					args = [ context, args.slice ? args.slice() : args ];\n					queue.push( args );\n					if ( !firing ) {\n						fire();\n					}\n				}\n				return this;\n			},\n\n			// Call all the callbacks with the given arguments\n			fire: function() {\n				self.fireWith( this, arguments );\n				return this;\n			},\n\n			// To know if the callbacks have already been called at least once\n			fired: function() {\n				return !!fired;\n			}\n		};\n\n	return self;\n};\n\n\nfunction Identity( v ) {\n	return v;\n}\nfunction Thrower( ex ) {\n	throw ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n	var method;\n\n	try {\n\n		// Check for promise aspect first to privilege synchronous behavior\n		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {\n			method.call( value ).done( resolve ).fail( reject );\n\n		// Other thenables\n		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {\n			method.call( value, resolve, reject );\n\n		// Other non-thenables\n		} else {\n\n			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n			// * false: [ value ].slice( 0 ) => resolve( value )\n			// * true: [ value ].slice( 1 ) => resolve()\n			resolve.apply( undefined, [ value ].slice( noValue ) );\n		}\n\n	// For Promises/A+, convert exceptions into rejections\n	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n	// Deferred#then to conditionally suppress rejection.\n	} catch ( value ) {\n\n		// Support: Android 4.0 only\n		// Strict mode functions invoked without .call/.apply get global-object context\n		reject.apply( undefined, [ value ] );\n	}\n}\n\njQuery.extend( {\n\n	Deferred: function( func ) {\n		var tuples = [\n\n				// action, add listener, callbacks,\n				// ... .then handlers, argument index, [final state]\n				[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n					jQuery.Callbacks( \"memory\" ), 2 ],\n				[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n					jQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n				[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n					jQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n			],\n			state = \"pending\",\n			promise = {\n				state: function() {\n					return state;\n				},\n				always: function() {\n					deferred.done( arguments ).fail( arguments );\n					return this;\n				},\n				\"catch\": function( fn ) {\n					return promise.then( null, fn );\n				},\n\n				// Keep pipe for back-compat\n				pipe: function( /* fnDone, fnFail, fnProgress */ ) {\n					var fns = arguments;\n\n					return jQuery.Deferred( function( newDefer ) {\n						jQuery.each( tuples, function( i, tuple ) {\n\n							// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n							// deferred.progress(function() { bind to newDefer or newDefer.notify })\n							// deferred.done(function() { bind to newDefer or newDefer.resolve })\n							// deferred.fail(function() { bind to newDefer or newDefer.reject })\n							deferred[ tuple[ 1 ] ]( function() {\n								var returned = fn && fn.apply( this, arguments );\n								if ( returned && jQuery.isFunction( returned.promise ) ) {\n									returned.promise()\n										.progress( newDefer.notify )\n										.done( newDefer.resolve )\n										.fail( newDefer.reject );\n								} else {\n									newDefer[ tuple[ 0 ] + \"With\" ](\n										this,\n										fn ? [ returned ] : arguments\n									);\n								}\n							} );\n						} );\n						fns = null;\n					} ).promise();\n				},\n				then: function( onFulfilled, onRejected, onProgress ) {\n					var maxDepth = 0;\n					function resolve( depth, deferred, handler, special ) {\n						return function() {\n							var that = this,\n								args = arguments,\n								mightThrow = function() {\n									var returned, then;\n\n									// Support: Promises/A+ section 2.3.3.3.3\n									// https://promisesaplus.com/#point-59\n									// Ignore double-resolution attempts\n									if ( depth < maxDepth ) {\n										return;\n									}\n\n									returned = handler.apply( that, args );\n\n									// Support: Promises/A+ section 2.3.1\n									// https://promisesaplus.com/#point-48\n									if ( returned === deferred.promise() ) {\n										throw new TypeError( \"Thenable self-resolution\" );\n									}\n\n									// Support: Promises/A+ sections 2.3.3.1, 3.5\n									// https://promisesaplus.com/#point-54\n									// https://promisesaplus.com/#point-75\n									// Retrieve `then` only once\n									then = returned &&\n\n										// Support: Promises/A+ section 2.3.4\n										// https://promisesaplus.com/#point-64\n										// Only check objects and functions for thenability\n										( typeof returned === \"object\" ||\n											typeof returned === \"function\" ) &&\n										returned.then;\n\n									// Handle a returned thenable\n									if ( jQuery.isFunction( then ) ) {\n\n										// Special processors (notify) just wait for resolution\n										if ( special ) {\n											then.call(\n												returned,\n												resolve( maxDepth, deferred, Identity, special ),\n												resolve( maxDepth, deferred, Thrower, special )\n											);\n\n										// Normal processors (resolve) also hook into progress\n										} else {\n\n											// ...and disregard older resolution values\n											maxDepth++;\n\n											then.call(\n												returned,\n												resolve( maxDepth, deferred, Identity, special ),\n												resolve( maxDepth, deferred, Thrower, special ),\n												resolve( maxDepth, deferred, Identity,\n													deferred.notifyWith )\n											);\n										}\n\n									// Handle all other returned values\n									} else {\n\n										// Only substitute handlers pass on context\n										// and multiple values (non-spec behavior)\n										if ( handler !== Identity ) {\n											that = undefined;\n											args = [ returned ];\n										}\n\n										// Process the value(s)\n										// Default process is resolve\n										( special || deferred.resolveWith )( that, args );\n									}\n								},\n\n								// Only normal processors (resolve) catch and reject exceptions\n								process = special ?\n									mightThrow :\n									function() {\n										try {\n											mightThrow();\n										} catch ( e ) {\n\n											if ( jQuery.Deferred.exceptionHook ) {\n												jQuery.Deferred.exceptionHook( e,\n													process.stackTrace );\n											}\n\n											// Support: Promises/A+ section 2.3.3.3.4.1\n											// https://promisesaplus.com/#point-61\n											// Ignore post-resolution exceptions\n											if ( depth + 1 >= maxDepth ) {\n\n												// Only substitute handlers pass on context\n												// and multiple values (non-spec behavior)\n												if ( handler !== Thrower ) {\n													that = undefined;\n													args = [ e ];\n												}\n\n												deferred.rejectWith( that, args );\n											}\n										}\n									};\n\n							// Support: Promises/A+ section 2.3.3.3.1\n							// https://promisesaplus.com/#point-57\n							// Re-resolve promises immediately to dodge false rejection from\n							// subsequent errors\n							if ( depth ) {\n								process();\n							} else {\n\n								// Call an optional hook to record the stack, in case of exception\n								// since it's otherwise lost when execution goes async\n								if ( jQuery.Deferred.getStackHook ) {\n									process.stackTrace = jQuery.Deferred.getStackHook();\n								}\n								window.setTimeout( process );\n							}\n						};\n					}\n\n					return jQuery.Deferred( function( newDefer ) {\n\n						// progress_handlers.add( ... )\n						tuples[ 0 ][ 3 ].add(\n							resolve(\n								0,\n								newDefer,\n								jQuery.isFunction( onProgress ) ?\n									onProgress :\n									Identity,\n								newDefer.notifyWith\n							)\n						);\n\n						// fulfilled_handlers.add( ... )\n						tuples[ 1 ][ 3 ].add(\n							resolve(\n								0,\n								newDefer,\n								jQuery.isFunction( onFulfilled ) ?\n									onFulfilled :\n									Identity\n							)\n						);\n\n						// rejected_handlers.add( ... )\n						tuples[ 2 ][ 3 ].add(\n							resolve(\n								0,\n								newDefer,\n								jQuery.isFunction( onRejected ) ?\n									onRejected :\n									Thrower\n							)\n						);\n					} ).promise();\n				},\n\n				// Get a promise for this deferred\n				// If obj is provided, the promise aspect is added to the object\n				promise: function( obj ) {\n					return obj != null ? jQuery.extend( obj, promise ) : promise;\n				}\n			},\n			deferred = {};\n\n		// Add list-specific methods\n		jQuery.each( tuples, function( i, tuple ) {\n			var list = tuple[ 2 ],\n				stateString = tuple[ 5 ];\n\n			// promise.progress = list.add\n			// promise.done = list.add\n			// promise.fail = list.add\n			promise[ tuple[ 1 ] ] = list.add;\n\n			// Handle state\n			if ( stateString ) {\n				list.add(\n					function() {\n\n						// state = \"resolved\" (i.e., fulfilled)\n						// state = \"rejected\"\n						state = stateString;\n					},\n\n					// rejected_callbacks.disable\n					// fulfilled_callbacks.disable\n					tuples[ 3 - i ][ 2 ].disable,\n\n					// progress_callbacks.lock\n					tuples[ 0 ][ 2 ].lock\n				);\n			}\n\n			// progress_handlers.fire\n			// fulfilled_handlers.fire\n			// rejected_handlers.fire\n			list.add( tuple[ 3 ].fire );\n\n			// deferred.notify = function() { deferred.notifyWith(...) }\n			// deferred.resolve = function() { deferred.resolveWith(...) }\n			// deferred.reject = function() { deferred.rejectWith(...) }\n			deferred[ tuple[ 0 ] ] = function() {\n				deferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n				return this;\n			};\n\n			// deferred.notifyWith = list.fireWith\n			// deferred.resolveWith = list.fireWith\n			// deferred.rejectWith = list.fireWith\n			deferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n		} );\n\n		// Make the deferred a promise\n		promise.promise( deferred );\n\n		// Call given func if any\n		if ( func ) {\n			func.call( deferred, deferred );\n		}\n\n		// All done!\n		return deferred;\n	},\n\n	// Deferred helper\n	when: function( singleValue ) {\n		var\n\n			// count of uncompleted subordinates\n			remaining = arguments.length,\n\n			// count of unprocessed arguments\n			i = remaining,\n\n			// subordinate fulfillment data\n			resolveContexts = Array( i ),\n			resolveValues = slice.call( arguments ),\n\n			// the master Deferred\n			master = jQuery.Deferred(),\n\n			// subordinate callback factory\n			updateFunc = function( i ) {\n				return function( value ) {\n					resolveContexts[ i ] = this;\n					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n					if ( !( --remaining ) ) {\n						master.resolveWith( resolveContexts, resolveValues );\n					}\n				};\n			};\n\n		// Single- and empty arguments are adopted like Promise.resolve\n		if ( remaining <= 1 ) {\n			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n				!remaining );\n\n			// Use .then() to unwrap secondary thenables (cf. gh-3000)\n			if ( master.state() === \"pending\" ||\n				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n				return master.then();\n			}\n		}\n\n		// Multiple arguments are aggregated like Promise.all array elements\n		while ( i-- ) {\n			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n		}\n\n		return master.promise();\n	}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n	// Support: IE 8 - 9 only\n	// Console exists when dev tools are open, which can happen at any time\n	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n		window.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n	}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n	window.setTimeout( function() {\n		throw error;\n	} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n	readyList\n		.then( fn )\n\n		// Wrap jQuery.readyException in a function so that the lookup\n		// happens at the time of error handling instead of callback\n		// registration.\n		.catch( function( error ) {\n			jQuery.readyException( error );\n		} );\n\n	return this;\n};\n\njQuery.extend( {\n\n	// Is the DOM ready to be used? Set to true once it occurs.\n	isReady: false,\n\n	// A counter to track how many items to wait for before\n	// the ready event fires. See #6781\n	readyWait: 1,\n\n	// Handle when the DOM is ready\n	ready: function( wait ) {\n\n		// Abort if there are pending holds or we're already ready\n		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n			return;\n		}\n\n		// Remember that the DOM is ready\n		jQuery.isReady = true;\n\n		// If a normal DOM Ready event fired, decrement, and wait if need be\n		if ( wait !== true && --jQuery.readyWait > 0 ) {\n			return;\n		}\n\n		// If there are functions bound, to execute\n		readyList.resolveWith( document, [ jQuery ] );\n	}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n	document.removeEventListener( \"DOMContentLoaded\", completed );\n	window.removeEventListener( \"load\", completed );\n	jQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n	( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n	// Handle it asynchronously to allow scripts the opportunity to delay ready\n	window.setTimeout( jQuery.ready );\n\n} else {\n\n	// Use the handy event callback\n	document.addEventListener( \"DOMContentLoaded\", completed );\n\n	// A fallback to window.onload, that will always work\n	window.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n	var i = 0,\n		len = elems.length,\n		bulk = key == null;\n\n	// Sets many values\n	if ( jQuery.type( key ) === \"object\" ) {\n		chainable = true;\n		for ( i in key ) {\n			access( elems, fn, i, key[ i ], true, emptyGet, raw );\n		}\n\n	// Sets one value\n	} else if ( value !== undefined ) {\n		chainable = true;\n\n		if ( !jQuery.isFunction( value ) ) {\n			raw = true;\n		}\n\n		if ( bulk ) {\n\n			// Bulk operations run against the entire set\n			if ( raw ) {\n				fn.call( elems, value );\n				fn = null;\n\n			// ...except when executing function values\n			} else {\n				bulk = fn;\n				fn = function( elem, key, value ) {\n					return bulk.call( jQuery( elem ), value );\n				};\n			}\n		}\n\n		if ( fn ) {\n			for ( ; i < len; i++ ) {\n				fn(\n					elems[ i ], key, raw ?\n					value :\n					value.call( elems[ i ], i, fn( elems[ i ], key ) )\n				);\n			}\n		}\n	}\n\n	if ( chainable ) {\n		return elems;\n	}\n\n	// Gets\n	if ( bulk ) {\n		return fn.call( elems );\n	}\n\n	return len ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n	// Accepts only:\n	//  - Node\n	//    - Node.ELEMENT_NODE\n	//    - Node.DOCUMENT_NODE\n	//  - Object\n	//    - Any\n	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n	this.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n	cache: function( owner ) {\n\n		// Check if the owner object already has a cache\n		var value = owner[ this.expando ];\n\n		// If not, create one\n		if ( !value ) {\n			value = {};\n\n			// We can accept data for non-element nodes in modern browsers,\n			// but we should not, see #8335.\n			// Always return an empty object.\n			if ( acceptData( owner ) ) {\n\n				// If it is a node unlikely to be stringify-ed or looped over\n				// use plain assignment\n				if ( owner.nodeType ) {\n					owner[ this.expando ] = value;\n\n				// Otherwise secure it in a non-enumerable property\n				// configurable must be true to allow the property to be\n				// deleted when data is removed\n				} else {\n					Object.defineProperty( owner, this.expando, {\n						value: value,\n						configurable: true\n					} );\n				}\n			}\n		}\n\n		return value;\n	},\n	set: function( owner, data, value ) {\n		var prop,\n			cache = this.cache( owner );\n\n		// Handle: [ owner, key, value ] args\n		// Always use camelCase key (gh-2257)\n		if ( typeof data === \"string\" ) {\n			cache[ jQuery.camelCase( data ) ] = value;\n\n		// Handle: [ owner, { properties } ] args\n		} else {\n\n			// Copy the properties one-by-one to the cache object\n			for ( prop in data ) {\n				cache[ jQuery.camelCase( prop ) ] = data[ prop ];\n			}\n		}\n		return cache;\n	},\n	get: function( owner, key ) {\n		return key === undefined ?\n			this.cache( owner ) :\n\n			// Always use camelCase key (gh-2257)\n			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];\n	},\n	access: function( owner, key, value ) {\n\n		// In cases where either:\n		//\n		//   1. No key was specified\n		//   2. A string key was specified, but no value provided\n		//\n		// Take the \"read\" path and allow the get method to determine\n		// which value to return, respectively either:\n		//\n		//   1. The entire cache object\n		//   2. The data stored at the key\n		//\n		if ( key === undefined ||\n				( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n			return this.get( owner, key );\n		}\n\n		// When the key is not a string, or both a key and value\n		// are specified, set or extend (existing objects) with either:\n		//\n		//   1. An object of properties\n		//   2. A key and value\n		//\n		this.set( owner, key, value );\n\n		// Since the \"set\" path can have two possible entry points\n		// return the expected data based on which path was taken[*]\n		return value !== undefined ? value : key;\n	},\n	remove: function( owner, key ) {\n		var i,\n			cache = owner[ this.expando ];\n\n		if ( cache === undefined ) {\n			return;\n		}\n\n		if ( key !== undefined ) {\n\n			// Support array or space separated string of keys\n			if ( Array.isArray( key ) ) {\n\n				// If key is an array of keys...\n				// We always set camelCase keys, so remove that.\n				key = key.map( jQuery.camelCase );\n			} else {\n				key = jQuery.camelCase( key );\n\n				// If a key with the spaces exists, use it.\n				// Otherwise, create an array by matching non-whitespace\n				key = key in cache ?\n					[ key ] :\n					( key.match( rnothtmlwhite ) || [] );\n			}\n\n			i = key.length;\n\n			while ( i-- ) {\n				delete cache[ key[ i ] ];\n			}\n		}\n\n		// Remove the expando if there's no more data\n		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n			// Support: Chrome <=35 - 45\n			// Webkit & Blink performance suffers when deleting properties\n			// from DOM nodes, so set to undefined instead\n			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n			if ( owner.nodeType ) {\n				owner[ this.expando ] = undefined;\n			} else {\n				delete owner[ this.expando ];\n			}\n		}\n	},\n	hasData: function( owner ) {\n		var cache = owner[ this.expando ];\n		return cache !== undefined && !jQuery.isEmptyObject( cache );\n	}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//	Implementation Summary\n//\n//	1. Enforce API surface and semantic compatibility with 1.9.x branch\n//	2. Improve the module's maintainability by reducing the storage\n//		paths to a single mechanism.\n//	3. Use the same single mechanism to support \"private\" and \"user\" data.\n//	4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//	5. Avoid exposing implementation details on user objects (eg. expando properties)\n//	6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n	rmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n	if ( data === \"true\" ) {\n		return true;\n	}\n\n	if ( data === \"false\" ) {\n		return false;\n	}\n\n	if ( data === \"null\" ) {\n		return null;\n	}\n\n	// Only convert to a number if it doesn't change the string\n	if ( data === +data + \"\" ) {\n		return +data;\n	}\n\n	if ( rbrace.test( data ) ) {\n		return JSON.parse( data );\n	}\n\n	return data;\n}\n\nfunction dataAttr( elem, key, data ) {\n	var name;\n\n	// If nothing was found internally, try to fetch any\n	// data from the HTML5 data-* attribute\n	if ( data === undefined && elem.nodeType === 1 ) {\n		name = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n		data = elem.getAttribute( name );\n\n		if ( typeof data === \"string\" ) {\n			try {\n				data = getData( data );\n			} catch ( e ) {}\n\n			// Make sure we set the data so it isn't changed later\n			dataUser.set( elem, key, data );\n		} else {\n			data = undefined;\n		}\n	}\n	return data;\n}\n\njQuery.extend( {\n	hasData: function( elem ) {\n		return dataUser.hasData( elem ) || dataPriv.hasData( elem );\n	},\n\n	data: function( elem, name, data ) {\n		return dataUser.access( elem, name, data );\n	},\n\n	removeData: function( elem, name ) {\n		dataUser.remove( elem, name );\n	},\n\n	// TODO: Now that all calls to _data and _removeData have been replaced\n	// with direct calls to dataPriv methods, these can be deprecated.\n	_data: function( elem, name, data ) {\n		return dataPriv.access( elem, name, data );\n	},\n\n	_removeData: function( elem, name ) {\n		dataPriv.remove( elem, name );\n	}\n} );\n\njQuery.fn.extend( {\n	data: function( key, value ) {\n		var i, name, data,\n			elem = this[ 0 ],\n			attrs = elem && elem.attributes;\n\n		// Gets all values\n		if ( key === undefined ) {\n			if ( this.length ) {\n				data = dataUser.get( elem );\n\n				if ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n					i = attrs.length;\n					while ( i-- ) {\n\n						// Support: IE 11 only\n						// The attrs elements can be null (#14894)\n						if ( attrs[ i ] ) {\n							name = attrs[ i ].name;\n							if ( name.indexOf( \"data-\" ) === 0 ) {\n								name = jQuery.camelCase( name.slice( 5 ) );\n								dataAttr( elem, name, data[ name ] );\n							}\n						}\n					}\n					dataPriv.set( elem, \"hasDataAttrs\", true );\n				}\n			}\n\n			return data;\n		}\n\n		// Sets multiple values\n		if ( typeof key === \"object\" ) {\n			return this.each( function() {\n				dataUser.set( this, key );\n			} );\n		}\n\n		return access( this, function( value ) {\n			var data;\n\n			// The calling jQuery object (element matches) is not empty\n			// (and therefore has an element appears at this[ 0 ]) and the\n			// `value` parameter was not undefined. An empty jQuery object\n			// will result in `undefined` for elem = this[ 0 ] which will\n			// throw an exception if an attempt to read a data cache is made.\n			if ( elem && value === undefined ) {\n\n				// Attempt to get data from the cache\n				// The key will always be camelCased in Data\n				data = dataUser.get( elem, key );\n				if ( data !== undefined ) {\n					return data;\n				}\n\n				// Attempt to \"discover\" the data in\n				// HTML5 custom data-* attrs\n				data = dataAttr( elem, key );\n				if ( data !== undefined ) {\n					return data;\n				}\n\n				// We tried really hard, but the data doesn't exist.\n				return;\n			}\n\n			// Set the data...\n			this.each( function() {\n\n				// We always store the camelCased key\n				dataUser.set( this, key, value );\n			} );\n		}, null, value, arguments.length > 1, null, true );\n	},\n\n	removeData: function( key ) {\n		return this.each( function() {\n			dataUser.remove( this, key );\n		} );\n	}\n} );\n\n\njQuery.extend( {\n	queue: function( elem, type, data ) {\n		var queue;\n\n		if ( elem ) {\n			type = ( type || \"fx\" ) + \"queue\";\n			queue = dataPriv.get( elem, type );\n\n			// Speed up dequeue by getting out quickly if this is just a lookup\n			if ( data ) {\n				if ( !queue || Array.isArray( data ) ) {\n					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n				} else {\n					queue.push( data );\n				}\n			}\n			return queue || [];\n		}\n	},\n\n	dequeue: function( elem, type ) {\n		type = type || \"fx\";\n\n		var queue = jQuery.queue( elem, type ),\n			startLength = queue.length,\n			fn = queue.shift(),\n			hooks = jQuery._queueHooks( elem, type ),\n			next = function() {\n				jQuery.dequeue( elem, type );\n			};\n\n		// If the fx queue is dequeued, always remove the progress sentinel\n		if ( fn === \"inprogress\" ) {\n			fn = queue.shift();\n			startLength--;\n		}\n\n		if ( fn ) {\n\n			// Add a progress sentinel to prevent the fx queue from being\n			// automatically dequeued\n			if ( type === \"fx\" ) {\n				queue.unshift( \"inprogress\" );\n			}\n\n			// Clear up the last queue stop function\n			delete hooks.stop;\n			fn.call( elem, next, hooks );\n		}\n\n		if ( !startLength && hooks ) {\n			hooks.empty.fire();\n		}\n	},\n\n	// Not public - generate a queueHooks object, or return the current one\n	_queueHooks: function( elem, type ) {\n		var key = type + \"queueHooks\";\n		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n			empty: jQuery.Callbacks( \"once memory\" ).add( function() {\n				dataPriv.remove( elem, [ type + \"queue\", key ] );\n			} )\n		} );\n	}\n} );\n\njQuery.fn.extend( {\n	queue: function( type, data ) {\n		var setter = 2;\n\n		if ( typeof type !== \"string\" ) {\n			data = type;\n			type = \"fx\";\n			setter--;\n		}\n\n		if ( arguments.length < setter ) {\n			return jQuery.queue( this[ 0 ], type );\n		}\n\n		return data === undefined ?\n			this :\n			this.each( function() {\n				var queue = jQuery.queue( this, type, data );\n\n				// Ensure a hooks for this queue\n				jQuery._queueHooks( this, type );\n\n				if ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n					jQuery.dequeue( this, type );\n				}\n			} );\n	},\n	dequeue: function( type ) {\n		return this.each( function() {\n			jQuery.dequeue( this, type );\n		} );\n	},\n	clearQueue: function( type ) {\n		return this.queue( type || \"fx\", [] );\n	},\n\n	// Get a promise resolved when queues of a certain type\n	// are emptied (fx is the type by default)\n	promise: function( type, obj ) {\n		var tmp,\n			count = 1,\n			defer = jQuery.Deferred(),\n			elements = this,\n			i = this.length,\n			resolve = function() {\n				if ( !( --count ) ) {\n					defer.resolveWith( elements, [ elements ] );\n				}\n			};\n\n		if ( typeof type !== \"string\" ) {\n			obj = type;\n			type = undefined;\n		}\n		type = type || \"fx\";\n\n		while ( i-- ) {\n			tmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n			if ( tmp && tmp.empty ) {\n				count++;\n				tmp.empty.add( resolve );\n			}\n		}\n		resolve();\n		return defer.promise( obj );\n	}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHiddenWithinTree = function( elem, el ) {\n\n		// isHiddenWithinTree might be called from jQuery#filter function;\n		// in that case, element will be second argument\n		elem = el || elem;\n\n		// Inline style trumps all\n		return elem.style.display === \"none\" ||\n			elem.style.display === \"\" &&\n\n			// Otherwise, check computed style\n			// Support: Firefox <=43 - 45\n			// Disconnected elements can have computed display: none, so first confirm that elem is\n			// in the document.\n			jQuery.contains( elem.ownerDocument, elem ) &&\n\n			jQuery.css( elem, \"display\" ) === \"none\";\n	};\n\nvar swap = function( elem, options, callback, args ) {\n	var ret, name,\n		old = {};\n\n	// Remember the old values, and insert the new ones\n	for ( name in options ) {\n		old[ name ] = elem.style[ name ];\n		elem.style[ name ] = options[ name ];\n	}\n\n	ret = callback.apply( elem, args || [] );\n\n	// Revert the old values\n	for ( name in options ) {\n		elem.style[ name ] = old[ name ];\n	}\n\n	return ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n	var adjusted,\n		scale = 1,\n		maxIterations = 20,\n		currentValue = tween ?\n			function() {\n				return tween.cur();\n			} :\n			function() {\n				return jQuery.css( elem, prop, \"\" );\n			},\n		initial = currentValue(),\n		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n		// Starting value computation is required for potential unit mismatches\n		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n			rcssNum.exec( jQuery.css( elem, prop ) );\n\n	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n		// Trust units reported by jQuery.css\n		unit = unit || initialInUnit[ 3 ];\n\n		// Make sure we update the tween properties later on\n		valueParts = valueParts || [];\n\n		// Iteratively approximate from a nonzero starting point\n		initialInUnit = +initial || 1;\n\n		do {\n\n			// If previous iteration zeroed out, double until we get *something*.\n			// Use string for doubling so we don't accidentally see scale as unchanged below\n			scale = scale || \".5\";\n\n			// Adjust and apply\n			initialInUnit = initialInUnit / scale;\n			jQuery.style( elem, prop, initialInUnit + unit );\n\n		// Update scale, tolerating zero or NaN from tween.cur()\n		// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n		} while (\n			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n		);\n	}\n\n	if ( valueParts ) {\n		initialInUnit = +initialInUnit || +initial || 0;\n\n		// Apply relative offset (+=/-=) if specified\n		adjusted = valueParts[ 1 ] ?\n			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n			+valueParts[ 2 ];\n		if ( tween ) {\n			tween.unit = unit;\n			tween.start = initialInUnit;\n			tween.end = adjusted;\n		}\n	}\n	return adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n	var temp,\n		doc = elem.ownerDocument,\n		nodeName = elem.nodeName,\n		display = defaultDisplayMap[ nodeName ];\n\n	if ( display ) {\n		return display;\n	}\n\n	temp = doc.body.appendChild( doc.createElement( nodeName ) );\n	display = jQuery.css( temp, \"display\" );\n\n	temp.parentNode.removeChild( temp );\n\n	if ( display === \"none\" ) {\n		display = \"block\";\n	}\n	defaultDisplayMap[ nodeName ] = display;\n\n	return display;\n}\n\nfunction showHide( elements, show ) {\n	var display, elem,\n		values = [],\n		index = 0,\n		length = elements.length;\n\n	// Determine new display value for elements that need to change\n	for ( ; index < length; index++ ) {\n		elem = elements[ index ];\n		if ( !elem.style ) {\n			continue;\n		}\n\n		display = elem.style.display;\n		if ( show ) {\n\n			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n			// check is required in this first loop unless we have a nonempty display value (either\n			// inline or about-to-be-restored)\n			if ( display === \"none\" ) {\n				values[ index ] = dataPriv.get( elem, \"display\" ) || null;\n				if ( !values[ index ] ) {\n					elem.style.display = \"\";\n				}\n			}\n			if ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n				values[ index ] = getDefaultDisplay( elem );\n			}\n		} else {\n			if ( display !== \"none\" ) {\n				values[ index ] = \"none\";\n\n				// Remember what we're overwriting\n				dataPriv.set( elem, \"display\", display );\n			}\n		}\n	}\n\n	// Set the display of the elements in a second loop to avoid constant reflow\n	for ( index = 0; index < length; index++ ) {\n		if ( values[ index ] != null ) {\n			elements[ index ].style.display = values[ index ];\n		}\n	}\n\n	return elements;\n}\n\njQuery.fn.extend( {\n	show: function() {\n		return showHide( this, true );\n	},\n	hide: function() {\n		return showHide( this );\n	},\n	toggle: function( state ) {\n		if ( typeof state === \"boolean\" ) {\n			return state ? this.show() : this.hide();\n		}\n\n		return this.each( function() {\n			if ( isHiddenWithinTree( this ) ) {\n				jQuery( this ).show();\n			} else {\n				jQuery( this ).hide();\n			}\n		} );\n	}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n	// Support: IE <=9 only\n	option: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n	// XHTML parsers do not magically insert elements in the\n	// same way that tag soup parsers do. So we cannot shorten\n	// this by omitting <tbody> or other required elements.\n	thead: [ 1, \"<table>\", \"</table>\" ],\n	col: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n	tr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n	td: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n	_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n	// Support: IE <=9 - 11 only\n	// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n	var ret;\n\n	if ( typeof context.getElementsByTagName !== \"undefined\" ) {\n		ret = context.getElementsByTagName( tag || \"*\" );\n\n	} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n		ret = context.querySelectorAll( tag || \"*\" );\n\n	} else {\n		ret = [];\n	}\n\n	if ( tag === undefined || tag && nodeName( context, tag ) ) {\n		return jQuery.merge( [ context ], ret );\n	}\n\n	return ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n	var i = 0,\n		l = elems.length;\n\n	for ( ; i < l; i++ ) {\n		dataPriv.set(\n			elems[ i ],\n			\"globalEval\",\n			!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n		);\n	}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n	var elem, tmp, tag, wrap, contains, j,\n		fragment = context.createDocumentFragment(),\n		nodes = [],\n		i = 0,\n		l = elems.length;\n\n	for ( ; i < l; i++ ) {\n		elem = elems[ i ];\n\n		if ( elem || elem === 0 ) {\n\n			// Add nodes directly\n			if ( jQuery.type( elem ) === \"object\" ) {\n\n				// Support: Android <=4.0 only, PhantomJS 1 only\n				// push.apply(_, arraylike) throws on ancient WebKit\n				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n			// Convert non-html into a text node\n			} else if ( !rhtml.test( elem ) ) {\n				nodes.push( context.createTextNode( elem ) );\n\n			// Convert html into DOM nodes\n			} else {\n				tmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n				// Deserialize a standard representation\n				tag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n				wrap = wrapMap[ tag ] || wrapMap._default;\n				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n				// Descend through wrappers to the right content\n				j = wrap[ 0 ];\n				while ( j-- ) {\n					tmp = tmp.lastChild;\n				}\n\n				// Support: Android <=4.0 only, PhantomJS 1 only\n				// push.apply(_, arraylike) throws on ancient WebKit\n				jQuery.merge( nodes, tmp.childNodes );\n\n				// Remember the top-level container\n				tmp = fragment.firstChild;\n\n				// Ensure the created nodes are orphaned (#12392)\n				tmp.textContent = \"\";\n			}\n		}\n	}\n\n	// Remove wrapper from fragment\n	fragment.textContent = \"\";\n\n	i = 0;\n	while ( ( elem = nodes[ i++ ] ) ) {\n\n		// Skip elements already in the context collection (trac-4087)\n		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n			if ( ignored ) {\n				ignored.push( elem );\n			}\n			continue;\n		}\n\n		contains = jQuery.contains( elem.ownerDocument, elem );\n\n		// Append to fragment\n		tmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n		// Preserve script evaluation history\n		if ( contains ) {\n			setGlobalEval( tmp );\n		}\n\n		// Capture executables\n		if ( scripts ) {\n			j = 0;\n			while ( ( elem = tmp[ j++ ] ) ) {\n				if ( rscriptType.test( elem.type || \"\" ) ) {\n					scripts.push( elem );\n				}\n			}\n		}\n	}\n\n	return fragment;\n}\n\n\n( function() {\n	var fragment = document.createDocumentFragment(),\n		div = fragment.appendChild( document.createElement( \"div\" ) ),\n		input = document.createElement( \"input\" );\n\n	// Support: Android 4.0 - 4.3 only\n	// Check state lost if the name is set (#11217)\n	// Support: Windows Web Apps (WWA)\n	// `name` and `type` must use .setAttribute for WWA (#14901)\n	input.setAttribute( \"type\", \"radio\" );\n	input.setAttribute( \"checked\", \"checked\" );\n	input.setAttribute( \"name\", \"t\" );\n\n	div.appendChild( input );\n\n	// Support: Android <=4.1 only\n	// Older WebKit doesn't clone checked state correctly in fragments\n	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n	// Support: IE <=11 only\n	// Make sure textarea (and checkbox) defaultValue is properly cloned\n	div.innerHTML = \"<textarea>x</textarea>\";\n	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\nvar documentElement = document.documentElement;\n\n\n\nvar\n	rkeyEvent = /^key/,\n	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n	rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n	return true;\n}\n\nfunction returnFalse() {\n	return false;\n}\n\n// Support: IE <=9 only\n// See #13393 for more info\nfunction safeActiveElement() {\n	try {\n		return document.activeElement;\n	} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n	var origFn, type;\n\n	// Types can be a map of types/handlers\n	if ( typeof types === \"object\" ) {\n\n		// ( types-Object, selector, data )\n		if ( typeof selector !== \"string\" ) {\n\n			// ( types-Object, data )\n			data = data || selector;\n			selector = undefined;\n		}\n		for ( type in types ) {\n			on( elem, type, selector, data, types[ type ], one );\n		}\n		return elem;\n	}\n\n	if ( data == null && fn == null ) {\n\n		// ( types, fn )\n		fn = selector;\n		data = selector = undefined;\n	} else if ( fn == null ) {\n		if ( typeof selector === \"string\" ) {\n\n			// ( types, selector, fn )\n			fn = data;\n			data = undefined;\n		} else {\n\n			// ( types, data, fn )\n			fn = data;\n			data = selector;\n			selector = undefined;\n		}\n	}\n	if ( fn === false ) {\n		fn = returnFalse;\n	} else if ( !fn ) {\n		return elem;\n	}\n\n	if ( one === 1 ) {\n		origFn = fn;\n		fn = function( event ) {\n\n			// Can use an empty set, since event contains the info\n			jQuery().off( event );\n			return origFn.apply( this, arguments );\n		};\n\n		// Use same guid so caller can remove using origFn\n		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n	}\n	return elem.each( function() {\n		jQuery.event.add( this, types, fn, data, selector );\n	} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n	global: {},\n\n	add: function( elem, types, handler, data, selector ) {\n\n		var handleObjIn, eventHandle, tmp,\n			events, t, handleObj,\n			special, handlers, type, namespaces, origType,\n			elemData = dataPriv.get( elem );\n\n		// Don't attach events to noData or text/comment nodes (but allow plain objects)\n		if ( !elemData ) {\n			return;\n		}\n\n		// Caller can pass in an object of custom data in lieu of the handler\n		if ( handler.handler ) {\n			handleObjIn = handler;\n			handler = handleObjIn.handler;\n			selector = handleObjIn.selector;\n		}\n\n		// Ensure that invalid selectors throw exceptions at attach time\n		// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n		if ( selector ) {\n			jQuery.find.matchesSelector( documentElement, selector );\n		}\n\n		// Make sure that the handler has a unique ID, used to find/remove it later\n		if ( !handler.guid ) {\n			handler.guid = jQuery.guid++;\n		}\n\n		// Init the element's event structure and main handler, if this is the first\n		if ( !( events = elemData.events ) ) {\n			events = elemData.events = {};\n		}\n		if ( !( eventHandle = elemData.handle ) ) {\n			eventHandle = elemData.handle = function( e ) {\n\n				// Discard the second event of a jQuery.event.trigger() and\n				// when an event is called after a page has unloaded\n				return typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n					jQuery.event.dispatch.apply( elem, arguments ) : undefined;\n			};\n		}\n\n		// Handle multiple events separated by a space\n		types = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n		t = types.length;\n		while ( t-- ) {\n			tmp = rtypenamespace.exec( types[ t ] ) || [];\n			type = origType = tmp[ 1 ];\n			namespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n			// There *must* be a type, no attaching namespace-only handlers\n			if ( !type ) {\n				continue;\n			}\n\n			// If event changes its type, use the special event handlers for the changed type\n			special = jQuery.event.special[ type ] || {};\n\n			// If selector defined, determine special event api type, otherwise given type\n			type = ( selector ? special.delegateType : special.bindType ) || type;\n\n			// Update special based on newly reset type\n			special = jQuery.event.special[ type ] || {};\n\n			// handleObj is passed to all event handlers\n			handleObj = jQuery.extend( {\n				type: type,\n				origType: origType,\n				data: data,\n				handler: handler,\n				guid: handler.guid,\n				selector: selector,\n				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n				namespace: namespaces.join( \".\" )\n			}, handleObjIn );\n\n			// Init the event handler queue if we're the first\n			if ( !( handlers = events[ type ] ) ) {\n				handlers = events[ type ] = [];\n				handlers.delegateCount = 0;\n\n				// Only use addEventListener if the special events handler returns false\n				if ( !special.setup ||\n					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n					if ( elem.addEventListener ) {\n						elem.addEventListener( type, eventHandle );\n					}\n				}\n			}\n\n			if ( special.add ) {\n				special.add.call( elem, handleObj );\n\n				if ( !handleObj.handler.guid ) {\n					handleObj.handler.guid = handler.guid;\n				}\n			}\n\n			// Add to the element's handler list, delegates in front\n			if ( selector ) {\n				handlers.splice( handlers.delegateCount++, 0, handleObj );\n			} else {\n				handlers.push( handleObj );\n			}\n\n			// Keep track of which events have ever been used, for event optimization\n			jQuery.event.global[ type ] = true;\n		}\n\n	},\n\n	// Detach an event or set of events from an element\n	remove: function( elem, types, handler, selector, mappedTypes ) {\n\n		var j, origCount, tmp,\n			events, t, handleObj,\n			special, handlers, type, namespaces, origType,\n			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n		if ( !elemData || !( events = elemData.events ) ) {\n			return;\n		}\n\n		// Once for each type.namespace in types; type may be omitted\n		types = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n		t = types.length;\n		while ( t-- ) {\n			tmp = rtypenamespace.exec( types[ t ] ) || [];\n			type = origType = tmp[ 1 ];\n			namespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n			// Unbind all events (on this namespace, if provided) for the element\n			if ( !type ) {\n				for ( type in events ) {\n					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n				}\n				continue;\n			}\n\n			special = jQuery.event.special[ type ] || {};\n			type = ( selector ? special.delegateType : special.bindType ) || type;\n			handlers = events[ type ] || [];\n			tmp = tmp[ 2 ] &&\n				new RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n			// Remove matching events\n			origCount = j = handlers.length;\n			while ( j-- ) {\n				handleObj = handlers[ j ];\n\n				if ( ( mappedTypes || origType === handleObj.origType ) &&\n					( !handler || handler.guid === handleObj.guid ) &&\n					( !tmp || tmp.test( handleObj.namespace ) ) &&\n					( !selector || selector === handleObj.selector ||\n						selector === \"**\" && handleObj.selector ) ) {\n					handlers.splice( j, 1 );\n\n					if ( handleObj.selector ) {\n						handlers.delegateCount--;\n					}\n					if ( special.remove ) {\n						special.remove.call( elem, handleObj );\n					}\n				}\n			}\n\n			// Remove generic event handler if we removed something and no more handlers exist\n			// (avoids potential for endless recursion during removal of special event handlers)\n			if ( origCount && !handlers.length ) {\n				if ( !special.teardown ||\n					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n					jQuery.removeEvent( elem, type, elemData.handle );\n				}\n\n				delete events[ type ];\n			}\n		}\n\n		// Remove data and the expando if it's no longer used\n		if ( jQuery.isEmptyObject( events ) ) {\n			dataPriv.remove( elem, \"handle events\" );\n		}\n	},\n\n	dispatch: function( nativeEvent ) {\n\n		// Make a writable jQuery.Event from the native event object\n		var event = jQuery.event.fix( nativeEvent );\n\n		var i, j, ret, matched, handleObj, handlerQueue,\n			args = new Array( arguments.length ),\n			handlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n			special = jQuery.event.special[ event.type ] || {};\n\n		// Use the fix-ed jQuery.Event rather than the (read-only) native event\n		args[ 0 ] = event;\n\n		for ( i = 1; i < arguments.length; i++ ) {\n			args[ i ] = arguments[ i ];\n		}\n\n		event.delegateTarget = this;\n\n		// Call the preDispatch hook for the mapped type, and let it bail if desired\n		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n			return;\n		}\n\n		// Determine handlers\n		handlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n		// Run delegates first; they may want to stop propagation beneath us\n		i = 0;\n		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n			event.currentTarget = matched.elem;\n\n			j = 0;\n			while ( ( handleObj = matched.handlers[ j++ ] ) &&\n				!event.isImmediatePropagationStopped() ) {\n\n				// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n				// a subset or equal to those in the bound event (both can have no namespace).\n				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n					event.handleObj = handleObj;\n					event.data = handleObj.data;\n\n					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n						handleObj.handler ).apply( matched.elem, args );\n\n					if ( ret !== undefined ) {\n						if ( ( event.result = ret ) === false ) {\n							event.preventDefault();\n							event.stopPropagation();\n						}\n					}\n				}\n			}\n		}\n\n		// Call the postDispatch hook for the mapped type\n		if ( special.postDispatch ) {\n			special.postDispatch.call( this, event );\n		}\n\n		return event.result;\n	},\n\n	handlers: function( event, handlers ) {\n		var i, handleObj, sel, matchedHandlers, matchedSelectors,\n			handlerQueue = [],\n			delegateCount = handlers.delegateCount,\n			cur = event.target;\n\n		// Find delegate handlers\n		if ( delegateCount &&\n\n			// Support: IE <=9\n			// Black-hole SVG <use> instance trees (trac-13180)\n			cur.nodeType &&\n\n			// Support: Firefox <=42\n			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n			// Support: IE 11 only\n			// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n			!( event.type === \"click\" && event.button >= 1 ) ) {\n\n			for ( ; cur !== this; cur = cur.parentNode || this ) {\n\n				// Don't check non-elements (#13208)\n				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n				if ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n					matchedHandlers = [];\n					matchedSelectors = {};\n					for ( i = 0; i < delegateCount; i++ ) {\n						handleObj = handlers[ i ];\n\n						// Don't conflict with Object.prototype properties (#13203)\n						sel = handleObj.selector + \" \";\n\n						if ( matchedSelectors[ sel ] === undefined ) {\n							matchedSelectors[ sel ] = handleObj.needsContext ?\n								jQuery( sel, this ).index( cur ) > -1 :\n								jQuery.find( sel, this, null, [ cur ] ).length;\n						}\n						if ( matchedSelectors[ sel ] ) {\n							matchedHandlers.push( handleObj );\n						}\n					}\n					if ( matchedHandlers.length ) {\n						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n					}\n				}\n			}\n		}\n\n		// Add the remaining (directly-bound) handlers\n		cur = this;\n		if ( delegateCount < handlers.length ) {\n			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n		}\n\n		return handlerQueue;\n	},\n\n	addProp: function( name, hook ) {\n		Object.defineProperty( jQuery.Event.prototype, name, {\n			enumerable: true,\n			configurable: true,\n\n			get: jQuery.isFunction( hook ) ?\n				function() {\n					if ( this.originalEvent ) {\n							return hook( this.originalEvent );\n					}\n				} :\n				function() {\n					if ( this.originalEvent ) {\n							return this.originalEvent[ name ];\n					}\n				},\n\n			set: function( value ) {\n				Object.defineProperty( this, name, {\n					enumerable: true,\n					configurable: true,\n					writable: true,\n					value: value\n				} );\n			}\n		} );\n	},\n\n	fix: function( originalEvent ) {\n		return originalEvent[ jQuery.expando ] ?\n			originalEvent :\n			new jQuery.Event( originalEvent );\n	},\n\n	special: {\n		load: {\n\n			// Prevent triggered image.load events from bubbling to window.load\n			noBubble: true\n		},\n		focus: {\n\n			// Fire native event if possible so blur/focus sequence is correct\n			trigger: function() {\n				if ( this !== safeActiveElement() && this.focus ) {\n					this.focus();\n					return false;\n				}\n			},\n			delegateType: \"focusin\"\n		},\n		blur: {\n			trigger: function() {\n				if ( this === safeActiveElement() && this.blur ) {\n					this.blur();\n					return false;\n				}\n			},\n			delegateType: \"focusout\"\n		},\n		click: {\n\n			// For checkbox, fire native event so checked state will be right\n			trigger: function() {\n				if ( this.type === \"checkbox\" && this.click && nodeName( this, \"input\" ) ) {\n					this.click();\n					return false;\n				}\n			},\n\n			// For cross-browser consistency, don't fire native .click() on links\n			_default: function( event ) {\n				return nodeName( event.target, \"a\" );\n			}\n		},\n\n		beforeunload: {\n			postDispatch: function( event ) {\n\n				// Support: Firefox 20+\n				// Firefox doesn't alert if the returnValue field is not set.\n				if ( event.result !== undefined && event.originalEvent ) {\n					event.originalEvent.returnValue = event.result;\n				}\n			}\n		}\n	}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n	// This \"if\" is needed for plain objects\n	if ( elem.removeEventListener ) {\n		elem.removeEventListener( type, handle );\n	}\n};\n\njQuery.Event = function( src, props ) {\n\n	// Allow instantiation without the 'new' keyword\n	if ( !( this instanceof jQuery.Event ) ) {\n		return new jQuery.Event( src, props );\n	}\n\n	// Event object\n	if ( src && src.type ) {\n		this.originalEvent = src;\n		this.type = src.type;\n\n		// Events bubbling up the document may have been marked as prevented\n		// by a handler lower down the tree; reflect the correct value.\n		this.isDefaultPrevented = src.defaultPrevented ||\n				src.defaultPrevented === undefined &&\n\n				// Support: Android <=2.3 only\n				src.returnValue === false ?\n			returnTrue :\n			returnFalse;\n\n		// Create target properties\n		// Support: Safari <=6 - 7 only\n		// Target should not be a text node (#504, #13143)\n		this.target = ( src.target && src.target.nodeType === 3 ) ?\n			src.target.parentNode :\n			src.target;\n\n		this.currentTarget = src.currentTarget;\n		this.relatedTarget = src.relatedTarget;\n\n	// Event type\n	} else {\n		this.type = src;\n	}\n\n	// Put explicitly provided properties onto the event object\n	if ( props ) {\n		jQuery.extend( this, props );\n	}\n\n	// Create a timestamp if incoming event doesn't have one\n	this.timeStamp = src && src.timeStamp || jQuery.now();\n\n	// Mark it as fixed\n	this[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n	constructor: jQuery.Event,\n	isDefaultPrevented: returnFalse,\n	isPropagationStopped: returnFalse,\n	isImmediatePropagationStopped: returnFalse,\n	isSimulated: false,\n\n	preventDefault: function() {\n		var e = this.originalEvent;\n\n		this.isDefaultPrevented = returnTrue;\n\n		if ( e && !this.isSimulated ) {\n			e.preventDefault();\n		}\n	},\n	stopPropagation: function() {\n		var e = this.originalEvent;\n\n		this.isPropagationStopped = returnTrue;\n\n		if ( e && !this.isSimulated ) {\n			e.stopPropagation();\n		}\n	},\n	stopImmediatePropagation: function() {\n		var e = this.originalEvent;\n\n		this.isImmediatePropagationStopped = returnTrue;\n\n		if ( e && !this.isSimulated ) {\n			e.stopImmediatePropagation();\n		}\n\n		this.stopPropagation();\n	}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n	altKey: true,\n	bubbles: true,\n	cancelable: true,\n	changedTouches: true,\n	ctrlKey: true,\n	detail: true,\n	eventPhase: true,\n	metaKey: true,\n	pageX: true,\n	pageY: true,\n	shiftKey: true,\n	view: true,\n	\"char\": true,\n	charCode: true,\n	key: true,\n	keyCode: true,\n	button: true,\n	buttons: true,\n	clientX: true,\n	clientY: true,\n	offsetX: true,\n	offsetY: true,\n	pointerId: true,\n	pointerType: true,\n	screenX: true,\n	screenY: true,\n	targetTouches: true,\n	toElement: true,\n	touches: true,\n\n	which: function( event ) {\n		var button = event.button;\n\n		// Add which for key events\n		if ( event.which == null && rkeyEvent.test( event.type ) ) {\n			return event.charCode != null ? event.charCode : event.keyCode;\n		}\n\n		// Add which for click: 1 === left; 2 === middle; 3 === right\n		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n			if ( button & 1 ) {\n				return 1;\n			}\n\n			if ( button & 2 ) {\n				return 3;\n			}\n\n			if ( button & 4 ) {\n				return 2;\n			}\n\n			return 0;\n		}\n\n		return event.which;\n	}\n}, jQuery.event.addProp );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n	mouseenter: \"mouseover\",\n	mouseleave: \"mouseout\",\n	pointerenter: \"pointerover\",\n	pointerleave: \"pointerout\"\n}, function( orig, fix ) {\n	jQuery.event.special[ orig ] = {\n		delegateType: fix,\n		bindType: fix,\n\n		handle: function( event ) {\n			var ret,\n				target = this,\n				related = event.relatedTarget,\n				handleObj = event.handleObj;\n\n			// For mouseenter/leave call the handler if related is outside the target.\n			// NB: No relatedTarget if the mouse left/entered the browser window\n			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n				event.type = handleObj.origType;\n				ret = handleObj.handler.apply( this, arguments );\n				event.type = fix;\n			}\n			return ret;\n		}\n	};\n} );\n\njQuery.fn.extend( {\n\n	on: function( types, selector, data, fn ) {\n		return on( this, types, selector, data, fn );\n	},\n	one: function( types, selector, data, fn ) {\n		return on( this, types, selector, data, fn, 1 );\n	},\n	off: function( types, selector, fn ) {\n		var handleObj, type;\n		if ( types && types.preventDefault && types.handleObj ) {\n\n			// ( event )  dispatched jQuery.Event\n			handleObj = types.handleObj;\n			jQuery( types.delegateTarget ).off(\n				handleObj.namespace ?\n					handleObj.origType + \".\" + handleObj.namespace :\n					handleObj.origType,\n				handleObj.selector,\n				handleObj.handler\n			);\n			return this;\n		}\n		if ( typeof types === \"object\" ) {\n\n			// ( types-object [, selector] )\n			for ( type in types ) {\n				this.off( type, selector, types[ type ] );\n			}\n			return this;\n		}\n		if ( selector === false || typeof selector === \"function\" ) {\n\n			// ( types [, fn] )\n			fn = selector;\n			selector = undefined;\n		}\n		if ( fn === false ) {\n			fn = returnFalse;\n		}\n		return this.each( function() {\n			jQuery.event.remove( this, types, fn, selector );\n		} );\n	}\n} );\n\n\nvar\n\n	/* eslint-disable max-len */\n\n	// See https://github.com/eslint/eslint/issues/3229\n	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n	/* eslint-enable */\n\n	// Support: IE <=10 - 11, Edge 12 - 13\n	// In IE/Edge using regex groups here causes severe slowdowns.\n	// See https://connect.microsoft.com/IE/feedback/details/1736512/\n	rnoInnerhtml = /<script|<style|<link/i,\n\n	// checked=\"checked\" or checked\n	rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n	rscriptTypeMasked = /^true\\/(.*)/,\n	rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n	if ( nodeName( elem, \"table\" ) &&\n		nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n		return jQuery( \">tbody\", elem )[ 0 ] || elem;\n	}\n\n	return elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n	elem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n	return elem;\n}\nfunction restoreScript( elem ) {\n	var match = rscriptTypeMasked.exec( elem.type );\n\n	if ( match ) {\n		elem.type = match[ 1 ];\n	} else {\n		elem.removeAttribute( \"type\" );\n	}\n\n	return elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n	if ( dest.nodeType !== 1 ) {\n		return;\n	}\n\n	// 1. Copy private data: events, handlers, etc.\n	if ( dataPriv.hasData( src ) ) {\n		pdataOld = dataPriv.access( src );\n		pdataCur = dataPriv.set( dest, pdataOld );\n		events = pdataOld.events;\n\n		if ( events ) {\n			delete pdataCur.handle;\n			pdataCur.events = {};\n\n			for ( type in events ) {\n				for ( i = 0, l = events[ type ].length; i < l; i++ ) {\n					jQuery.event.add( dest, type, events[ type ][ i ] );\n				}\n			}\n		}\n	}\n\n	// 2. Copy user data\n	if ( dataUser.hasData( src ) ) {\n		udataOld = dataUser.access( src );\n		udataCur = jQuery.extend( {}, udataOld );\n\n		dataUser.set( dest, udataCur );\n	}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n	var nodeName = dest.nodeName.toLowerCase();\n\n	// Fails to persist the checked state of a cloned checkbox or radio button.\n	if ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n		dest.checked = src.checked;\n\n	// Fails to return the selected option to the default selected state when cloning options\n	} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n		dest.defaultValue = src.defaultValue;\n	}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n	// Flatten any nested arrays\n	args = concat.apply( [], args );\n\n	var fragment, first, scripts, hasScripts, node, doc,\n		i = 0,\n		l = collection.length,\n		iNoClone = l - 1,\n		value = args[ 0 ],\n		isFunction = jQuery.isFunction( value );\n\n	// We can't cloneNode fragments that contain checked, in WebKit\n	if ( isFunction ||\n			( l > 1 && typeof value === \"string\" &&\n				!support.checkClone && rchecked.test( value ) ) ) {\n		return collection.each( function( index ) {\n			var self = collection.eq( index );\n			if ( isFunction ) {\n				args[ 0 ] = value.call( this, index, self.html() );\n			}\n			domManip( self, args, callback, ignored );\n		} );\n	}\n\n	if ( l ) {\n		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n		first = fragment.firstChild;\n\n		if ( fragment.childNodes.length === 1 ) {\n			fragment = first;\n		}\n\n		// Require either new content or an interest in ignored elements to invoke the callback\n		if ( first || ignored ) {\n			scripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n			hasScripts = scripts.length;\n\n			// Use the original fragment for the last item\n			// instead of the first because it can end up\n			// being emptied incorrectly in certain situations (#8070).\n			for ( ; i < l; i++ ) {\n				node = fragment;\n\n				if ( i !== iNoClone ) {\n					node = jQuery.clone( node, true, true );\n\n					// Keep references to cloned scripts for later restoration\n					if ( hasScripts ) {\n\n						// Support: Android <=4.0 only, PhantomJS 1 only\n						// push.apply(_, arraylike) throws on ancient WebKit\n						jQuery.merge( scripts, getAll( node, \"script\" ) );\n					}\n				}\n\n				callback.call( collection[ i ], node, i );\n			}\n\n			if ( hasScripts ) {\n				doc = scripts[ scripts.length - 1 ].ownerDocument;\n\n				// Reenable scripts\n				jQuery.map( scripts, restoreScript );\n\n				// Evaluate executable scripts on first document insertion\n				for ( i = 0; i < hasScripts; i++ ) {\n					node = scripts[ i ];\n					if ( rscriptType.test( node.type || \"\" ) &&\n						!dataPriv.access( node, \"globalEval\" ) &&\n						jQuery.contains( doc, node ) ) {\n\n						if ( node.src ) {\n\n							// Optional AJAX dependency, but won't run scripts if not present\n							if ( jQuery._evalUrl ) {\n								jQuery._evalUrl( node.src );\n							}\n						} else {\n							DOMEval( node.textContent.replace( rcleanScript, \"\" ), doc );\n						}\n					}\n				}\n			}\n		}\n	}\n\n	return collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n	var node,\n		nodes = selector ? jQuery.filter( selector, elem ) : elem,\n		i = 0;\n\n	for ( ; ( node = nodes[ i ] ) != null; i++ ) {\n		if ( !keepData && node.nodeType === 1 ) {\n			jQuery.cleanData( getAll( node ) );\n		}\n\n		if ( node.parentNode ) {\n			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n				setGlobalEval( getAll( node, \"script\" ) );\n			}\n			node.parentNode.removeChild( node );\n		}\n	}\n\n	return elem;\n}\n\njQuery.extend( {\n	htmlPrefilter: function( html ) {\n		return html.replace( rxhtmlTag, \"<$1></$2>\" );\n	},\n\n	clone: function( elem, dataAndEvents, deepDataAndEvents ) {\n		var i, l, srcElements, destElements,\n			clone = elem.cloneNode( true ),\n			inPage = jQuery.contains( elem.ownerDocument, elem );\n\n		// Fix IE cloning issues\n		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n				!jQuery.isXMLDoc( elem ) ) {\n\n			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n			destElements = getAll( clone );\n			srcElements = getAll( elem );\n\n			for ( i = 0, l = srcElements.length; i < l; i++ ) {\n				fixInput( srcElements[ i ], destElements[ i ] );\n			}\n		}\n\n		// Copy the events from the original to the clone\n		if ( dataAndEvents ) {\n			if ( deepDataAndEvents ) {\n				srcElements = srcElements || getAll( elem );\n				destElements = destElements || getAll( clone );\n\n				for ( i = 0, l = srcElements.length; i < l; i++ ) {\n					cloneCopyEvent( srcElements[ i ], destElements[ i ] );\n				}\n			} else {\n				cloneCopyEvent( elem, clone );\n			}\n		}\n\n		// Preserve script evaluation history\n		destElements = getAll( clone, \"script\" );\n		if ( destElements.length > 0 ) {\n			setGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n		}\n\n		// Return the cloned set\n		return clone;\n	},\n\n	cleanData: function( elems ) {\n		var data, elem, type,\n			special = jQuery.event.special,\n			i = 0;\n\n		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n			if ( acceptData( elem ) ) {\n				if ( ( data = elem[ dataPriv.expando ] ) ) {\n					if ( data.events ) {\n						for ( type in data.events ) {\n							if ( special[ type ] ) {\n								jQuery.event.remove( elem, type );\n\n							// This is a shortcut to avoid jQuery.event.remove's overhead\n							} else {\n								jQuery.removeEvent( elem, type, data.handle );\n							}\n						}\n					}\n\n					// Support: Chrome <=35 - 45+\n					// Assign undefined instead of using delete, see Data#remove\n					elem[ dataPriv.expando ] = undefined;\n				}\n				if ( elem[ dataUser.expando ] ) {\n\n					// Support: Chrome <=35 - 45+\n					// Assign undefined instead of using delete, see Data#remove\n					elem[ dataUser.expando ] = undefined;\n				}\n			}\n		}\n	}\n} );\n\njQuery.fn.extend( {\n	detach: function( selector ) {\n		return remove( this, selector, true );\n	},\n\n	remove: function( selector ) {\n		return remove( this, selector );\n	},\n\n	text: function( value ) {\n		return access( this, function( value ) {\n			return value === undefined ?\n				jQuery.text( this ) :\n				this.empty().each( function() {\n					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n						this.textContent = value;\n					}\n				} );\n		}, null, value, arguments.length );\n	},\n\n	append: function() {\n		return domManip( this, arguments, function( elem ) {\n			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n				var target = manipulationTarget( this, elem );\n				target.appendChild( elem );\n			}\n		} );\n	},\n\n	prepend: function() {\n		return domManip( this, arguments, function( elem ) {\n			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n				var target = manipulationTarget( this, elem );\n				target.insertBefore( elem, target.firstChild );\n			}\n		} );\n	},\n\n	before: function() {\n		return domManip( this, arguments, function( elem ) {\n			if ( this.parentNode ) {\n				this.parentNode.insertBefore( elem, this );\n			}\n		} );\n	},\n\n	after: function() {\n		return domManip( this, arguments, function( elem ) {\n			if ( this.parentNode ) {\n				this.parentNode.insertBefore( elem, this.nextSibling );\n			}\n		} );\n	},\n\n	empty: function() {\n		var elem,\n			i = 0;\n\n		for ( ; ( elem = this[ i ] ) != null; i++ ) {\n			if ( elem.nodeType === 1 ) {\n\n				// Prevent memory leaks\n				jQuery.cleanData( getAll( elem, false ) );\n\n				// Remove any remaining nodes\n				elem.textContent = \"\";\n			}\n		}\n\n		return this;\n	},\n\n	clone: function( dataAndEvents, deepDataAndEvents ) {\n		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n		return this.map( function() {\n			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n		} );\n	},\n\n	html: function( value ) {\n		return access( this, function( value ) {\n			var elem = this[ 0 ] || {},\n				i = 0,\n				l = this.length;\n\n			if ( value === undefined && elem.nodeType === 1 ) {\n				return elem.innerHTML;\n			}\n\n			// See if we can take a shortcut and just use innerHTML\n			if ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n				!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n				value = jQuery.htmlPrefilter( value );\n\n				try {\n					for ( ; i < l; i++ ) {\n						elem = this[ i ] || {};\n\n						// Remove element nodes and prevent memory leaks\n						if ( elem.nodeType === 1 ) {\n							jQuery.cleanData( getAll( elem, false ) );\n							elem.innerHTML = value;\n						}\n					}\n\n					elem = 0;\n\n				// If using innerHTML throws an exception, use the fallback method\n				} catch ( e ) {}\n			}\n\n			if ( elem ) {\n				this.empty().append( value );\n			}\n		}, null, value, arguments.length );\n	},\n\n	replaceWith: function() {\n		var ignored = [];\n\n		// Make the changes, replacing each non-ignored context element with the new content\n		return domManip( this, arguments, function( elem ) {\n			var parent = this.parentNode;\n\n			if ( jQuery.inArray( this, ignored ) < 0 ) {\n				jQuery.cleanData( getAll( this ) );\n				if ( parent ) {\n					parent.replaceChild( elem, this );\n				}\n			}\n\n		// Force callback invocation\n		}, ignored );\n	}\n} );\n\njQuery.each( {\n	appendTo: \"append\",\n	prependTo: \"prepend\",\n	insertBefore: \"before\",\n	insertAfter: \"after\",\n	replaceAll: \"replaceWith\"\n}, function( name, original ) {\n	jQuery.fn[ name ] = function( selector ) {\n		var elems,\n			ret = [],\n			insert = jQuery( selector ),\n			last = insert.length - 1,\n			i = 0;\n\n		for ( ; i <= last; i++ ) {\n			elems = i === last ? this : this.clone( true );\n			jQuery( insert[ i ] )[ original ]( elems );\n\n			// Support: Android <=4.0 only, PhantomJS 1 only\n			// .get() because push.apply(_, arraylike) throws on ancient WebKit\n			push.apply( ret, elems.get() );\n		}\n\n		return this.pushStack( ret );\n	};\n} );\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n		// IE throws on elements created in popups\n		// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n		var view = elem.ownerDocument.defaultView;\n\n		if ( !view || !view.opener ) {\n			view = window;\n		}\n\n		return view.getComputedStyle( elem );\n	};\n\n\n\n( function() {\n\n	// Executing both pixelPosition & boxSizingReliable tests require only one layout\n	// so they're executed at the same time to save the second computation.\n	function computeStyleTests() {\n\n		// This is a singleton, we need to execute it only once\n		if ( !div ) {\n			return;\n		}\n\n		div.style.cssText =\n			\"box-sizing:border-box;\" +\n			\"position:relative;display:block;\" +\n			\"margin:auto;border:1px;padding:1px;\" +\n			\"top:1%;width:50%\";\n		div.innerHTML = \"\";\n		documentElement.appendChild( container );\n\n		var divStyle = window.getComputedStyle( div );\n		pixelPositionVal = divStyle.top !== \"1%\";\n\n		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n		reliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n		boxSizingReliableVal = divStyle.width === \"4px\";\n\n		// Support: Android 4.0 - 4.3 only\n		// Some styles come back with percentage values, even though they shouldn't\n		div.style.marginRight = \"50%\";\n		pixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n		documentElement.removeChild( container );\n\n		// Nullify the div so it wouldn't be stored in the memory and\n		// it will also be a sign that checks already performed\n		div = null;\n	}\n\n	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n		container = document.createElement( \"div\" ),\n		div = document.createElement( \"div\" );\n\n	// Finish early in limited (non-browser) environments\n	if ( !div.style ) {\n		return;\n	}\n\n	// Support: IE <=9 - 11 only\n	// Style of cloned element affects source element cloned (#8908)\n	div.style.backgroundClip = \"content-box\";\n	div.cloneNode( true ).style.backgroundClip = \"\";\n	support.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n	container.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\n		\"padding:0;margin-top:1px;position:absolute\";\n	container.appendChild( div );\n\n	jQuery.extend( support, {\n		pixelPosition: function() {\n			computeStyleTests();\n			return pixelPositionVal;\n		},\n		boxSizingReliable: function() {\n			computeStyleTests();\n			return boxSizingReliableVal;\n		},\n		pixelMarginRight: function() {\n			computeStyleTests();\n			return pixelMarginRightVal;\n		},\n		reliableMarginLeft: function() {\n			computeStyleTests();\n			return reliableMarginLeftVal;\n		}\n	} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n	var width, minWidth, maxWidth, ret,\n\n		// Support: Firefox 51+\n		// Retrieving style before computed somehow\n		// fixes an issue with getting wrong values\n		// on detached elements\n		style = elem.style;\n\n	computed = computed || getStyles( elem );\n\n	// getPropertyValue is needed for:\n	//   .css('filter') (IE 9 only, #12537)\n	//   .css('--customProperty) (#3144)\n	if ( computed ) {\n		ret = computed.getPropertyValue( name ) || computed[ name ];\n\n		if ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n			ret = jQuery.style( elem, name );\n		}\n\n		// A tribute to the \"awesome hack by Dean Edwards\"\n		// Android Browser returns percentage for some values,\n		// but width seems to be reliably pixels.\n		// This is against the CSSOM draft spec:\n		// https://drafts.csswg.org/cssom/#resolved-values\n		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n			// Remember the original values\n			width = style.width;\n			minWidth = style.minWidth;\n			maxWidth = style.maxWidth;\n\n			// Put in the new values to get a computed value out\n			style.minWidth = style.maxWidth = style.width = ret;\n			ret = computed.width;\n\n			// Revert the changed values\n			style.width = width;\n			style.minWidth = minWidth;\n			style.maxWidth = maxWidth;\n		}\n	}\n\n	return ret !== undefined ?\n\n		// Support: IE <=9 - 11 only\n		// IE returns zIndex value as an integer.\n		ret + \"\" :\n		ret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n	// Define the hook, we'll check on the first run if it's really needed.\n	return {\n		get: function() {\n			if ( conditionFn() ) {\n\n				// Hook not needed (or it's not possible to use it due\n				// to missing dependency), remove it.\n				delete this.get;\n				return;\n			}\n\n			// Hook needed; redefine it so that the support test is not executed again.\n			return ( this.get = hookFn ).apply( this, arguments );\n		}\n	};\n}\n\n\nvar\n\n	// Swappable if display is none or starts with table\n	// except \"table\", \"table-cell\", or \"table-caption\"\n	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n	rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n	rcustomProp = /^--/,\n	cssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n	cssNormalTransform = {\n		letterSpacing: \"0\",\n		fontWeight: \"400\"\n	},\n\n	cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n	emptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n	// Shortcut for names that are not vendor prefixed\n	if ( name in emptyStyle ) {\n		return name;\n	}\n\n	// Check for vendor prefixed names\n	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n		i = cssPrefixes.length;\n\n	while ( i-- ) {\n		name = cssPrefixes[ i ] + capName;\n		if ( name in emptyStyle ) {\n			return name;\n		}\n	}\n}\n\n// Return a property mapped along what jQuery.cssProps suggests or to\n// a vendor prefixed property.\nfunction finalPropName( name ) {\n	var ret = jQuery.cssProps[ name ];\n	if ( !ret ) {\n		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;\n	}\n	return ret;\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n	// Any relative (+/-) values have already been\n	// normalized at this point\n	var matches = rcssNum.exec( value );\n	return matches ?\n\n		// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n		value;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n	var i,\n		val = 0;\n\n	// If we already have the right measurement, avoid augmentation\n	if ( extra === ( isBorderBox ? \"border\" : \"content\" ) ) {\n		i = 4;\n\n	// Otherwise initialize for horizontal or vertical properties\n	} else {\n		i = name === \"width\" ? 1 : 0;\n	}\n\n	for ( ; i < 4; i += 2 ) {\n\n		// Both box models exclude margin, so add it if we want it\n		if ( extra === \"margin\" ) {\n			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n		}\n\n		if ( isBorderBox ) {\n\n			// border-box includes padding, so remove it if we want content\n			if ( extra === \"content\" ) {\n				val -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n			}\n\n			// At this point, extra isn't border nor margin, so remove border\n			if ( extra !== \"margin\" ) {\n				val -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n			}\n		} else {\n\n			// At this point, extra isn't content, so add padding\n			val += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n			// At this point, extra isn't content nor padding, so add border\n			if ( extra !== \"padding\" ) {\n				val += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n			}\n		}\n	}\n\n	return val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n	// Start with computed style\n	var valueIsBorderBox,\n		styles = getStyles( elem ),\n		val = curCSS( elem, name, styles ),\n		isBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n	// Computed unit is not pixels. Stop here and return.\n	if ( rnumnonpx.test( val ) ) {\n		return val;\n	}\n\n	// Check for style in case a browser which returns unreliable values\n	// for getComputedStyle silently falls back to the reliable elem.style\n	valueIsBorderBox = isBorderBox &&\n		( support.boxSizingReliable() || val === elem.style[ name ] );\n\n	// Fall back to offsetWidth/Height when value is \"auto\"\n	// This happens for inline elements with no explicit setting (gh-3571)\n	if ( val === \"auto\" ) {\n		val = elem[ \"offset\" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];\n	}\n\n	// Normalize \"\", auto, and prepare for extra\n	val = parseFloat( val ) || 0;\n\n	// Use the active box-sizing model to add/subtract irrelevant styles\n	return ( val +\n		augmentWidthOrHeight(\n			elem,\n			name,\n			extra || ( isBorderBox ? \"border\" : \"content\" ),\n			valueIsBorderBox,\n			styles\n		)\n	) + \"px\";\n}\n\njQuery.extend( {\n\n	// Add in style property hooks for overriding the default\n	// behavior of getting and setting a style property\n	cssHooks: {\n		opacity: {\n			get: function( elem, computed ) {\n				if ( computed ) {\n\n					// We should always get a number back from opacity\n					var ret = curCSS( elem, \"opacity\" );\n					return ret === \"\" ? \"1\" : ret;\n				}\n			}\n		}\n	},\n\n	// Don't automatically add \"px\" to these possibly-unitless properties\n	cssNumber: {\n		\"animationIterationCount\": true,\n		\"columnCount\": true,\n		\"fillOpacity\": true,\n		\"flexGrow\": true,\n		\"flexShrink\": true,\n		\"fontWeight\": true,\n		\"lineHeight\": true,\n		\"opacity\": true,\n		\"order\": true,\n		\"orphans\": true,\n		\"widows\": true,\n		\"zIndex\": true,\n		\"zoom\": true\n	},\n\n	// Add in properties whose names you wish to fix before\n	// setting or getting the value\n	cssProps: {\n		\"float\": \"cssFloat\"\n	},\n\n	// Get and set the style property on a DOM Node\n	style: function( elem, name, value, extra ) {\n\n		// Don't set styles on text and comment nodes\n		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n			return;\n		}\n\n		// Make sure that we're working with the right name\n		var ret, type, hooks,\n			origName = jQuery.camelCase( name ),\n			isCustomProp = rcustomProp.test( name ),\n			style = elem.style;\n\n		// Make sure that we're working with the right name. We don't\n		// want to query the value if it is a CSS custom property\n		// since they are user-defined.\n		if ( !isCustomProp ) {\n			name = finalPropName( origName );\n		}\n\n		// Gets hook for the prefixed version, then unprefixed version\n		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n		// Check if we're setting a value\n		if ( value !== undefined ) {\n			type = typeof value;\n\n			// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n			if ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n				value = adjustCSS( elem, name, ret );\n\n				// Fixes bug #9237\n				type = \"number\";\n			}\n\n			// Make sure that null and NaN values aren't set (#7116)\n			if ( value == null || value !== value ) {\n				return;\n			}\n\n			// If a number was passed in, add the unit (except for certain CSS properties)\n			if ( type === \"number\" ) {\n				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n			}\n\n			// background-* props affect original clone's values\n			if ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n				style[ name ] = \"inherit\";\n			}\n\n			// If a hook was provided, use that value, otherwise just set the specified value\n			if ( !hooks || !( \"set\" in hooks ) ||\n				( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n				if ( isCustomProp ) {\n					style.setProperty( name, value );\n				} else {\n					style[ name ] = value;\n				}\n			}\n\n		} else {\n\n			// If a hook was provided get the non-computed value from there\n			if ( hooks && \"get\" in hooks &&\n				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n				return ret;\n			}\n\n			// Otherwise just get the value from the style object\n			return style[ name ];\n		}\n	},\n\n	css: function( elem, name, extra, styles ) {\n		var val, num, hooks,\n			origName = jQuery.camelCase( name ),\n			isCustomProp = rcustomProp.test( name );\n\n		// Make sure that we're working with the right name. We don't\n		// want to modify the value if it is a CSS custom property\n		// since they are user-defined.\n		if ( !isCustomProp ) {\n			name = finalPropName( origName );\n		}\n\n		// Try prefixed name followed by the unprefixed name\n		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n		// If a hook was provided get the computed value from there\n		if ( hooks && \"get\" in hooks ) {\n			val = hooks.get( elem, true, extra );\n		}\n\n		// Otherwise, if a way to get the computed value exists, use that\n		if ( val === undefined ) {\n			val = curCSS( elem, name, styles );\n		}\n\n		// Convert \"normal\" to computed value\n		if ( val === \"normal\" && name in cssNormalTransform ) {\n			val = cssNormalTransform[ name ];\n		}\n\n		// Make numeric if forced or a qualifier was provided and val looks numeric\n		if ( extra === \"\" || extra ) {\n			num = parseFloat( val );\n			return extra === true || isFinite( num ) ? num || 0 : val;\n		}\n\n		return val;\n	}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\n	jQuery.cssHooks[ name ] = {\n		get: function( elem, computed, extra ) {\n			if ( computed ) {\n\n				// Certain elements can have dimension info if we invisibly show them\n				// but it must have a current display style that would benefit\n				return rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n					// Support: Safari 8+\n					// Table columns in Safari have non-zero offsetWidth & zero\n					// getBoundingClientRect().width unless display is changed.\n					// Support: IE <=11 only\n					// Running getBoundingClientRect on a disconnected node\n					// in IE throws an error.\n					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n						swap( elem, cssShow, function() {\n							return getWidthOrHeight( elem, name, extra );\n						} ) :\n						getWidthOrHeight( elem, name, extra );\n			}\n		},\n\n		set: function( elem, value, extra ) {\n			var matches,\n				styles = extra && getStyles( elem ),\n				subtract = extra && augmentWidthOrHeight(\n					elem,\n					name,\n					extra,\n					jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n					styles\n				);\n\n			// Convert to pixels if value adjustment is needed\n			if ( subtract && ( matches = rcssNum.exec( value ) ) &&\n				( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n				elem.style[ name ] = value;\n				value = jQuery.css( elem, name );\n			}\n\n			return setPositiveNumber( elem, value, subtract );\n		}\n	};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n	function( elem, computed ) {\n		if ( computed ) {\n			return ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n				elem.getBoundingClientRect().left -\n					swap( elem, { marginLeft: 0 }, function() {\n						return elem.getBoundingClientRect().left;\n					} )\n				) + \"px\";\n		}\n	}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n	margin: \"\",\n	padding: \"\",\n	border: \"Width\"\n}, function( prefix, suffix ) {\n	jQuery.cssHooks[ prefix + suffix ] = {\n		expand: function( value ) {\n			var i = 0,\n				expanded = {},\n\n				// Assumes a single number if not a string\n				parts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n			for ( ; i < 4; i++ ) {\n				expanded[ prefix + cssExpand[ i ] + suffix ] =\n					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n			}\n\n			return expanded;\n		}\n	};\n\n	if ( !rmargin.test( prefix ) ) {\n		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n	}\n} );\n\njQuery.fn.extend( {\n	css: function( name, value ) {\n		return access( this, function( elem, name, value ) {\n			var styles, len,\n				map = {},\n				i = 0;\n\n			if ( Array.isArray( name ) ) {\n				styles = getStyles( elem );\n				len = name.length;\n\n				for ( ; i < len; i++ ) {\n					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n				}\n\n				return map;\n			}\n\n			return value !== undefined ?\n				jQuery.style( elem, name, value ) :\n				jQuery.css( elem, name );\n		}, name, value, arguments.length > 1 );\n	}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n	return new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n	constructor: Tween,\n	init: function( elem, options, prop, end, easing, unit ) {\n		this.elem = elem;\n		this.prop = prop;\n		this.easing = easing || jQuery.easing._default;\n		this.options = options;\n		this.start = this.now = this.cur();\n		this.end = end;\n		this.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n	},\n	cur: function() {\n		var hooks = Tween.propHooks[ this.prop ];\n\n		return hooks && hooks.get ?\n			hooks.get( this ) :\n			Tween.propHooks._default.get( this );\n	},\n	run: function( percent ) {\n		var eased,\n			hooks = Tween.propHooks[ this.prop ];\n\n		if ( this.options.duration ) {\n			this.pos = eased = jQuery.easing[ this.easing ](\n				percent, this.options.duration * percent, 0, 1, this.options.duration\n			);\n		} else {\n			this.pos = eased = percent;\n		}\n		this.now = ( this.end - this.start ) * eased + this.start;\n\n		if ( this.options.step ) {\n			this.options.step.call( this.elem, this.now, this );\n		}\n\n		if ( hooks && hooks.set ) {\n			hooks.set( this );\n		} else {\n			Tween.propHooks._default.set( this );\n		}\n		return this;\n	}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n	_default: {\n		get: function( tween ) {\n			var result;\n\n			// Use a property on the element directly when it is not a DOM element,\n			// or when there is no matching style property that exists.\n			if ( tween.elem.nodeType !== 1 ||\n				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n				return tween.elem[ tween.prop ];\n			}\n\n			// Passing an empty string as a 3rd parameter to .css will automatically\n			// attempt a parseFloat and fallback to a string if the parse fails.\n			// Simple values such as \"10px\" are parsed to Float;\n			// complex values such as \"rotate(1rad)\" are returned as-is.\n			result = jQuery.css( tween.elem, tween.prop, \"\" );\n\n			// Empty strings, null, undefined and \"auto\" are converted to 0.\n			return !result || result === \"auto\" ? 0 : result;\n		},\n		set: function( tween ) {\n\n			// Use step hook for back compat.\n			// Use cssHook if its there.\n			// Use .style if available and use plain properties where available.\n			if ( jQuery.fx.step[ tween.prop ] ) {\n				jQuery.fx.step[ tween.prop ]( tween );\n			} else if ( tween.elem.nodeType === 1 &&\n				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n					jQuery.cssHooks[ tween.prop ] ) ) {\n				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n			} else {\n				tween.elem[ tween.prop ] = tween.now;\n			}\n		}\n	}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n	set: function( tween ) {\n		if ( tween.elem.nodeType && tween.elem.parentNode ) {\n			tween.elem[ tween.prop ] = tween.now;\n		}\n	}\n};\n\njQuery.easing = {\n	linear: function( p ) {\n		return p;\n	},\n	swing: function( p ) {\n		return 0.5 - Math.cos( p * Math.PI ) / 2;\n	},\n	_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n	fxNow, inProgress,\n	rfxtypes = /^(?:toggle|show|hide)$/,\n	rrun = /queueHooks$/;\n\nfunction schedule() {\n	if ( inProgress ) {\n		if ( document.hidden === false && window.requestAnimationFrame ) {\n			window.requestAnimationFrame( schedule );\n		} else {\n			window.setTimeout( schedule, jQuery.fx.interval );\n		}\n\n		jQuery.fx.tick();\n	}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n	window.setTimeout( function() {\n		fxNow = undefined;\n	} );\n	return ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n	var which,\n		i = 0,\n		attrs = { height: type };\n\n	// If we include width, step value is 1 to do all cssExpand values,\n	// otherwise step value is 2 to skip over Left and Right\n	includeWidth = includeWidth ? 1 : 0;\n	for ( ; i < 4; i += 2 - includeWidth ) {\n		which = cssExpand[ i ];\n		attrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n	}\n\n	if ( includeWidth ) {\n		attrs.opacity = attrs.width = type;\n	}\n\n	return attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n	var tween,\n		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n		index = 0,\n		length = collection.length;\n	for ( ; index < length; index++ ) {\n		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n			// We're done with this property\n			return tween;\n		}\n	}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n		isBox = \"width\" in props || \"height\" in props,\n		anim = this,\n		orig = {},\n		style = elem.style,\n		hidden = elem.nodeType && isHiddenWithinTree( elem ),\n		dataShow = dataPriv.get( elem, \"fxshow\" );\n\n	// Queue-skipping animations hijack the fx hooks\n	if ( !opts.queue ) {\n		hooks = jQuery._queueHooks( elem, \"fx\" );\n		if ( hooks.unqueued == null ) {\n			hooks.unqueued = 0;\n			oldfire = hooks.empty.fire;\n			hooks.empty.fire = function() {\n				if ( !hooks.unqueued ) {\n					oldfire();\n				}\n			};\n		}\n		hooks.unqueued++;\n\n		anim.always( function() {\n\n			// Ensure the complete handler is called before this completes\n			anim.always( function() {\n				hooks.unqueued--;\n				if ( !jQuery.queue( elem, \"fx\" ).length ) {\n					hooks.empty.fire();\n				}\n			} );\n		} );\n	}\n\n	// Detect show/hide animations\n	for ( prop in props ) {\n		value = props[ prop ];\n		if ( rfxtypes.test( value ) ) {\n			delete props[ prop ];\n			toggle = toggle || value === \"toggle\";\n			if ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n				// Pretend to be hidden if this is a \"show\" and\n				// there is still data from a stopped show/hide\n				if ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n					hidden = true;\n\n				// Ignore all other no-op show/hide data\n				} else {\n					continue;\n				}\n			}\n			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n		}\n	}\n\n	// Bail out if this is a no-op like .hide().hide()\n	propTween = !jQuery.isEmptyObject( props );\n	if ( !propTween && jQuery.isEmptyObject( orig ) ) {\n		return;\n	}\n\n	// Restrict \"overflow\" and \"display\" styles during box animations\n	if ( isBox && elem.nodeType === 1 ) {\n\n		// Support: IE <=9 - 11, Edge 12 - 13\n		// Record all 3 overflow attributes because IE does not infer the shorthand\n		// from identically-valued overflowX and overflowY\n		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n		// Identify a display type, preferring old show/hide data over the CSS cascade\n		restoreDisplay = dataShow && dataShow.display;\n		if ( restoreDisplay == null ) {\n			restoreDisplay = dataPriv.get( elem, \"display\" );\n		}\n		display = jQuery.css( elem, \"display\" );\n		if ( display === \"none\" ) {\n			if ( restoreDisplay ) {\n				display = restoreDisplay;\n			} else {\n\n				// Get nonempty value(s) by temporarily forcing visibility\n				showHide( [ elem ], true );\n				restoreDisplay = elem.style.display || restoreDisplay;\n				display = jQuery.css( elem, \"display\" );\n				showHide( [ elem ] );\n			}\n		}\n\n		// Animate inline elements as inline-block\n		if ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n			if ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n				// Restore the original display value at the end of pure show/hide animations\n				if ( !propTween ) {\n					anim.done( function() {\n						style.display = restoreDisplay;\n					} );\n					if ( restoreDisplay == null ) {\n						display = style.display;\n						restoreDisplay = display === \"none\" ? \"\" : display;\n					}\n				}\n				style.display = \"inline-block\";\n			}\n		}\n	}\n\n	if ( opts.overflow ) {\n		style.overflow = \"hidden\";\n		anim.always( function() {\n			style.overflow = opts.overflow[ 0 ];\n			style.overflowX = opts.overflow[ 1 ];\n			style.overflowY = opts.overflow[ 2 ];\n		} );\n	}\n\n	// Implement show/hide animations\n	propTween = false;\n	for ( prop in orig ) {\n\n		// General show/hide setup for this element animation\n		if ( !propTween ) {\n			if ( dataShow ) {\n				if ( \"hidden\" in dataShow ) {\n					hidden = dataShow.hidden;\n				}\n			} else {\n				dataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n			}\n\n			// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n			if ( toggle ) {\n				dataShow.hidden = !hidden;\n			}\n\n			// Show elements before animating them\n			if ( hidden ) {\n				showHide( [ elem ], true );\n			}\n\n			/* eslint-disable no-loop-func */\n\n			anim.done( function() {\n\n			/* eslint-enable no-loop-func */\n\n				// The final step of a \"hide\" animation is actually hiding the element\n				if ( !hidden ) {\n					showHide( [ elem ] );\n				}\n				dataPriv.remove( elem, \"fxshow\" );\n				for ( prop in orig ) {\n					jQuery.style( elem, prop, orig[ prop ] );\n				}\n			} );\n		}\n\n		// Per-property setup\n		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n		if ( !( prop in dataShow ) ) {\n			dataShow[ prop ] = propTween.start;\n			if ( hidden ) {\n				propTween.end = propTween.start;\n				propTween.start = 0;\n			}\n		}\n	}\n}\n\nfunction propFilter( props, specialEasing ) {\n	var index, name, easing, value, hooks;\n\n	// camelCase, specialEasing and expand cssHook pass\n	for ( index in props ) {\n		name = jQuery.camelCase( index );\n		easing = specialEasing[ name ];\n		value = props[ index ];\n		if ( Array.isArray( value ) ) {\n			easing = value[ 1 ];\n			value = props[ index ] = value[ 0 ];\n		}\n\n		if ( index !== name ) {\n			props[ name ] = value;\n			delete props[ index ];\n		}\n\n		hooks = jQuery.cssHooks[ name ];\n		if ( hooks && \"expand\" in hooks ) {\n			value = hooks.expand( value );\n			delete props[ name ];\n\n			// Not quite $.extend, this won't overwrite existing keys.\n			// Reusing 'index' because we have the correct \"name\"\n			for ( index in value ) {\n				if ( !( index in props ) ) {\n					props[ index ] = value[ index ];\n					specialEasing[ index ] = easing;\n				}\n			}\n		} else {\n			specialEasing[ name ] = easing;\n		}\n	}\n}\n\nfunction Animation( elem, properties, options ) {\n	var result,\n		stopped,\n		index = 0,\n		length = Animation.prefilters.length,\n		deferred = jQuery.Deferred().always( function() {\n\n			// Don't match elem in the :animated selector\n			delete tick.elem;\n		} ),\n		tick = function() {\n			if ( stopped ) {\n				return false;\n			}\n			var currentTime = fxNow || createFxNow(),\n				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n				// Support: Android 2.3 only\n				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n				temp = remaining / animation.duration || 0,\n				percent = 1 - temp,\n				index = 0,\n				length = animation.tweens.length;\n\n			for ( ; index < length; index++ ) {\n				animation.tweens[ index ].run( percent );\n			}\n\n			deferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n			// If there's more to do, yield\n			if ( percent < 1 && length ) {\n				return remaining;\n			}\n\n			// If this was an empty animation, synthesize a final progress notification\n			if ( !length ) {\n				deferred.notifyWith( elem, [ animation, 1, 0 ] );\n			}\n\n			// Resolve the animation and report its conclusion\n			deferred.resolveWith( elem, [ animation ] );\n			return false;\n		},\n		animation = deferred.promise( {\n			elem: elem,\n			props: jQuery.extend( {}, properties ),\n			opts: jQuery.extend( true, {\n				specialEasing: {},\n				easing: jQuery.easing._default\n			}, options ),\n			originalProperties: properties,\n			originalOptions: options,\n			startTime: fxNow || createFxNow(),\n			duration: options.duration,\n			tweens: [],\n			createTween: function( prop, end ) {\n				var tween = jQuery.Tween( elem, animation.opts, prop, end,\n						animation.opts.specialEasing[ prop ] || animation.opts.easing );\n				animation.tweens.push( tween );\n				return tween;\n			},\n			stop: function( gotoEnd ) {\n				var index = 0,\n\n					// If we are going to the end, we want to run all the tweens\n					// otherwise we skip this part\n					length = gotoEnd ? animation.tweens.length : 0;\n				if ( stopped ) {\n					return this;\n				}\n				stopped = true;\n				for ( ; index < length; index++ ) {\n					animation.tweens[ index ].run( 1 );\n				}\n\n				// Resolve when we played the last frame; otherwise, reject\n				if ( gotoEnd ) {\n					deferred.notifyWith( elem, [ animation, 1, 0 ] );\n					deferred.resolveWith( elem, [ animation, gotoEnd ] );\n				} else {\n					deferred.rejectWith( elem, [ animation, gotoEnd ] );\n				}\n				return this;\n			}\n		} ),\n		props = animation.props;\n\n	propFilter( props, animation.opts.specialEasing );\n\n	for ( ; index < length; index++ ) {\n		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n		if ( result ) {\n			if ( jQuery.isFunction( result.stop ) ) {\n				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n					jQuery.proxy( result.stop, result );\n			}\n			return result;\n		}\n	}\n\n	jQuery.map( props, createTween, animation );\n\n	if ( jQuery.isFunction( animation.opts.start ) ) {\n		animation.opts.start.call( elem, animation );\n	}\n\n	// Attach callbacks from options\n	animation\n		.progress( animation.opts.progress )\n		.done( animation.opts.done, animation.opts.complete )\n		.fail( animation.opts.fail )\n		.always( animation.opts.always );\n\n	jQuery.fx.timer(\n		jQuery.extend( tick, {\n			elem: elem,\n			anim: animation,\n			queue: animation.opts.queue\n		} )\n	);\n\n	return animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n	tweeners: {\n		\"*\": [ function( prop, value ) {\n			var tween = this.createTween( prop, value );\n			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n			return tween;\n		} ]\n	},\n\n	tweener: function( props, callback ) {\n		if ( jQuery.isFunction( props ) ) {\n			callback = props;\n			props = [ \"*\" ];\n		} else {\n			props = props.match( rnothtmlwhite );\n		}\n\n		var prop,\n			index = 0,\n			length = props.length;\n\n		for ( ; index < length; index++ ) {\n			prop = props[ index ];\n			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n			Animation.tweeners[ prop ].unshift( callback );\n		}\n	},\n\n	prefilters: [ defaultPrefilter ],\n\n	prefilter: function( callback, prepend ) {\n		if ( prepend ) {\n			Animation.prefilters.unshift( callback );\n		} else {\n			Animation.prefilters.push( callback );\n		}\n	}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n	var opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n		complete: fn || !fn && easing ||\n			jQuery.isFunction( speed ) && speed,\n		duration: speed,\n		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n	};\n\n	// Go to the end state if fx are off\n	if ( jQuery.fx.off ) {\n		opt.duration = 0;\n\n	} else {\n		if ( typeof opt.duration !== \"number\" ) {\n			if ( opt.duration in jQuery.fx.speeds ) {\n				opt.duration = jQuery.fx.speeds[ opt.duration ];\n\n			} else {\n				opt.duration = jQuery.fx.speeds._default;\n			}\n		}\n	}\n\n	// Normalize opt.queue - true/undefined/null -> \"fx\"\n	if ( opt.queue == null || opt.queue === true ) {\n		opt.queue = \"fx\";\n	}\n\n	// Queueing\n	opt.old = opt.complete;\n\n	opt.complete = function() {\n		if ( jQuery.isFunction( opt.old ) ) {\n			opt.old.call( this );\n		}\n\n		if ( opt.queue ) {\n			jQuery.dequeue( this, opt.queue );\n		}\n	};\n\n	return opt;\n};\n\njQuery.fn.extend( {\n	fadeTo: function( speed, to, easing, callback ) {\n\n		// Show any hidden elements after setting opacity to 0\n		return this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n			// Animate to the value specified\n			.end().animate( { opacity: to }, speed, easing, callback );\n	},\n	animate: function( prop, speed, easing, callback ) {\n		var empty = jQuery.isEmptyObject( prop ),\n			optall = jQuery.speed( speed, easing, callback ),\n			doAnimation = function() {\n\n				// Operate on a copy of prop so per-property easing won't be lost\n				var anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n				// Empty animations, or finishing resolves immediately\n				if ( empty || dataPriv.get( this, \"finish\" ) ) {\n					anim.stop( true );\n				}\n			};\n			doAnimation.finish = doAnimation;\n\n		return empty || optall.queue === false ?\n			this.each( doAnimation ) :\n			this.queue( optall.queue, doAnimation );\n	},\n	stop: function( type, clearQueue, gotoEnd ) {\n		var stopQueue = function( hooks ) {\n			var stop = hooks.stop;\n			delete hooks.stop;\n			stop( gotoEnd );\n		};\n\n		if ( typeof type !== \"string\" ) {\n			gotoEnd = clearQueue;\n			clearQueue = type;\n			type = undefined;\n		}\n		if ( clearQueue && type !== false ) {\n			this.queue( type || \"fx\", [] );\n		}\n\n		return this.each( function() {\n			var dequeue = true,\n				index = type != null && type + \"queueHooks\",\n				timers = jQuery.timers,\n				data = dataPriv.get( this );\n\n			if ( index ) {\n				if ( data[ index ] && data[ index ].stop ) {\n					stopQueue( data[ index ] );\n				}\n			} else {\n				for ( index in data ) {\n					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n						stopQueue( data[ index ] );\n					}\n				}\n			}\n\n			for ( index = timers.length; index--; ) {\n				if ( timers[ index ].elem === this &&\n					( type == null || timers[ index ].queue === type ) ) {\n\n					timers[ index ].anim.stop( gotoEnd );\n					dequeue = false;\n					timers.splice( index, 1 );\n				}\n			}\n\n			// Start the next in the queue if the last step wasn't forced.\n			// Timers currently will call their complete callbacks, which\n			// will dequeue but only if they were gotoEnd.\n			if ( dequeue || !gotoEnd ) {\n				jQuery.dequeue( this, type );\n			}\n		} );\n	},\n	finish: function( type ) {\n		if ( type !== false ) {\n			type = type || \"fx\";\n		}\n		return this.each( function() {\n			var index,\n				data = dataPriv.get( this ),\n				queue = data[ type + \"queue\" ],\n				hooks = data[ type + \"queueHooks\" ],\n				timers = jQuery.timers,\n				length = queue ? queue.length : 0;\n\n			// Enable finishing flag on private data\n			data.finish = true;\n\n			// Empty the queue first\n			jQuery.queue( this, type, [] );\n\n			if ( hooks && hooks.stop ) {\n				hooks.stop.call( this, true );\n			}\n\n			// Look for any active animations, and finish them\n			for ( index = timers.length; index--; ) {\n				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n					timers[ index ].anim.stop( true );\n					timers.splice( index, 1 );\n				}\n			}\n\n			// Look for any animations in the old queue and finish them\n			for ( index = 0; index < length; index++ ) {\n				if ( queue[ index ] && queue[ index ].finish ) {\n					queue[ index ].finish.call( this );\n				}\n			}\n\n			// Turn off finishing flag\n			delete data.finish;\n		} );\n	}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n	var cssFn = jQuery.fn[ name ];\n	jQuery.fn[ name ] = function( speed, easing, callback ) {\n		return speed == null || typeof speed === \"boolean\" ?\n			cssFn.apply( this, arguments ) :\n			this.animate( genFx( name, true ), speed, easing, callback );\n	};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n	slideDown: genFx( \"show\" ),\n	slideUp: genFx( \"hide\" ),\n	slideToggle: genFx( \"toggle\" ),\n	fadeIn: { opacity: \"show\" },\n	fadeOut: { opacity: \"hide\" },\n	fadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n	jQuery.fn[ name ] = function( speed, easing, callback ) {\n		return this.animate( props, speed, easing, callback );\n	};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n	var timer,\n		i = 0,\n		timers = jQuery.timers;\n\n	fxNow = jQuery.now();\n\n	for ( ; i < timers.length; i++ ) {\n		timer = timers[ i ];\n\n		// Run the timer and safely remove it when done (allowing for external removal)\n		if ( !timer() && timers[ i ] === timer ) {\n			timers.splice( i--, 1 );\n		}\n	}\n\n	if ( !timers.length ) {\n		jQuery.fx.stop();\n	}\n	fxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n	jQuery.timers.push( timer );\n	jQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n	if ( inProgress ) {\n		return;\n	}\n\n	inProgress = true;\n	schedule();\n};\n\njQuery.fx.stop = function() {\n	inProgress = null;\n};\n\njQuery.fx.speeds = {\n	slow: 600,\n	fast: 200,\n\n	// Default speed\n	_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n	type = type || \"fx\";\n\n	return this.queue( type, function( next, hooks ) {\n		var timeout = window.setTimeout( next, time );\n		hooks.stop = function() {\n			window.clearTimeout( timeout );\n		};\n	} );\n};\n\n\n( function() {\n	var input = document.createElement( \"input\" ),\n		select = document.createElement( \"select\" ),\n		opt = select.appendChild( document.createElement( \"option\" ) );\n\n	input.type = \"checkbox\";\n\n	// Support: Android <=4.3 only\n	// Default value for a checkbox should be \"on\"\n	support.checkOn = input.value !== \"\";\n\n	// Support: IE <=11 only\n	// Must access selectedIndex to make default options select\n	support.optSelected = opt.selected;\n\n	// Support: IE <=11 only\n	// An input loses its value after becoming a radio\n	input = document.createElement( \"input\" );\n	input.value = \"t\";\n	input.type = \"radio\";\n	support.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n	attrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n	attr: function( name, value ) {\n		return access( this, jQuery.attr, name, value, arguments.length > 1 );\n	},\n\n	removeAttr: function( name ) {\n		return this.each( function() {\n			jQuery.removeAttr( this, name );\n		} );\n	}\n} );\n\njQuery.extend( {\n	attr: function( elem, name, value ) {\n		var ret, hooks,\n			nType = elem.nodeType;\n\n		// Don't get/set attributes on text, comment and attribute nodes\n		if ( nType === 3 || nType === 8 || nType === 2 ) {\n			return;\n		}\n\n		// Fallback to prop when attributes are not supported\n		if ( typeof elem.getAttribute === \"undefined\" ) {\n			return jQuery.prop( elem, name, value );\n		}\n\n		// Attribute hooks are determined by the lowercase version\n		// Grab necessary hook if one is defined\n		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n		}\n\n		if ( value !== undefined ) {\n			if ( value === null ) {\n				jQuery.removeAttr( elem, name );\n				return;\n			}\n\n			if ( hooks && \"set\" in hooks &&\n				( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n				return ret;\n			}\n\n			elem.setAttribute( name, value + \"\" );\n			return value;\n		}\n\n		if ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n			return ret;\n		}\n\n		ret = jQuery.find.attr( elem, name );\n\n		// Non-existent attributes return null, we normalize to undefined\n		return ret == null ? undefined : ret;\n	},\n\n	attrHooks: {\n		type: {\n			set: function( elem, value ) {\n				if ( !support.radioValue && value === \"radio\" &&\n					nodeName( elem, \"input\" ) ) {\n					var val = elem.value;\n					elem.setAttribute( \"type\", value );\n					if ( val ) {\n						elem.value = val;\n					}\n					return value;\n				}\n			}\n		}\n	},\n\n	removeAttr: function( elem, value ) {\n		var name,\n			i = 0,\n\n			// Attribute names can contain non-HTML whitespace characters\n			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n			attrNames = value && value.match( rnothtmlwhite );\n\n		if ( attrNames && elem.nodeType === 1 ) {\n			while ( ( name = attrNames[ i++ ] ) ) {\n				elem.removeAttribute( name );\n			}\n		}\n	}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n	set: function( elem, value, name ) {\n		if ( value === false ) {\n\n			// Remove boolean attributes when set to false\n			jQuery.removeAttr( elem, name );\n		} else {\n			elem.setAttribute( name, name );\n		}\n		return name;\n	}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n	var getter = attrHandle[ name ] || jQuery.find.attr;\n\n	attrHandle[ name ] = function( elem, name, isXML ) {\n		var ret, handle,\n			lowercaseName = name.toLowerCase();\n\n		if ( !isXML ) {\n\n			// Avoid an infinite loop by temporarily removing this function from the getter\n			handle = attrHandle[ lowercaseName ];\n			attrHandle[ lowercaseName ] = ret;\n			ret = getter( elem, name, isXML ) != null ?\n				lowercaseName :\n				null;\n			attrHandle[ lowercaseName ] = handle;\n		}\n		return ret;\n	};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n	rclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n	prop: function( name, value ) {\n		return access( this, jQuery.prop, name, value, arguments.length > 1 );\n	},\n\n	removeProp: function( name ) {\n		return this.each( function() {\n			delete this[ jQuery.propFix[ name ] || name ];\n		} );\n	}\n} );\n\njQuery.extend( {\n	prop: function( elem, name, value ) {\n		var ret, hooks,\n			nType = elem.nodeType;\n\n		// Don't get/set properties on text, comment and attribute nodes\n		if ( nType === 3 || nType === 8 || nType === 2 ) {\n			return;\n		}\n\n		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n			// Fix name and attach hooks\n			name = jQuery.propFix[ name ] || name;\n			hooks = jQuery.propHooks[ name ];\n		}\n\n		if ( value !== undefined ) {\n			if ( hooks && \"set\" in hooks &&\n				( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n				return ret;\n			}\n\n			return ( elem[ name ] = value );\n		}\n\n		if ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n			return ret;\n		}\n\n		return elem[ name ];\n	},\n\n	propHooks: {\n		tabIndex: {\n			get: function( elem ) {\n\n				// Support: IE <=9 - 11 only\n				// elem.tabIndex doesn't always return the\n				// correct value when it hasn't been explicitly set\n				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n				// Use proper attribute retrieval(#12072)\n				var tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n				if ( tabindex ) {\n					return parseInt( tabindex, 10 );\n				}\n\n				if (\n					rfocusable.test( elem.nodeName ) ||\n					rclickable.test( elem.nodeName ) &&\n					elem.href\n				) {\n					return 0;\n				}\n\n				return -1;\n			}\n		}\n	},\n\n	propFix: {\n		\"for\": \"htmlFor\",\n		\"class\": \"className\"\n	}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n	jQuery.propHooks.selected = {\n		get: function( elem ) {\n\n			/* eslint no-unused-expressions: \"off\" */\n\n			var parent = elem.parentNode;\n			if ( parent && parent.parentNode ) {\n				parent.parentNode.selectedIndex;\n			}\n			return null;\n		},\n		set: function( elem ) {\n\n			/* eslint no-unused-expressions: \"off\" */\n\n			var parent = elem.parentNode;\n			if ( parent ) {\n				parent.selectedIndex;\n\n				if ( parent.parentNode ) {\n					parent.parentNode.selectedIndex;\n				}\n			}\n		}\n	};\n}\n\njQuery.each( [\n	\"tabIndex\",\n	\"readOnly\",\n	\"maxLength\",\n	\"cellSpacing\",\n	\"cellPadding\",\n	\"rowSpan\",\n	\"colSpan\",\n	\"useMap\",\n	\"frameBorder\",\n	\"contentEditable\"\n], function() {\n	jQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n	// Strip and collapse whitespace according to HTML spec\n	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace\n	function stripAndCollapse( value ) {\n		var tokens = value.match( rnothtmlwhite ) || [];\n		return tokens.join( \" \" );\n	}\n\n\nfunction getClass( elem ) {\n	return elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\njQuery.fn.extend( {\n	addClass: function( value ) {\n		var classes, elem, cur, curValue, clazz, j, finalValue,\n			i = 0;\n\n		if ( jQuery.isFunction( value ) ) {\n			return this.each( function( j ) {\n				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n			} );\n		}\n\n		if ( typeof value === \"string\" && value ) {\n			classes = value.match( rnothtmlwhite ) || [];\n\n			while ( ( elem = this[ i++ ] ) ) {\n				curValue = getClass( elem );\n				cur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n				if ( cur ) {\n					j = 0;\n					while ( ( clazz = classes[ j++ ] ) ) {\n						if ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n							cur += clazz + \" \";\n						}\n					}\n\n					// Only assign if different to avoid unneeded rendering.\n					finalValue = stripAndCollapse( cur );\n					if ( curValue !== finalValue ) {\n						elem.setAttribute( \"class\", finalValue );\n					}\n				}\n			}\n		}\n\n		return this;\n	},\n\n	removeClass: function( value ) {\n		var classes, elem, cur, curValue, clazz, j, finalValue,\n			i = 0;\n\n		if ( jQuery.isFunction( value ) ) {\n			return this.each( function( j ) {\n				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n			} );\n		}\n\n		if ( !arguments.length ) {\n			return this.attr( \"class\", \"\" );\n		}\n\n		if ( typeof value === \"string\" && value ) {\n			classes = value.match( rnothtmlwhite ) || [];\n\n			while ( ( elem = this[ i++ ] ) ) {\n				curValue = getClass( elem );\n\n				// This expression is here for better compressibility (see addClass)\n				cur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n				if ( cur ) {\n					j = 0;\n					while ( ( clazz = classes[ j++ ] ) ) {\n\n						// Remove *all* instances\n						while ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n							cur = cur.replace( \" \" + clazz + \" \", \" \" );\n						}\n					}\n\n					// Only assign if different to avoid unneeded rendering.\n					finalValue = stripAndCollapse( cur );\n					if ( curValue !== finalValue ) {\n						elem.setAttribute( \"class\", finalValue );\n					}\n				}\n			}\n		}\n\n		return this;\n	},\n\n	toggleClass: function( value, stateVal ) {\n		var type = typeof value;\n\n		if ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n			return stateVal ? this.addClass( value ) : this.removeClass( value );\n		}\n\n		if ( jQuery.isFunction( value ) ) {\n			return this.each( function( i ) {\n				jQuery( this ).toggleClass(\n					value.call( this, i, getClass( this ), stateVal ),\n					stateVal\n				);\n			} );\n		}\n\n		return this.each( function() {\n			var className, i, self, classNames;\n\n			if ( type === \"string\" ) {\n\n				// Toggle individual class names\n				i = 0;\n				self = jQuery( this );\n				classNames = value.match( rnothtmlwhite ) || [];\n\n				while ( ( className = classNames[ i++ ] ) ) {\n\n					// Check each className given, space separated list\n					if ( self.hasClass( className ) ) {\n						self.removeClass( className );\n					} else {\n						self.addClass( className );\n					}\n				}\n\n			// Toggle whole class name\n			} else if ( value === undefined || type === \"boolean\" ) {\n				className = getClass( this );\n				if ( className ) {\n\n					// Store className if set\n					dataPriv.set( this, \"__className__\", className );\n				}\n\n				// If the element has a class name or if we're passed `false`,\n				// then remove the whole classname (if there was one, the above saved it).\n				// Otherwise bring back whatever was previously saved (if anything),\n				// falling back to the empty string if nothing was stored.\n				if ( this.setAttribute ) {\n					this.setAttribute( \"class\",\n						className || value === false ?\n						\"\" :\n						dataPriv.get( this, \"__className__\" ) || \"\"\n					);\n				}\n			}\n		} );\n	},\n\n	hasClass: function( selector ) {\n		var className, elem,\n			i = 0;\n\n		className = \" \" + selector + \" \";\n		while ( ( elem = this[ i++ ] ) ) {\n			if ( elem.nodeType === 1 &&\n				( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n					return true;\n			}\n		}\n\n		return false;\n	}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n	val: function( value ) {\n		var hooks, ret, isFunction,\n			elem = this[ 0 ];\n\n		if ( !arguments.length ) {\n			if ( elem ) {\n				hooks = jQuery.valHooks[ elem.type ] ||\n					jQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n				if ( hooks &&\n					\"get\" in hooks &&\n					( ret = hooks.get( elem, \"value\" ) ) !== undefined\n				) {\n					return ret;\n				}\n\n				ret = elem.value;\n\n				// Handle most common string cases\n				if ( typeof ret === \"string\" ) {\n					return ret.replace( rreturn, \"\" );\n				}\n\n				// Handle cases where value is null/undef or number\n				return ret == null ? \"\" : ret;\n			}\n\n			return;\n		}\n\n		isFunction = jQuery.isFunction( value );\n\n		return this.each( function( i ) {\n			var val;\n\n			if ( this.nodeType !== 1 ) {\n				return;\n			}\n\n			if ( isFunction ) {\n				val = value.call( this, i, jQuery( this ).val() );\n			} else {\n				val = value;\n			}\n\n			// Treat null/undefined as \"\"; convert numbers to string\n			if ( val == null ) {\n				val = \"\";\n\n			} else if ( typeof val === \"number\" ) {\n				val += \"\";\n\n			} else if ( Array.isArray( val ) ) {\n				val = jQuery.map( val, function( value ) {\n					return value == null ? \"\" : value + \"\";\n				} );\n			}\n\n			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n			// If set returns undefined, fall back to normal setting\n			if ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n				this.value = val;\n			}\n		} );\n	}\n} );\n\njQuery.extend( {\n	valHooks: {\n		option: {\n			get: function( elem ) {\n\n				var val = jQuery.find.attr( elem, \"value\" );\n				return val != null ?\n					val :\n\n					// Support: IE <=10 - 11 only\n					// option.text throws exceptions (#14686, #14858)\n					// Strip and collapse whitespace\n					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n					stripAndCollapse( jQuery.text( elem ) );\n			}\n		},\n		select: {\n			get: function( elem ) {\n				var value, option, i,\n					options = elem.options,\n					index = elem.selectedIndex,\n					one = elem.type === \"select-one\",\n					values = one ? null : [],\n					max = one ? index + 1 : options.length;\n\n				if ( index < 0 ) {\n					i = max;\n\n				} else {\n					i = one ? index : 0;\n				}\n\n				// Loop through all the selected options\n				for ( ; i < max; i++ ) {\n					option = options[ i ];\n\n					// Support: IE <=9 only\n					// IE8-9 doesn't update selected after form reset (#2551)\n					if ( ( option.selected || i === index ) &&\n\n							// Don't return options that are disabled or in a disabled optgroup\n							!option.disabled &&\n							( !option.parentNode.disabled ||\n								!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n						// Get the specific value for the option\n						value = jQuery( option ).val();\n\n						// We don't need an array for one selects\n						if ( one ) {\n							return value;\n						}\n\n						// Multi-Selects return an array\n						values.push( value );\n					}\n				}\n\n				return values;\n			},\n\n			set: function( elem, value ) {\n				var optionSet, option,\n					options = elem.options,\n					values = jQuery.makeArray( value ),\n					i = options.length;\n\n				while ( i-- ) {\n					option = options[ i ];\n\n					/* eslint-disable no-cond-assign */\n\n					if ( option.selected =\n						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n					) {\n						optionSet = true;\n					}\n\n					/* eslint-enable no-cond-assign */\n				}\n\n				// Force browsers to behave consistently when non-matching value is set\n				if ( !optionSet ) {\n					elem.selectedIndex = -1;\n				}\n				return values;\n			}\n		}\n	}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n	jQuery.valHooks[ this ] = {\n		set: function( elem, value ) {\n			if ( Array.isArray( value ) ) {\n				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n			}\n		}\n	};\n	if ( !support.checkOn ) {\n		jQuery.valHooks[ this ].get = function( elem ) {\n			return elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n		};\n	}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n	trigger: function( event, data, elem, onlyHandlers ) {\n\n		var i, cur, tmp, bubbleType, ontype, handle, special,\n			eventPath = [ elem || document ],\n			type = hasOwn.call( event, \"type\" ) ? event.type : event,\n			namespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n		cur = tmp = elem = elem || document;\n\n		// Don't do events on text and comment nodes\n		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n			return;\n		}\n\n		// focus/blur morphs to focusin/out; ensure we're not firing them right now\n		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n			return;\n		}\n\n		if ( type.indexOf( \".\" ) > -1 ) {\n\n			// Namespaced trigger; create a regexp to match event type in handle()\n			namespaces = type.split( \".\" );\n			type = namespaces.shift();\n			namespaces.sort();\n		}\n		ontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n		// Caller can pass in a jQuery.Event object, Object, or just an event type string\n		event = event[ jQuery.expando ] ?\n			event :\n			new jQuery.Event( type, typeof event === \"object\" && event );\n\n		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n		event.isTrigger = onlyHandlers ? 2 : 3;\n		event.namespace = namespaces.join( \".\" );\n		event.rnamespace = event.namespace ?\n			new RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n			null;\n\n		// Clean up the event in case it is being reused\n		event.result = undefined;\n		if ( !event.target ) {\n			event.target = elem;\n		}\n\n		// Clone any incoming data and prepend the event, creating the handler arg list\n		data = data == null ?\n			[ event ] :\n			jQuery.makeArray( data, [ event ] );\n\n		// Allow special events to draw outside the lines\n		special = jQuery.event.special[ type ] || {};\n		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n			return;\n		}\n\n		// Determine event propagation path in advance, per W3C events spec (#9951)\n		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n			bubbleType = special.delegateType || type;\n			if ( !rfocusMorph.test( bubbleType + type ) ) {\n				cur = cur.parentNode;\n			}\n			for ( ; cur; cur = cur.parentNode ) {\n				eventPath.push( cur );\n				tmp = cur;\n			}\n\n			// Only add window if we got to document (e.g., not plain obj or detached DOM)\n			if ( tmp === ( elem.ownerDocument || document ) ) {\n				eventPath.push( tmp.defaultView || tmp.parentWindow || window );\n			}\n		}\n\n		// Fire handlers on the event path\n		i = 0;\n		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n			event.type = i > 1 ?\n				bubbleType :\n				special.bindType || type;\n\n			// jQuery handler\n			handle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n				dataPriv.get( cur, \"handle\" );\n			if ( handle ) {\n				handle.apply( cur, data );\n			}\n\n			// Native handler\n			handle = ontype && cur[ ontype ];\n			if ( handle && handle.apply && acceptData( cur ) ) {\n				event.result = handle.apply( cur, data );\n				if ( event.result === false ) {\n					event.preventDefault();\n				}\n			}\n		}\n		event.type = type;\n\n		// If nobody prevented the default action, do it now\n		if ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n			if ( ( !special._default ||\n				special._default.apply( eventPath.pop(), data ) === false ) &&\n				acceptData( elem ) ) {\n\n				// Call a native DOM method on the target with the same name as the event.\n				// Don't do default actions on window, that's where global variables be (#6170)\n				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n					// Don't re-trigger an onFOO event when we call its FOO() method\n					tmp = elem[ ontype ];\n\n					if ( tmp ) {\n						elem[ ontype ] = null;\n					}\n\n					// Prevent re-triggering of the same event, since we already bubbled it above\n					jQuery.event.triggered = type;\n					elem[ type ]();\n					jQuery.event.triggered = undefined;\n\n					if ( tmp ) {\n						elem[ ontype ] = tmp;\n					}\n				}\n			}\n		}\n\n		return event.result;\n	},\n\n	// Piggyback on a donor event to simulate a different one\n	// Used only for `focus(in | out)` events\n	simulate: function( type, elem, event ) {\n		var e = jQuery.extend(\n			new jQuery.Event(),\n			event,\n			{\n				type: type,\n				isSimulated: true\n			}\n		);\n\n		jQuery.event.trigger( e, null, elem );\n	}\n\n} );\n\njQuery.fn.extend( {\n\n	trigger: function( type, data ) {\n		return this.each( function() {\n			jQuery.event.trigger( type, data, this );\n		} );\n	},\n	triggerHandler: function( type, data ) {\n		var elem = this[ 0 ];\n		if ( elem ) {\n			return jQuery.event.trigger( type, data, elem, true );\n		}\n	}\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n	\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n	\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n	function( i, name ) {\n\n	// Handle event binding\n	jQuery.fn[ name ] = function( data, fn ) {\n		return arguments.length > 0 ?\n			this.on( name, null, data, fn ) :\n			this.trigger( name );\n	};\n} );\n\njQuery.fn.extend( {\n	hover: function( fnOver, fnOut ) {\n		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n	}\n} );\n\n\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n	jQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n		// Attach a single capturing handler on the document while someone wants focusin/focusout\n		var handler = function( event ) {\n			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n		};\n\n		jQuery.event.special[ fix ] = {\n			setup: function() {\n				var doc = this.ownerDocument || this,\n					attaches = dataPriv.access( doc, fix );\n\n				if ( !attaches ) {\n					doc.addEventListener( orig, handler, true );\n				}\n				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n			},\n			teardown: function() {\n				var doc = this.ownerDocument || this,\n					attaches = dataPriv.access( doc, fix ) - 1;\n\n				if ( !attaches ) {\n					doc.removeEventListener( orig, handler, true );\n					dataPriv.remove( doc, fix );\n\n				} else {\n					dataPriv.access( doc, fix, attaches );\n				}\n			}\n		};\n	} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n	var xml;\n	if ( !data || typeof data !== \"string\" ) {\n		return null;\n	}\n\n	// Support: IE 9 - 11 only\n	// IE throws on parseFromString with invalid input.\n	try {\n		xml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n	} catch ( e ) {\n		xml = undefined;\n	}\n\n	if ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n		jQuery.error( \"Invalid XML: \" + data );\n	}\n	return xml;\n};\n\n\nvar\n	rbracket = /\\[\\]$/,\n	rCRLF = /\\r?\\n/g,\n	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n	rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n	var name;\n\n	if ( Array.isArray( obj ) ) {\n\n		// Serialize array item.\n		jQuery.each( obj, function( i, v ) {\n			if ( traditional || rbracket.test( prefix ) ) {\n\n				// Treat each array item as a scalar.\n				add( prefix, v );\n\n			} else {\n\n				// Item is non-scalar (array or object), encode its numeric index.\n				buildParams(\n					prefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n					v,\n					traditional,\n					add\n				);\n			}\n		} );\n\n	} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\n		// Serialize object item.\n		for ( name in obj ) {\n			buildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n		}\n\n	} else {\n\n		// Serialize scalar item.\n		add( prefix, obj );\n	}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n	var prefix,\n		s = [],\n		add = function( key, valueOrFunction ) {\n\n			// If value is a function, invoke it and use its return value\n			var value = jQuery.isFunction( valueOrFunction ) ?\n				valueOrFunction() :\n				valueOrFunction;\n\n			s[ s.length ] = encodeURIComponent( key ) + \"=\" +\n				encodeURIComponent( value == null ? \"\" : value );\n		};\n\n	// If an array was passed in, assume that it is an array of form elements.\n	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n		// Serialize the form elements\n		jQuery.each( a, function() {\n			add( this.name, this.value );\n		} );\n\n	} else {\n\n		// If traditional, encode the \"old\" way (the way 1.3.2 or older\n		// did it), otherwise encode params recursively.\n		for ( prefix in a ) {\n			buildParams( prefix, a[ prefix ], traditional, add );\n		}\n	}\n\n	// Return the resulting serialization\n	return s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n	serialize: function() {\n		return jQuery.param( this.serializeArray() );\n	},\n	serializeArray: function() {\n		return this.map( function() {\n\n			// Can add propHook for \"elements\" to filter or add form elements\n			var elements = jQuery.prop( this, \"elements\" );\n			return elements ? jQuery.makeArray( elements ) : this;\n		} )\n		.filter( function() {\n			var type = this.type;\n\n			// Use .is( \":disabled\" ) so that fieldset[disabled] works\n			return this.name && !jQuery( this ).is( \":disabled\" ) &&\n				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n				( this.checked || !rcheckableType.test( type ) );\n		} )\n		.map( function( i, elem ) {\n			var val = jQuery( this ).val();\n\n			if ( val == null ) {\n				return null;\n			}\n\n			if ( Array.isArray( val ) ) {\n				return jQuery.map( val, function( val ) {\n					return { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n				} );\n			}\n\n			return { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n		} ).get();\n	}\n} );\n\n\nvar\n	r20 = /%20/g,\n	rhash = /#.*$/,\n	rantiCache = /([?&])_=[^&]*/,\n	rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n	// #7653, #8125, #8152: local protocol detection\n	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n	rnoContent = /^(?:GET|HEAD)$/,\n	rprotocol = /^\\/\\//,\n\n	/* Prefilters\n	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n	 * 2) These are called:\n	 *    - BEFORE asking for a transport\n	 *    - AFTER param serialization (s.data is a string if s.processData is true)\n	 * 3) key is the dataType\n	 * 4) the catchall symbol \"*\" can be used\n	 * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n	 */\n	prefilters = {},\n\n	/* Transports bindings\n	 * 1) key is the dataType\n	 * 2) the catchall symbol \"*\" can be used\n	 * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n	 */\n	transports = {},\n\n	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n	allTypes = \"*/\".concat( \"*\" ),\n\n	// Anchor tag for parsing the document origin\n	originAnchor = document.createElement( \"a\" );\n	originAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n	// dataTypeExpression is optional and defaults to \"*\"\n	return function( dataTypeExpression, func ) {\n\n		if ( typeof dataTypeExpression !== \"string\" ) {\n			func = dataTypeExpression;\n			dataTypeExpression = \"*\";\n		}\n\n		var dataType,\n			i = 0,\n			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n		if ( jQuery.isFunction( func ) ) {\n\n			// For each dataType in the dataTypeExpression\n			while ( ( dataType = dataTypes[ i++ ] ) ) {\n\n				// Prepend if requested\n				if ( dataType[ 0 ] === \"+\" ) {\n					dataType = dataType.slice( 1 ) || \"*\";\n					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n				// Otherwise append\n				} else {\n					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n				}\n			}\n		}\n	};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n	var inspected = {},\n		seekingTransport = ( structure === transports );\n\n	function inspect( dataType ) {\n		var selected;\n		inspected[ dataType ] = true;\n		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n			if ( typeof dataTypeOrTransport === \"string\" &&\n				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n				options.dataTypes.unshift( dataTypeOrTransport );\n				inspect( dataTypeOrTransport );\n				return false;\n			} else if ( seekingTransport ) {\n				return !( selected = dataTypeOrTransport );\n			}\n		} );\n		return selected;\n	}\n\n	return inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n	var key, deep,\n		flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n	for ( key in src ) {\n		if ( src[ key ] !== undefined ) {\n			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n		}\n	}\n	if ( deep ) {\n		jQuery.extend( true, target, deep );\n	}\n\n	return target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n	var ct, type, finalDataType, firstDataType,\n		contents = s.contents,\n		dataTypes = s.dataTypes;\n\n	// Remove auto dataType and get content-type in the process\n	while ( dataTypes[ 0 ] === \"*\" ) {\n		dataTypes.shift();\n		if ( ct === undefined ) {\n			ct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n		}\n	}\n\n	// Check if we're dealing with a known content-type\n	if ( ct ) {\n		for ( type in contents ) {\n			if ( contents[ type ] && contents[ type ].test( ct ) ) {\n				dataTypes.unshift( type );\n				break;\n			}\n		}\n	}\n\n	// Check to see if we have a response for the expected dataType\n	if ( dataTypes[ 0 ] in responses ) {\n		finalDataType = dataTypes[ 0 ];\n	} else {\n\n		// Try convertible dataTypes\n		for ( type in responses ) {\n			if ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n				finalDataType = type;\n				break;\n			}\n			if ( !firstDataType ) {\n				firstDataType = type;\n			}\n		}\n\n		// Or just use first one\n		finalDataType = finalDataType || firstDataType;\n	}\n\n	// If we found a dataType\n	// We add the dataType to the list if needed\n	// and return the corresponding response\n	if ( finalDataType ) {\n		if ( finalDataType !== dataTypes[ 0 ] ) {\n			dataTypes.unshift( finalDataType );\n		}\n		return responses[ finalDataType ];\n	}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n	var conv2, current, conv, tmp, prev,\n		converters = {},\n\n		// Work with a copy of dataTypes in case we need to modify it for conversion\n		dataTypes = s.dataTypes.slice();\n\n	// Create converters map with lowercased keys\n	if ( dataTypes[ 1 ] ) {\n		for ( conv in s.converters ) {\n			converters[ conv.toLowerCase() ] = s.converters[ conv ];\n		}\n	}\n\n	current = dataTypes.shift();\n\n	// Convert to each sequential dataType\n	while ( current ) {\n\n		if ( s.responseFields[ current ] ) {\n			jqXHR[ s.responseFields[ current ] ] = response;\n		}\n\n		// Apply the dataFilter if provided\n		if ( !prev && isSuccess && s.dataFilter ) {\n			response = s.dataFilter( response, s.dataType );\n		}\n\n		prev = current;\n		current = dataTypes.shift();\n\n		if ( current ) {\n\n			// There's only work to do if current dataType is non-auto\n			if ( current === \"*\" ) {\n\n				current = prev;\n\n			// Convert response if prev dataType is non-auto and differs from current\n			} else if ( prev !== \"*\" && prev !== current ) {\n\n				// Seek a direct converter\n				conv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n				// If none found, seek a pair\n				if ( !conv ) {\n					for ( conv2 in converters ) {\n\n						// If conv2 outputs current\n						tmp = conv2.split( \" \" );\n						if ( tmp[ 1 ] === current ) {\n\n							// If prev can be converted to accepted input\n							conv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n								converters[ \"* \" + tmp[ 0 ] ];\n							if ( conv ) {\n\n								// Condense equivalence converters\n								if ( conv === true ) {\n									conv = converters[ conv2 ];\n\n								// Otherwise, insert the intermediate dataType\n								} else if ( converters[ conv2 ] !== true ) {\n									current = tmp[ 0 ];\n									dataTypes.unshift( tmp[ 1 ] );\n								}\n								break;\n							}\n						}\n					}\n				}\n\n				// Apply converter (if not an equivalence)\n				if ( conv !== true ) {\n\n					// Unless errors are allowed to bubble, catch and return them\n					if ( conv && s.throws ) {\n						response = conv( response );\n					} else {\n						try {\n							response = conv( response );\n						} catch ( e ) {\n							return {\n								state: \"parsererror\",\n								error: conv ? e : \"No conversion from \" + prev + \" to \" + current\n							};\n						}\n					}\n				}\n			}\n		}\n	}\n\n	return { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n	// Counter for holding the number of active queries\n	active: 0,\n\n	// Last-Modified header cache for next request\n	lastModified: {},\n	etag: {},\n\n	ajaxSettings: {\n		url: location.href,\n		type: \"GET\",\n		isLocal: rlocalProtocol.test( location.protocol ),\n		global: true,\n		processData: true,\n		async: true,\n		contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n		/*\n		timeout: 0,\n		data: null,\n		dataType: null,\n		username: null,\n		password: null,\n		cache: null,\n		throws: false,\n		traditional: false,\n		headers: {},\n		*/\n\n		accepts: {\n			\"*\": allTypes,\n			text: \"text/plain\",\n			html: \"text/html\",\n			xml: \"application/xml, text/xml\",\n			json: \"application/json, text/javascript\"\n		},\n\n		contents: {\n			xml: /\\bxml\\b/,\n			html: /\\bhtml/,\n			json: /\\bjson\\b/\n		},\n\n		responseFields: {\n			xml: \"responseXML\",\n			text: \"responseText\",\n			json: \"responseJSON\"\n		},\n\n		// Data converters\n		// Keys separate source (or catchall \"*\") and destination types with a single space\n		converters: {\n\n			// Convert anything to text\n			\"* text\": String,\n\n			// Text to html (true = no transformation)\n			\"text html\": true,\n\n			// Evaluate text as a json expression\n			\"text json\": JSON.parse,\n\n			// Parse text as xml\n			\"text xml\": jQuery.parseXML\n		},\n\n		// For options that shouldn't be deep extended:\n		// you can add your own custom options here if\n		// and when you create one that shouldn't be\n		// deep extended (see ajaxExtend)\n		flatOptions: {\n			url: true,\n			context: true\n		}\n	},\n\n	// Creates a full fledged settings object into target\n	// with both ajaxSettings and settings fields.\n	// If target is omitted, writes into ajaxSettings.\n	ajaxSetup: function( target, settings ) {\n		return settings ?\n\n			// Building a settings object\n			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n			// Extending ajaxSettings\n			ajaxExtend( jQuery.ajaxSettings, target );\n	},\n\n	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n	ajaxTransport: addToPrefiltersOrTransports( transports ),\n\n	// Main method\n	ajax: function( url, options ) {\n\n		// If url is an object, simulate pre-1.5 signature\n		if ( typeof url === \"object\" ) {\n			options = url;\n			url = undefined;\n		}\n\n		// Force options to be an object\n		options = options || {};\n\n		var transport,\n\n			// URL without anti-cache param\n			cacheURL,\n\n			// Response headers\n			responseHeadersString,\n			responseHeaders,\n\n			// timeout handle\n			timeoutTimer,\n\n			// Url cleanup var\n			urlAnchor,\n\n			// Request state (becomes false upon send and true upon completion)\n			completed,\n\n			// To know if global events are to be dispatched\n			fireGlobals,\n\n			// Loop variable\n			i,\n\n			// uncached part of the url\n			uncached,\n\n			// Create the final options object\n			s = jQuery.ajaxSetup( {}, options ),\n\n			// Callbacks context\n			callbackContext = s.context || s,\n\n			// Context for global events is callbackContext if it is a DOM node or jQuery collection\n			globalEventContext = s.context &&\n				( callbackContext.nodeType || callbackContext.jquery ) ?\n					jQuery( callbackContext ) :\n					jQuery.event,\n\n			// Deferreds\n			deferred = jQuery.Deferred(),\n			completeDeferred = jQuery.Callbacks( \"once memory\" ),\n\n			// Status-dependent callbacks\n			statusCode = s.statusCode || {},\n\n			// Headers (they are sent all at once)\n			requestHeaders = {},\n			requestHeadersNames = {},\n\n			// Default abort message\n			strAbort = \"canceled\",\n\n			// Fake xhr\n			jqXHR = {\n				readyState: 0,\n\n				// Builds headers hashtable if needed\n				getResponseHeader: function( key ) {\n					var match;\n					if ( completed ) {\n						if ( !responseHeaders ) {\n							responseHeaders = {};\n							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n							}\n						}\n						match = responseHeaders[ key.toLowerCase() ];\n					}\n					return match == null ? null : match;\n				},\n\n				// Raw string\n				getAllResponseHeaders: function() {\n					return completed ? responseHeadersString : null;\n				},\n\n				// Caches the header\n				setRequestHeader: function( name, value ) {\n					if ( completed == null ) {\n						name = requestHeadersNames[ name.toLowerCase() ] =\n							requestHeadersNames[ name.toLowerCase() ] || name;\n						requestHeaders[ name ] = value;\n					}\n					return this;\n				},\n\n				// Overrides response content-type header\n				overrideMimeType: function( type ) {\n					if ( completed == null ) {\n						s.mimeType = type;\n					}\n					return this;\n				},\n\n				// Status-dependent callbacks\n				statusCode: function( map ) {\n					var code;\n					if ( map ) {\n						if ( completed ) {\n\n							// Execute the appropriate callbacks\n							jqXHR.always( map[ jqXHR.status ] );\n						} else {\n\n							// Lazy-add the new callbacks in a way that preserves old ones\n							for ( code in map ) {\n								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n							}\n						}\n					}\n					return this;\n				},\n\n				// Cancel the request\n				abort: function( statusText ) {\n					var finalText = statusText || strAbort;\n					if ( transport ) {\n						transport.abort( finalText );\n					}\n					done( 0, finalText );\n					return this;\n				}\n			};\n\n		// Attach deferreds\n		deferred.promise( jqXHR );\n\n		// Add protocol if not provided (prefilters might expect it)\n		// Handle falsy url in the settings object (#10093: consistency with old signature)\n		// We also use the url parameter if available\n		s.url = ( ( url || s.url || location.href ) + \"\" )\n			.replace( rprotocol, location.protocol + \"//\" );\n\n		// Alias method option to type as per ticket #12004\n		s.type = options.method || options.type || s.method || s.type;\n\n		// Extract dataTypes list\n		s.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n		// A cross-domain request is in order when the origin doesn't match the current origin.\n		if ( s.crossDomain == null ) {\n			urlAnchor = document.createElement( \"a\" );\n\n			// Support: IE <=8 - 11, Edge 12 - 13\n			// IE throws exception on accessing the href property if url is malformed,\n			// e.g. http://example.com:80x/\n			try {\n				urlAnchor.href = s.url;\n\n				// Support: IE <=8 - 11 only\n				// Anchor's host property isn't correctly set when s.url is relative\n				urlAnchor.href = urlAnchor.href;\n				s.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n					urlAnchor.protocol + \"//\" + urlAnchor.host;\n			} catch ( e ) {\n\n				// If there is an error parsing the URL, assume it is crossDomain,\n				// it can be rejected by the transport if it is invalid\n				s.crossDomain = true;\n			}\n		}\n\n		// Convert data if not already a string\n		if ( s.data && s.processData && typeof s.data !== \"string\" ) {\n			s.data = jQuery.param( s.data, s.traditional );\n		}\n\n		// Apply prefilters\n		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n		// If request was aborted inside a prefilter, stop there\n		if ( completed ) {\n			return jqXHR;\n		}\n\n		// We can fire global events as of now if asked to\n		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n		fireGlobals = jQuery.event && s.global;\n\n		// Watch for a new set of requests\n		if ( fireGlobals && jQuery.active++ === 0 ) {\n			jQuery.event.trigger( \"ajaxStart\" );\n		}\n\n		// Uppercase the type\n		s.type = s.type.toUpperCase();\n\n		// Determine if request has content\n		s.hasContent = !rnoContent.test( s.type );\n\n		// Save the URL in case we're toying with the If-Modified-Since\n		// and/or If-None-Match header later on\n		// Remove hash to simplify url manipulation\n		cacheURL = s.url.replace( rhash, \"\" );\n\n		// More options handling for requests with no content\n		if ( !s.hasContent ) {\n\n			// Remember the hash so we can put it back\n			uncached = s.url.slice( cacheURL.length );\n\n			// If data is available, append data to url\n			if ( s.data ) {\n				cacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n				// #9682: remove data so that it's not used in an eventual retry\n				delete s.data;\n			}\n\n			// Add or update anti-cache param if needed\n			if ( s.cache === false ) {\n				cacheURL = cacheURL.replace( rantiCache, \"$1\" );\n				uncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n			}\n\n			// Put hash and anti-cache on the URL that will be requested (gh-1732)\n			s.url = cacheURL + uncached;\n\n		// Change '%20' to '+' if this is encoded form body content (gh-2658)\n		} else if ( s.data && s.processData &&\n			( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n			s.data = s.data.replace( r20, \"+\" );\n		}\n\n		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n		if ( s.ifModified ) {\n			if ( jQuery.lastModified[ cacheURL ] ) {\n				jqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n			}\n			if ( jQuery.etag[ cacheURL ] ) {\n				jqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n			}\n		}\n\n		// Set the correct header, if data is being sent\n		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n			jqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n		}\n\n		// Set the Accepts header for the server, depending on the dataType\n		jqXHR.setRequestHeader(\n			\"Accept\",\n			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n				s.accepts[ s.dataTypes[ 0 ] ] +\n					( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n				s.accepts[ \"*\" ]\n		);\n\n		// Check for headers option\n		for ( i in s.headers ) {\n			jqXHR.setRequestHeader( i, s.headers[ i ] );\n		}\n\n		// Allow custom headers/mimetypes and early abort\n		if ( s.beforeSend &&\n			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n			// Abort if not done already and return\n			return jqXHR.abort();\n		}\n\n		// Aborting is no longer a cancellation\n		strAbort = \"abort\";\n\n		// Install callbacks on deferreds\n		completeDeferred.add( s.complete );\n		jqXHR.done( s.success );\n		jqXHR.fail( s.error );\n\n		// Get transport\n		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n		// If no transport, we auto-abort\n		if ( !transport ) {\n			done( -1, \"No Transport\" );\n		} else {\n			jqXHR.readyState = 1;\n\n			// Send global event\n			if ( fireGlobals ) {\n				globalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n			}\n\n			// If request was aborted inside ajaxSend, stop there\n			if ( completed ) {\n				return jqXHR;\n			}\n\n			// Timeout\n			if ( s.async && s.timeout > 0 ) {\n				timeoutTimer = window.setTimeout( function() {\n					jqXHR.abort( \"timeout\" );\n				}, s.timeout );\n			}\n\n			try {\n				completed = false;\n				transport.send( requestHeaders, done );\n			} catch ( e ) {\n\n				// Rethrow post-completion exceptions\n				if ( completed ) {\n					throw e;\n				}\n\n				// Propagate others as results\n				done( -1, e );\n			}\n		}\n\n		// Callback for when everything is done\n		function done( status, nativeStatusText, responses, headers ) {\n			var isSuccess, success, error, response, modified,\n				statusText = nativeStatusText;\n\n			// Ignore repeat invocations\n			if ( completed ) {\n				return;\n			}\n\n			completed = true;\n\n			// Clear timeout if it exists\n			if ( timeoutTimer ) {\n				window.clearTimeout( timeoutTimer );\n			}\n\n			// Dereference transport for early garbage collection\n			// (no matter how long the jqXHR object will be used)\n			transport = undefined;\n\n			// Cache response headers\n			responseHeadersString = headers || \"\";\n\n			// Set readyState\n			jqXHR.readyState = status > 0 ? 4 : 0;\n\n			// Determine if successful\n			isSuccess = status >= 200 && status < 300 || status === 304;\n\n			// Get response data\n			if ( responses ) {\n				response = ajaxHandleResponses( s, jqXHR, responses );\n			}\n\n			// Convert no matter what (that way responseXXX fields are always set)\n			response = ajaxConvert( s, response, jqXHR, isSuccess );\n\n			// If successful, handle type chaining\n			if ( isSuccess ) {\n\n				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n				if ( s.ifModified ) {\n					modified = jqXHR.getResponseHeader( \"Last-Modified\" );\n					if ( modified ) {\n						jQuery.lastModified[ cacheURL ] = modified;\n					}\n					modified = jqXHR.getResponseHeader( \"etag\" );\n					if ( modified ) {\n						jQuery.etag[ cacheURL ] = modified;\n					}\n				}\n\n				// if no content\n				if ( status === 204 || s.type === \"HEAD\" ) {\n					statusText = \"nocontent\";\n\n				// if not modified\n				} else if ( status === 304 ) {\n					statusText = \"notmodified\";\n\n				// If we have data, let's convert it\n				} else {\n					statusText = response.state;\n					success = response.data;\n					error = response.error;\n					isSuccess = !error;\n				}\n			} else {\n\n				// Extract error from statusText and normalize for non-aborts\n				error = statusText;\n				if ( status || !statusText ) {\n					statusText = \"error\";\n					if ( status < 0 ) {\n						status = 0;\n					}\n				}\n			}\n\n			// Set data for the fake xhr object\n			jqXHR.status = status;\n			jqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n			// Success/Error\n			if ( isSuccess ) {\n				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n			} else {\n				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n			}\n\n			// Status-dependent callbacks\n			jqXHR.statusCode( statusCode );\n			statusCode = undefined;\n\n			if ( fireGlobals ) {\n				globalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n					[ jqXHR, s, isSuccess ? success : error ] );\n			}\n\n			// Complete\n			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n			if ( fireGlobals ) {\n				globalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n				// Handle the global AJAX counter\n				if ( !( --jQuery.active ) ) {\n					jQuery.event.trigger( \"ajaxStop\" );\n				}\n			}\n		}\n\n		return jqXHR;\n	},\n\n	getJSON: function( url, data, callback ) {\n		return jQuery.get( url, data, callback, \"json\" );\n	},\n\n	getScript: function( url, callback ) {\n		return jQuery.get( url, undefined, callback, \"script\" );\n	}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n	jQuery[ method ] = function( url, data, callback, type ) {\n\n		// Shift arguments if data argument was omitted\n		if ( jQuery.isFunction( data ) ) {\n			type = type || callback;\n			callback = data;\n			data = undefined;\n		}\n\n		// The url can be an options object (which then must have .url)\n		return jQuery.ajax( jQuery.extend( {\n			url: url,\n			type: method,\n			dataType: type,\n			data: data,\n			success: callback\n		}, jQuery.isPlainObject( url ) && url ) );\n	};\n} );\n\n\njQuery._evalUrl = function( url ) {\n	return jQuery.ajax( {\n		url: url,\n\n		// Make this explicit, since user can override this through ajaxSetup (#11264)\n		type: \"GET\",\n		dataType: \"script\",\n		cache: true,\n		async: false,\n		global: false,\n		\"throws\": true\n	} );\n};\n\n\njQuery.fn.extend( {\n	wrapAll: function( html ) {\n		var wrap;\n\n		if ( this[ 0 ] ) {\n			if ( jQuery.isFunction( html ) ) {\n				html = html.call( this[ 0 ] );\n			}\n\n			// The elements to wrap the target around\n			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n			if ( this[ 0 ].parentNode ) {\n				wrap.insertBefore( this[ 0 ] );\n			}\n\n			wrap.map( function() {\n				var elem = this;\n\n				while ( elem.firstElementChild ) {\n					elem = elem.firstElementChild;\n				}\n\n				return elem;\n			} ).append( this );\n		}\n\n		return this;\n	},\n\n	wrapInner: function( html ) {\n		if ( jQuery.isFunction( html ) ) {\n			return this.each( function( i ) {\n				jQuery( this ).wrapInner( html.call( this, i ) );\n			} );\n		}\n\n		return this.each( function() {\n			var self = jQuery( this ),\n				contents = self.contents();\n\n			if ( contents.length ) {\n				contents.wrapAll( html );\n\n			} else {\n				self.append( html );\n			}\n		} );\n	},\n\n	wrap: function( html ) {\n		var isFunction = jQuery.isFunction( html );\n\n		return this.each( function( i ) {\n			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n		} );\n	},\n\n	unwrap: function( selector ) {\n		this.parent( selector ).not( \"body\" ).each( function() {\n			jQuery( this ).replaceWith( this.childNodes );\n		} );\n		return this;\n	}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n	return !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n	try {\n		return new window.XMLHttpRequest();\n	} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n		// File protocol always yields status code 0, assume 200\n		0: 200,\n\n		// Support: IE <=9 only\n		// #1450: sometimes IE returns 1223 when it should be 204\n		1223: 204\n	},\n	xhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n	var callback, errorCallback;\n\n	// Cross domain only allowed if supported through XMLHttpRequest\n	if ( support.cors || xhrSupported && !options.crossDomain ) {\n		return {\n			send: function( headers, complete ) {\n				var i,\n					xhr = options.xhr();\n\n				xhr.open(\n					options.type,\n					options.url,\n					options.async,\n					options.username,\n					options.password\n				);\n\n				// Apply custom fields if provided\n				if ( options.xhrFields ) {\n					for ( i in options.xhrFields ) {\n						xhr[ i ] = options.xhrFields[ i ];\n					}\n				}\n\n				// Override mime type if needed\n				if ( options.mimeType && xhr.overrideMimeType ) {\n					xhr.overrideMimeType( options.mimeType );\n				}\n\n				// X-Requested-With header\n				// For cross-domain requests, seeing as conditions for a preflight are\n				// akin to a jigsaw puzzle, we simply never set it to be sure.\n				// (it can always be set on a per-request basis or even using ajaxSetup)\n				// For same-domain requests, won't change header if already provided.\n				if ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n					headers[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n				}\n\n				// Set headers\n				for ( i in headers ) {\n					xhr.setRequestHeader( i, headers[ i ] );\n				}\n\n				// Callback\n				callback = function( type ) {\n					return function() {\n						if ( callback ) {\n							callback = errorCallback = xhr.onload =\n								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n							if ( type === \"abort\" ) {\n								xhr.abort();\n							} else if ( type === \"error\" ) {\n\n								// Support: IE <=9 only\n								// On a manual native abort, IE9 throws\n								// errors on any property access that is not readyState\n								if ( typeof xhr.status !== \"number\" ) {\n									complete( 0, \"error\" );\n								} else {\n									complete(\n\n										// File: protocol always yields status 0; see #8605, #14207\n										xhr.status,\n										xhr.statusText\n									);\n								}\n							} else {\n								complete(\n									xhrSuccessStatus[ xhr.status ] || xhr.status,\n									xhr.statusText,\n\n									// Support: IE <=9 only\n									// IE9 has no XHR2 but throws on binary (trac-11426)\n									// For XHR2 non-text, let the caller handle it (gh-2498)\n									( xhr.responseType || \"text\" ) !== \"text\"  ||\n									typeof xhr.responseText !== \"string\" ?\n										{ binary: xhr.response } :\n										{ text: xhr.responseText },\n									xhr.getAllResponseHeaders()\n								);\n							}\n						}\n					};\n				};\n\n				// Listen to events\n				xhr.onload = callback();\n				errorCallback = xhr.onerror = callback( \"error\" );\n\n				// Support: IE 9 only\n				// Use onreadystatechange to replace onabort\n				// to handle uncaught aborts\n				if ( xhr.onabort !== undefined ) {\n					xhr.onabort = errorCallback;\n				} else {\n					xhr.onreadystatechange = function() {\n\n						// Check readyState before timeout as it changes\n						if ( xhr.readyState === 4 ) {\n\n							// Allow onerror to be called first,\n							// but that will not handle a native abort\n							// Also, save errorCallback to a variable\n							// as xhr.onerror cannot be accessed\n							window.setTimeout( function() {\n								if ( callback ) {\n									errorCallback();\n								}\n							} );\n						}\n					};\n				}\n\n				// Create the abort callback\n				callback = callback( \"abort\" );\n\n				try {\n\n					// Do send the request (this may raise an exception)\n					xhr.send( options.hasContent && options.data || null );\n				} catch ( e ) {\n\n					// #14683: Only rethrow if this hasn't been notified as an error yet\n					if ( callback ) {\n						throw e;\n					}\n				}\n			},\n\n			abort: function() {\n				if ( callback ) {\n					callback();\n				}\n			}\n		};\n	}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n	if ( s.crossDomain ) {\n		s.contents.script = false;\n	}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n	accepts: {\n		script: \"text/javascript, application/javascript, \" +\n			\"application/ecmascript, application/x-ecmascript\"\n	},\n	contents: {\n		script: /\\b(?:java|ecma)script\\b/\n	},\n	converters: {\n		\"text script\": function( text ) {\n			jQuery.globalEval( text );\n			return text;\n		}\n	}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n	if ( s.cache === undefined ) {\n		s.cache = false;\n	}\n	if ( s.crossDomain ) {\n		s.type = \"GET\";\n	}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n	// This transport only deals with cross domain requests\n	if ( s.crossDomain ) {\n		var script, callback;\n		return {\n			send: function( _, complete ) {\n				script = jQuery( \"<script>\" ).prop( {\n					charset: s.scriptCharset,\n					src: s.url\n				} ).on(\n					\"load error\",\n					callback = function( evt ) {\n						script.remove();\n						callback = null;\n						if ( evt ) {\n							complete( evt.type === \"error\" ? 404 : 200, evt.type );\n						}\n					}\n				);\n\n				// Use native DOM manipulation to avoid our domManip AJAX trickery\n				document.head.appendChild( script[ 0 ] );\n			},\n			abort: function() {\n				if ( callback ) {\n					callback();\n				}\n			}\n		};\n	}\n} );\n\n\n\n\nvar oldCallbacks = [],\n	rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n	jsonp: \"callback\",\n	jsonpCallback: function() {\n		var callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n		this[ callback ] = true;\n		return callback;\n	}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n	var callbackName, overwritten, responseContainer,\n		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n			\"url\" :\n			typeof s.data === \"string\" &&\n				( s.contentType || \"\" )\n					.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n				rjsonp.test( s.data ) && \"data\"\n		);\n\n	// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n	if ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n		// Get callback name, remembering preexisting value associated with it\n		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n			s.jsonpCallback() :\n			s.jsonpCallback;\n\n		// Insert callback into url or form data\n		if ( jsonProp ) {\n			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n		} else if ( s.jsonp !== false ) {\n			s.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n		}\n\n		// Use data converter to retrieve json after script execution\n		s.converters[ \"script json\" ] = function() {\n			if ( !responseContainer ) {\n				jQuery.error( callbackName + \" was not called\" );\n			}\n			return responseContainer[ 0 ];\n		};\n\n		// Force json dataType\n		s.dataTypes[ 0 ] = \"json\";\n\n		// Install callback\n		overwritten = window[ callbackName ];\n		window[ callbackName ] = function() {\n			responseContainer = arguments;\n		};\n\n		// Clean-up function (fires after converters)\n		jqXHR.always( function() {\n\n			// If previous value didn't exist - remove it\n			if ( overwritten === undefined ) {\n				jQuery( window ).removeProp( callbackName );\n\n			// Otherwise restore preexisting value\n			} else {\n				window[ callbackName ] = overwritten;\n			}\n\n			// Save back as free\n			if ( s[ callbackName ] ) {\n\n				// Make sure that re-using the options doesn't screw things around\n				s.jsonpCallback = originalSettings.jsonpCallback;\n\n				// Save the callback name for future use\n				oldCallbacks.push( callbackName );\n			}\n\n			// Call if it was a function and we have a response\n			if ( responseContainer && jQuery.isFunction( overwritten ) ) {\n				overwritten( responseContainer[ 0 ] );\n			}\n\n			responseContainer = overwritten = undefined;\n		} );\n\n		// Delegate to script\n		return \"script\";\n	}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n	var body = document.implementation.createHTMLDocument( \"\" ).body;\n	body.innerHTML = \"<form></form><form></form>\";\n	return body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n	if ( typeof data !== \"string\" ) {\n		return [];\n	}\n	if ( typeof context === \"boolean\" ) {\n		keepScripts = context;\n		context = false;\n	}\n\n	var base, parsed, scripts;\n\n	if ( !context ) {\n\n		// Stop scripts or inline event handlers from being executed immediately\n		// by using document.implementation\n		if ( support.createHTMLDocument ) {\n			context = document.implementation.createHTMLDocument( \"\" );\n\n			// Set the base href for the created document\n			// so any parsed elements with URLs\n			// are based on the document's URL (gh-2965)\n			base = context.createElement( \"base\" );\n			base.href = document.location.href;\n			context.head.appendChild( base );\n		} else {\n			context = document;\n		}\n	}\n\n	parsed = rsingleTag.exec( data );\n	scripts = !keepScripts && [];\n\n	// Single tag\n	if ( parsed ) {\n		return [ context.createElement( parsed[ 1 ] ) ];\n	}\n\n	parsed = buildFragment( [ data ], context, scripts );\n\n	if ( scripts && scripts.length ) {\n		jQuery( scripts ).remove();\n	}\n\n	return jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n	var selector, type, response,\n		self = this,\n		off = url.indexOf( \" \" );\n\n	if ( off > -1 ) {\n		selector = stripAndCollapse( url.slice( off ) );\n		url = url.slice( 0, off );\n	}\n\n	// If it's a function\n	if ( jQuery.isFunction( params ) ) {\n\n		// We assume that it's the callback\n		callback = params;\n		params = undefined;\n\n	// Otherwise, build a param string\n	} else if ( params && typeof params === \"object\" ) {\n		type = \"POST\";\n	}\n\n	// If we have elements to modify, make the request\n	if ( self.length > 0 ) {\n		jQuery.ajax( {\n			url: url,\n\n			// If \"type\" variable is undefined, then \"GET\" method will be used.\n			// Make value of this field explicit since\n			// user can override it through ajaxSetup method\n			type: type || \"GET\",\n			dataType: \"html\",\n			data: params\n		} ).done( function( responseText ) {\n\n			// Save response for use in complete callback\n			response = arguments;\n\n			self.html( selector ?\n\n				// If a selector was specified, locate the right elements in a dummy div\n				// Exclude scripts to avoid IE 'Permission Denied' errors\n				jQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n				// Otherwise use the full result\n				responseText );\n\n		// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n		// but they are ignored because response was set above.\n		// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n		} ).always( callback && function( jqXHR, status ) {\n			self.each( function() {\n				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n			} );\n		} );\n	}\n\n	return this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n	\"ajaxStart\",\n	\"ajaxStop\",\n	\"ajaxComplete\",\n	\"ajaxError\",\n	\"ajaxSuccess\",\n	\"ajaxSend\"\n], function( i, type ) {\n	jQuery.fn[ type ] = function( fn ) {\n		return this.on( type, fn );\n	};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n	return jQuery.grep( jQuery.timers, function( fn ) {\n		return elem === fn.elem;\n	} ).length;\n};\n\n\n\n\njQuery.offset = {\n	setOffset: function( elem, options, i ) {\n		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n			position = jQuery.css( elem, \"position\" ),\n			curElem = jQuery( elem ),\n			props = {};\n\n		// Set position first, in-case top/left are set even on static elem\n		if ( position === \"static\" ) {\n			elem.style.position = \"relative\";\n		}\n\n		curOffset = curElem.offset();\n		curCSSTop = jQuery.css( elem, \"top\" );\n		curCSSLeft = jQuery.css( elem, \"left\" );\n		calculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n			( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n		// Need to be able to calculate position if either\n		// top or left is auto and position is either absolute or fixed\n		if ( calculatePosition ) {\n			curPosition = curElem.position();\n			curTop = curPosition.top;\n			curLeft = curPosition.left;\n\n		} else {\n			curTop = parseFloat( curCSSTop ) || 0;\n			curLeft = parseFloat( curCSSLeft ) || 0;\n		}\n\n		if ( jQuery.isFunction( options ) ) {\n\n			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n		}\n\n		if ( options.top != null ) {\n			props.top = ( options.top - curOffset.top ) + curTop;\n		}\n		if ( options.left != null ) {\n			props.left = ( options.left - curOffset.left ) + curLeft;\n		}\n\n		if ( \"using\" in options ) {\n			options.using.call( elem, props );\n\n		} else {\n			curElem.css( props );\n		}\n	}\n};\n\njQuery.fn.extend( {\n	offset: function( options ) {\n\n		// Preserve chaining for setter\n		if ( arguments.length ) {\n			return options === undefined ?\n				this :\n				this.each( function( i ) {\n					jQuery.offset.setOffset( this, options, i );\n				} );\n		}\n\n		var doc, docElem, rect, win,\n			elem = this[ 0 ];\n\n		if ( !elem ) {\n			return;\n		}\n\n		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n		// Support: IE <=11 only\n		// Running getBoundingClientRect on a\n		// disconnected node in IE throws an error\n		if ( !elem.getClientRects().length ) {\n			return { top: 0, left: 0 };\n		}\n\n		rect = elem.getBoundingClientRect();\n\n		doc = elem.ownerDocument;\n		docElem = doc.documentElement;\n		win = doc.defaultView;\n\n		return {\n			top: rect.top + win.pageYOffset - docElem.clientTop,\n			left: rect.left + win.pageXOffset - docElem.clientLeft\n		};\n	},\n\n	position: function() {\n		if ( !this[ 0 ] ) {\n			return;\n		}\n\n		var offsetParent, offset,\n			elem = this[ 0 ],\n			parentOffset = { top: 0, left: 0 };\n\n		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n		// because it is its only offset parent\n		if ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n			// Assume getBoundingClientRect is there when computed position is fixed\n			offset = elem.getBoundingClientRect();\n\n		} else {\n\n			// Get *real* offsetParent\n			offsetParent = this.offsetParent();\n\n			// Get correct offsets\n			offset = this.offset();\n			if ( !nodeName( offsetParent[ 0 ], \"html\" ) ) {\n				parentOffset = offsetParent.offset();\n			}\n\n			// Add offsetParent borders\n			parentOffset = {\n				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true ),\n				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true )\n			};\n		}\n\n		// Subtract parent offsets and element margins\n		return {\n			top: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n			left: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n		};\n	},\n\n	// This method will return documentElement in the following cases:\n	// 1) For the element inside the iframe without offsetParent, this method will return\n	//    documentElement of the parent window\n	// 2) For the hidden or detached element\n	// 3) For body or html element, i.e. in case of the html node - it will return itself\n	//\n	// but those exceptions were never presented as a real life use-cases\n	// and might be considered as more preferable results.\n	//\n	// This logic, however, is not guaranteed and can change at any point in the future\n	offsetParent: function() {\n		return this.map( function() {\n			var offsetParent = this.offsetParent;\n\n			while ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n				offsetParent = offsetParent.offsetParent;\n			}\n\n			return offsetParent || documentElement;\n		} );\n	}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n	var top = \"pageYOffset\" === prop;\n\n	jQuery.fn[ method ] = function( val ) {\n		return access( this, function( elem, method, val ) {\n\n			// Coalesce documents and windows\n			var win;\n			if ( jQuery.isWindow( elem ) ) {\n				win = elem;\n			} else if ( elem.nodeType === 9 ) {\n				win = elem.defaultView;\n			}\n\n			if ( val === undefined ) {\n				return win ? win[ prop ] : elem[ method ];\n			}\n\n			if ( win ) {\n				win.scrollTo(\n					!top ? val : win.pageXOffset,\n					top ? val : win.pageYOffset\n				);\n\n			} else {\n				elem[ method ] = val;\n			}\n		}, method, val, arguments.length );\n	};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n		function( elem, computed ) {\n			if ( computed ) {\n				computed = curCSS( elem, prop );\n\n				// If curCSS returns percentage, fallback to offset\n				return rnumnonpx.test( computed ) ?\n					jQuery( elem ).position()[ prop ] + \"px\" :\n					computed;\n			}\n		}\n	);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n	jQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n		function( defaultExtra, funcName ) {\n\n		// Margin is only for outerHeight, outerWidth\n		jQuery.fn[ funcName ] = function( margin, value ) {\n			var chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n				extra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n			return access( this, function( elem, type, value ) {\n				var doc;\n\n				if ( jQuery.isWindow( elem ) ) {\n\n					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n					return funcName.indexOf( \"outer\" ) === 0 ?\n						elem[ \"inner\" + name ] :\n						elem.document.documentElement[ \"client\" + name ];\n				}\n\n				// Get document width or height\n				if ( elem.nodeType === 9 ) {\n					doc = elem.documentElement;\n\n					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n					// whichever is greatest\n					return Math.max(\n						elem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n						elem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n						doc[ \"client\" + name ]\n					);\n				}\n\n				return value === undefined ?\n\n					// Get width or height on the element, requesting but not forcing parseFloat\n					jQuery.css( elem, type, extra ) :\n\n					// Set width or height on the element\n					jQuery.style( elem, type, value, extra );\n			}, type, chainable ? margin : undefined, chainable );\n		};\n	} );\n} );\n\n\njQuery.fn.extend( {\n\n	bind: function( types, data, fn ) {\n		return this.on( types, null, data, fn );\n	},\n	unbind: function( types, fn ) {\n		return this.off( types, null, fn );\n	},\n\n	delegate: function( selector, types, data, fn ) {\n		return this.on( types, selector, data, fn );\n	},\n	undelegate: function( selector, types, fn ) {\n\n		// ( namespace ) or ( selector, types [, fn] )\n		return arguments.length === 1 ?\n			this.off( selector, \"**\" ) :\n			this.off( types, selector || \"**\", fn );\n	}\n} );\n\njQuery.holdReady = function( hold ) {\n	if ( hold ) {\n		jQuery.readyWait++;\n	} else {\n		jQuery.ready( true );\n	}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n	define( \"jquery\", [], function() {\n		return jQuery;\n	} );\n}\n\n\n\n\nvar\n\n	// Map over jQuery in case of overwrite\n	_jQuery = window.jQuery,\n\n	// Map over the $ in case of overwrite\n	_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n	if ( window.$ === jQuery ) {\n		window.$ = _$;\n	}\n\n	if ( deep && window.jQuery === jQuery ) {\n		window.jQuery = _jQuery;\n	}\n\n	return jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n	window.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n");
espreePayloads.set("preact-8.2.5.js", "!function() {\n    'use strict';\n    function VNode() {}\n    function h(nodeName, attributes) {\n        var lastSimple, child, simple, i, children = EMPTY_CHILDREN;\n        for (i = arguments.length; i-- > 2; ) stack.push(arguments[i]);\n        if (attributes && null != attributes.children) {\n            if (!stack.length) stack.push(attributes.children);\n            delete attributes.children;\n        }\n        while (stack.length) if ((child = stack.pop()) && void 0 !== child.pop) for (i = child.length; i--; ) stack.push(child[i]); else {\n            if ('boolean' == typeof child) child = null;\n            if (simple = 'function' != typeof nodeName) if (null == child) child = ''; else if ('number' == typeof child) child = String(child); else if ('string' != typeof child) simple = !1;\n            if (simple && lastSimple) children[children.length - 1] += child; else if (children === EMPTY_CHILDREN) children = [ child ]; else children.push(child);\n            lastSimple = simple;\n        }\n        var p = new VNode();\n        p.nodeName = nodeName;\n        p.children = children;\n        p.attributes = null == attributes ? void 0 : attributes;\n        p.key = null == attributes ? void 0 : attributes.key;\n        if (void 0 !== options.vnode) options.vnode(p);\n        return p;\n    }\n    function extend(obj, props) {\n        for (var i in props) obj[i] = props[i];\n        return obj;\n    }\n    function cloneElement(vnode, props) {\n        return h(vnode.nodeName, extend(extend({}, vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);\n    }\n    function enqueueRender(component) {\n        if (!component.__d && (component.__d = !0) && 1 == items.push(component)) (options.debounceRendering || defer)(rerender);\n    }\n    function rerender() {\n        var p, list = items;\n        items = [];\n        while (p = list.pop()) if (p.__d) renderComponent(p);\n    }\n    function isSameNodeType(node, vnode, hydrating) {\n        if ('string' == typeof vnode || 'number' == typeof vnode) return void 0 !== node.splitText;\n        if ('string' == typeof vnode.nodeName) return !node._componentConstructor && isNamedNode(node, vnode.nodeName); else return hydrating || node._componentConstructor === vnode.nodeName;\n    }\n    function isNamedNode(node, nodeName) {\n        return node.__n === nodeName || node.nodeName.toLowerCase() === nodeName.toLowerCase();\n    }\n    function getNodeProps(vnode) {\n        var props = extend({}, vnode.attributes);\n        props.children = vnode.children;\n        var defaultProps = vnode.nodeName.defaultProps;\n        if (void 0 !== defaultProps) for (var i in defaultProps) if (void 0 === props[i]) props[i] = defaultProps[i];\n        return props;\n    }\n    function createNode(nodeName, isSvg) {\n        var node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);\n        node.__n = nodeName;\n        return node;\n    }\n    function removeNode(node) {\n        var parentNode = node.parentNode;\n        if (parentNode) parentNode.removeChild(node);\n    }\n    function setAccessor(node, name, old, value, isSvg) {\n        if ('className' === name) name = 'class';\n        if ('key' === name) ; else if ('ref' === name) {\n            if (old) old(null);\n            if (value) value(node);\n        } else if ('class' === name && !isSvg) node.className = value || ''; else if ('style' === name) {\n            if (!value || 'string' == typeof value || 'string' == typeof old) node.style.cssText = value || '';\n            if (value && 'object' == typeof value) {\n                if ('string' != typeof old) for (var i in old) if (!(i in value)) node.style[i] = '';\n                for (var i in value) node.style[i] = 'number' == typeof value[i] && !1 === IS_NON_DIMENSIONAL.test(i) ? value[i] + 'px' : value[i];\n            }\n        } else if ('dangerouslySetInnerHTML' === name) {\n            if (value) node.innerHTML = value.__html || '';\n        } else if ('o' == name[0] && 'n' == name[1]) {\n            var useCapture = name !== (name = name.replace(/Capture$/, ''));\n            name = name.toLowerCase().substring(2);\n            if (value) {\n                if (!old) node.addEventListener(name, eventProxy, useCapture);\n            } else node.removeEventListener(name, eventProxy, useCapture);\n            (node.__l || (node.__l = {}))[name] = value;\n        } else if ('list' !== name && 'type' !== name && !isSvg && name in node) {\n            setProperty(node, name, null == value ? '' : value);\n            if (null == value || !1 === value) node.removeAttribute(name);\n        } else {\n            var ns = isSvg && name !== (name = name.replace(/^xlink\\:?/, ''));\n            if (null == value || !1 === value) if (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase()); else node.removeAttribute(name); else if ('function' != typeof value) if (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value); else node.setAttribute(name, value);\n        }\n    }\n    function setProperty(node, name, value) {\n        try {\n            node[name] = value;\n        } catch (e) {}\n    }\n    function eventProxy(e) {\n        return this.__l[e.type](options.event && options.event(e) || e);\n    }\n    function flushMounts() {\n        var c;\n        while (c = mounts.pop()) {\n            if (options.afterMount) options.afterMount(c);\n            if (c.componentDidMount) c.componentDidMount();\n        }\n    }\n    function diff(dom, vnode, context, mountAll, parent, componentRoot) {\n        if (!diffLevel++) {\n            isSvgMode = null != parent && void 0 !== parent.ownerSVGElement;\n            hydrating = null != dom && !('__preactattr_' in dom);\n        }\n        var ret = idiff(dom, vnode, context, mountAll, componentRoot);\n        if (parent && ret.parentNode !== parent) parent.appendChild(ret);\n        if (!--diffLevel) {\n            hydrating = !1;\n            if (!componentRoot) flushMounts();\n        }\n        return ret;\n    }\n    function idiff(dom, vnode, context, mountAll, componentRoot) {\n        var out = dom, prevSvgMode = isSvgMode;\n        if (null == vnode || 'boolean' == typeof vnode) vnode = '';\n        if ('string' == typeof vnode || 'number' == typeof vnode) {\n            if (dom && void 0 !== dom.splitText && dom.parentNode && (!dom._component || componentRoot)) {\n                if (dom.nodeValue != vnode) dom.nodeValue = vnode;\n            } else {\n                out = document.createTextNode(vnode);\n                if (dom) {\n                    if (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n                    recollectNodeTree(dom, !0);\n                }\n            }\n            out.__preactattr_ = !0;\n            return out;\n        }\n        var vnodeName = vnode.nodeName;\n        if ('function' == typeof vnodeName) return buildComponentFromVNode(dom, vnode, context, mountAll);\n        isSvgMode = 'svg' === vnodeName ? !0 : 'foreignObject' === vnodeName ? !1 : isSvgMode;\n        vnodeName = String(vnodeName);\n        if (!dom || !isNamedNode(dom, vnodeName)) {\n            out = createNode(vnodeName, isSvgMode);\n            if (dom) {\n                while (dom.firstChild) out.appendChild(dom.firstChild);\n                if (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n                recollectNodeTree(dom, !0);\n            }\n        }\n        var fc = out.firstChild, props = out.__preactattr_, vchildren = vnode.children;\n        if (null == props) {\n            props = out.__preactattr_ = {};\n            for (var a = out.attributes, i = a.length; i--; ) props[a[i].name] = a[i].value;\n        }\n        if (!hydrating && vchildren && 1 === vchildren.length && 'string' == typeof vchildren[0] && null != fc && void 0 !== fc.splitText && null == fc.nextSibling) {\n            if (fc.nodeValue != vchildren[0]) fc.nodeValue = vchildren[0];\n        } else if (vchildren && vchildren.length || null != fc) innerDiffNode(out, vchildren, context, mountAll, hydrating || null != props.dangerouslySetInnerHTML);\n        diffAttributes(out, vnode.attributes, props);\n        isSvgMode = prevSvgMode;\n        return out;\n    }\n    function innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {\n        var j, c, f, vchild, child, originalChildren = dom.childNodes, children = [], keyed = {}, keyedLen = 0, min = 0, len = originalChildren.length, childrenLen = 0, vlen = vchildren ? vchildren.length : 0;\n        if (0 !== len) for (var i = 0; i < len; i++) {\n            var _child = originalChildren[i], props = _child.__preactattr_, key = vlen && props ? _child._component ? _child._component.__k : props.key : null;\n            if (null != key) {\n                keyedLen++;\n                keyed[key] = _child;\n            } else if (props || (void 0 !== _child.splitText ? isHydrating ? _child.nodeValue.trim() : !0 : isHydrating)) children[childrenLen++] = _child;\n        }\n        if (0 !== vlen) for (var i = 0; i < vlen; i++) {\n            vchild = vchildren[i];\n            child = null;\n            var key = vchild.key;\n            if (null != key) {\n                if (keyedLen && void 0 !== keyed[key]) {\n                    child = keyed[key];\n                    keyed[key] = void 0;\n                    keyedLen--;\n                }\n            } else if (!child && min < childrenLen) for (j = min; j < childrenLen; j++) if (void 0 !== children[j] && isSameNodeType(c = children[j], vchild, isHydrating)) {\n                child = c;\n                children[j] = void 0;\n                if (j === childrenLen - 1) childrenLen--;\n                if (j === min) min++;\n                break;\n            }\n            child = idiff(child, vchild, context, mountAll);\n            f = originalChildren[i];\n            if (child && child !== dom && child !== f) if (null == f) dom.appendChild(child); else if (child === f.nextSibling) removeNode(f); else dom.insertBefore(child, f);\n        }\n        if (keyedLen) for (var i in keyed) if (void 0 !== keyed[i]) recollectNodeTree(keyed[i], !1);\n        while (min <= childrenLen) if (void 0 !== (child = children[childrenLen--])) recollectNodeTree(child, !1);\n    }\n    function recollectNodeTree(node, unmountOnly) {\n        var component = node._component;\n        if (component) unmountComponent(component); else {\n            if (null != node.__preactattr_ && node.__preactattr_.ref) node.__preactattr_.ref(null);\n            if (!1 === unmountOnly || null == node.__preactattr_) removeNode(node);\n            removeChildren(node);\n        }\n    }\n    function removeChildren(node) {\n        node = node.lastChild;\n        while (node) {\n            var next = node.previousSibling;\n            recollectNodeTree(node, !0);\n            node = next;\n        }\n    }\n    function diffAttributes(dom, attrs, old) {\n        var name;\n        for (name in old) if ((!attrs || null == attrs[name]) && null != old[name]) setAccessor(dom, name, old[name], old[name] = void 0, isSvgMode);\n        for (name in attrs) if (!('children' === name || 'innerHTML' === name || name in old && attrs[name] === ('value' === name || 'checked' === name ? dom[name] : old[name]))) setAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);\n    }\n    function collectComponent(component) {\n        var name = component.constructor.name;\n        (components[name] || (components[name] = [])).push(component);\n    }\n    function createComponent(Ctor, props, context) {\n        var inst, list = components[Ctor.name];\n        if (Ctor.prototype && Ctor.prototype.render) {\n            inst = new Ctor(props, context);\n            Component.call(inst, props, context);\n        } else {\n            inst = new Component(props, context);\n            inst.constructor = Ctor;\n            inst.render = doRender;\n        }\n        if (list) for (var i = list.length; i--; ) if (list[i].constructor === Ctor) {\n            inst.__b = list[i].__b;\n            list.splice(i, 1);\n            break;\n        }\n        return inst;\n    }\n    function doRender(props, state, context) {\n        return this.constructor(props, context);\n    }\n    function setComponentProps(component, props, opts, context, mountAll) {\n        if (!component.__x) {\n            component.__x = !0;\n            if (component.__r = props.ref) delete props.ref;\n            if (component.__k = props.key) delete props.key;\n            if (!component.base || mountAll) {\n                if (component.componentWillMount) component.componentWillMount();\n            } else if (component.componentWillReceiveProps) component.componentWillReceiveProps(props, context);\n            if (context && context !== component.context) {\n                if (!component.__c) component.__c = component.context;\n                component.context = context;\n            }\n            if (!component.__p) component.__p = component.props;\n            component.props = props;\n            component.__x = !1;\n            if (0 !== opts) if (1 === opts || !1 !== options.syncComponentUpdates || !component.base) renderComponent(component, 1, mountAll); else enqueueRender(component);\n            if (component.__r) component.__r(component);\n        }\n    }\n    function renderComponent(component, opts, mountAll, isChild) {\n        if (!component.__x) {\n            var rendered, inst, cbase, props = component.props, state = component.state, context = component.context, previousProps = component.__p || props, previousState = component.__s || state, previousContext = component.__c || context, isUpdate = component.base, nextBase = component.__b, initialBase = isUpdate || nextBase, initialChildComponent = component._component, skip = !1;\n            if (isUpdate) {\n                component.props = previousProps;\n                component.state = previousState;\n                component.context = previousContext;\n                if (2 !== opts && component.shouldComponentUpdate && !1 === component.shouldComponentUpdate(props, state, context)) skip = !0; else if (component.componentWillUpdate) component.componentWillUpdate(props, state, context);\n                component.props = props;\n                component.state = state;\n                component.context = context;\n            }\n            component.__p = component.__s = component.__c = component.__b = null;\n            component.__d = !1;\n            if (!skip) {\n                rendered = component.render(props, state, context);\n                if (component.getChildContext) context = extend(extend({}, context), component.getChildContext());\n                var toUnmount, base, childComponent = rendered && rendered.nodeName;\n                if ('function' == typeof childComponent) {\n                    var childProps = getNodeProps(rendered);\n                    inst = initialChildComponent;\n                    if (inst && inst.constructor === childComponent && childProps.key == inst.__k) setComponentProps(inst, childProps, 1, context, !1); else {\n                        toUnmount = inst;\n                        component._component = inst = createComponent(childComponent, childProps, context);\n                        inst.__b = inst.__b || nextBase;\n                        inst.__u = component;\n                        setComponentProps(inst, childProps, 0, context, !1);\n                        renderComponent(inst, 1, mountAll, !0);\n                    }\n                    base = inst.base;\n                } else {\n                    cbase = initialBase;\n                    toUnmount = initialChildComponent;\n                    if (toUnmount) cbase = component._component = null;\n                    if (initialBase || 1 === opts) {\n                        if (cbase) cbase._component = null;\n                        base = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, !0);\n                    }\n                }\n                if (initialBase && base !== initialBase && inst !== initialChildComponent) {\n                    var baseParent = initialBase.parentNode;\n                    if (baseParent && base !== baseParent) {\n                        baseParent.replaceChild(base, initialBase);\n                        if (!toUnmount) {\n                            initialBase._component = null;\n                            recollectNodeTree(initialBase, !1);\n                        }\n                    }\n                }\n                if (toUnmount) unmountComponent(toUnmount);\n                component.base = base;\n                if (base && !isChild) {\n                    var componentRef = component, t = component;\n                    while (t = t.__u) (componentRef = t).base = base;\n                    base._component = componentRef;\n                    base._componentConstructor = componentRef.constructor;\n                }\n            }\n            if (!isUpdate || mountAll) mounts.unshift(component); else if (!skip) {\n                if (component.componentDidUpdate) component.componentDidUpdate(previousProps, previousState, previousContext);\n                if (options.afterUpdate) options.afterUpdate(component);\n            }\n            if (null != component.__h) while (component.__h.length) component.__h.pop().call(component);\n            if (!diffLevel && !isChild) flushMounts();\n        }\n    }\n    function buildComponentFromVNode(dom, vnode, context, mountAll) {\n        var c = dom && dom._component, originalComponent = c, oldDom = dom, isDirectOwner = c && dom._componentConstructor === vnode.nodeName, isOwner = isDirectOwner, props = getNodeProps(vnode);\n        while (c && !isOwner && (c = c.__u)) isOwner = c.constructor === vnode.nodeName;\n        if (c && isOwner && (!mountAll || c._component)) {\n            setComponentProps(c, props, 3, context, mountAll);\n            dom = c.base;\n        } else {\n            if (originalComponent && !isDirectOwner) {\n                unmountComponent(originalComponent);\n                dom = oldDom = null;\n            }\n            c = createComponent(vnode.nodeName, props, context);\n            if (dom && !c.__b) {\n                c.__b = dom;\n                oldDom = null;\n            }\n            setComponentProps(c, props, 1, context, mountAll);\n            dom = c.base;\n            if (oldDom && dom !== oldDom) {\n                oldDom._component = null;\n                recollectNodeTree(oldDom, !1);\n            }\n        }\n        return dom;\n    }\n    function unmountComponent(component) {\n        if (options.beforeUnmount) options.beforeUnmount(component);\n        var base = component.base;\n        component.__x = !0;\n        if (component.componentWillUnmount) component.componentWillUnmount();\n        component.base = null;\n        var inner = component._component;\n        if (inner) unmountComponent(inner); else if (base) {\n            if (base.__preactattr_ && base.__preactattr_.ref) base.__preactattr_.ref(null);\n            component.__b = base;\n            removeNode(base);\n            collectComponent(component);\n            removeChildren(base);\n        }\n        if (component.__r) component.__r(null);\n    }\n    function Component(props, context) {\n        this.__d = !0;\n        this.context = context;\n        this.props = props;\n        this.state = this.state || {};\n    }\n    function render(vnode, parent, merge) {\n        return diff(merge, vnode, {}, !1, parent, !1);\n    }\n    var options = {};\n    var stack = [];\n    var EMPTY_CHILDREN = [];\n    var defer = 'function' == typeof Promise ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;\n    var IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\n    var items = [];\n    var mounts = [];\n    var diffLevel = 0;\n    var isSvgMode = !1;\n    var hydrating = !1;\n    var components = {};\n    extend(Component.prototype, {\n        setState: function(state, callback) {\n            var s = this.state;\n            if (!this.__s) this.__s = extend({}, s);\n            extend(s, 'function' == typeof state ? state(s, this.props) : state);\n            if (callback) (this.__h = this.__h || []).push(callback);\n            enqueueRender(this);\n        },\n        forceUpdate: function(callback) {\n            if (callback) (this.__h = this.__h || []).push(callback);\n            renderComponent(this, 2);\n        },\n        render: function() {}\n    });\n    var preact = {\n        h: h,\n        createElement: h,\n        cloneElement: cloneElement,\n        Component: Component,\n        render: render,\n        rerender: rerender,\n        options: options\n    };\n    if ('undefined' != typeof module) module.exports = preact; else self.preact = preact;\n}();\n//# sourceMappingURL=preact.js.map");
espreePayloads.set("underscore-1.5.2.js", "//     Underscore.js 1.5.2\n//     http://underscorejs.org\n//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Establish the object that gets returned to break out of a loop iteration.\n  var breaker = {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    concat           = ArrayProto.concat,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeForEach      = ArrayProto.forEach,\n    nativeMap          = ArrayProto.map,\n    nativeReduce       = ArrayProto.reduce,\n    nativeReduceRight  = ArrayProto.reduceRight,\n    nativeFilter       = ArrayProto.filter,\n    nativeEvery        = ArrayProto.every,\n    nativeSome         = ArrayProto.some,\n    nativeIndexOf      = ArrayProto.indexOf,\n    nativeLastIndexOf  = ArrayProto.lastIndexOf,\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind;\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object via a string identifier,\n  // for Closure Compiler \"advanced\" mode.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.5.2';\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles objects with the built-in `forEach`, arrays, and raw objects.\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\n  var each = _.each = _.forEach = function(obj, iterator, context) {\n    if (obj == null) return;\n    if (nativeForEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length === +obj.length) {\n      for (var i = 0, length = obj.length; i < length; i++) {\n        if (iterator.call(context, obj[i], i, obj) === breaker) return;\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (var i = 0, length = keys.length; i < length; i++) {\n        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;\n      }\n    }\n  };\n\n  // Return the results of applying the iterator to each element.\n  // Delegates to **ECMAScript 5**'s native `map` if available.\n  _.map = _.collect = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n    each(obj, function(value, index, list) {\n      results.push(iterator.call(context, value, index, list));\n    });\n    return results;\n  };\n\n  var reduceError = 'Reduce of empty array with no initial value';\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduce && obj.reduce === nativeReduce) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n    }\n    each(obj, function(value, index, list) {\n      if (!initial) {\n        memo = value;\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, value, index, list);\n      }\n    });\n    if (!initial) throw new TypeError(reduceError);\n    return memo;\n  };\n\n  // The right-associative version of reduce, also known as `foldr`.\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n    }\n    var length = obj.length;\n    if (length !== +length) {\n      var keys = _.keys(obj);\n      length = keys.length;\n    }\n    each(obj, function(value, index, list) {\n      index = keys ? keys[--length] : --length;\n      if (!initial) {\n        memo = obj[index];\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, obj[index], index, list);\n      }\n    });\n    if (!initial) throw new TypeError(reduceError);\n    return memo;\n  };\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, iterator, context) {\n    var result;\n    any(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  // Return all the elements that pass a truth test.\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);\n    each(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, iterator, context) {\n    return _.filter(obj, function(value, index, list) {\n      return !iterator.call(context, value, index, list);\n    }, context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Delegates to **ECMAScript 5**'s native `every` if available.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, iterator, context) {\n    iterator || (iterator = _.identity);\n    var result = true;\n    if (obj == null) return result;\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);\n    each(obj, function(value, index, list) {\n      if (!(result = result && iterator.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Delegates to **ECMAScript 5**'s native `some` if available.\n  // Aliased as `any`.\n  var any = _.some = _.any = function(obj, iterator, context) {\n    iterator || (iterator = _.identity);\n    var result = false;\n    if (obj == null) return result;\n    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);\n    each(obj, function(value, index, list) {\n      if (result || (result = iterator.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if the array or object contains a given value (using `===`).\n  // Aliased as `include`.\n  _.contains = _.include = function(obj, target) {\n    if (obj == null) return false;\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n    return any(obj, function(value) {\n      return value === target;\n    });\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      return (isFunc ? method : value[method]).apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, function(value){ return value[key]; });\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs, first) {\n    if (_.isEmpty(attrs)) return first ? void 0 : [];\n    return _[first ? 'find' : 'filter'](obj, function(value) {\n      for (var key in attrs) {\n        if (attrs[key] !== value[key]) return false;\n      }\n      return true;\n    });\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.where(obj, attrs, true);\n  };\n\n  // Return the maximum element or (element-based computation).\n  // Can't optimize arrays of integers longer than 65,535 elements.\n  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)\n  _.max = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n      return Math.max.apply(Math, obj);\n    }\n    if (!iterator && _.isEmpty(obj)) return -Infinity;\n    var result = {computed : -Infinity, value: -Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed > result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n      return Math.min.apply(Math, obj);\n    }\n    if (!iterator && _.isEmpty(obj)) return Infinity;\n    var result = {computed : Infinity, value: Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed < result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Shuffle an array, using the modern version of the \n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var rand;\n    var index = 0;\n    var shuffled = [];\n    each(obj, function(value) {\n      rand = _.random(index++);\n      shuffled[index - 1] = shuffled[rand];\n      shuffled[rand] = value;\n    });\n    return shuffled;\n  };\n\n  // Sample **n** random values from an array.\n  // If **n** is not specified, returns a single random element from the array.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (arguments.length < 2 || guard) {\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // An internal function to generate lookup iterators.\n  var lookupIterator = function(value) {\n    return _.isFunction(value) ? value : function(obj){ return obj[value]; };\n  };\n\n  // Sort the object's values by a criterion produced by an iterator.\n  _.sortBy = function(obj, value, context) {\n    var iterator = lookupIterator(value);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iterator.call(context, value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, value, context) {\n      var result = {};\n      var iterator = value == null ? _.identity : lookupIterator(value);\n      each(obj, function(value, index) {\n        var key = iterator.call(context, value, index, obj);\n        behavior(result, key, value);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, key, value) {\n    (_.has(result, key) ? result[key] : (result[key] = [])).push(value);\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, key, value) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, key) {\n    _.has(result, key) ? result[key]++ : result[key] = 1;\n  });\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iterator, context) {\n    iterator = iterator == null ? _.identity : lookupIterator(iterator);\n    var value = iterator.call(context, obj);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = (low + high) >>> 1;\n      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;\n    }\n    return low;\n  };\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (obj.length === +obj.length) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    return (n == null) || guard ? array[0] : slice.call(array, 0, n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N. The **guard** check allows it to work with\n  // `_.map`.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if ((n == null) || guard) {\n      return array[array.length - 1];\n    } else {\n      return slice.call(array, Math.max(array.length - n, 0));\n    }\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array. The **guard**\n  // check allows it to work with `_.map`.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, (n == null) || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, output) {\n    if (shallow && _.every(input, _.isArray)) {\n      return concat.apply(output, input);\n    }\n    each(input, function(value) {\n      if (_.isArray(value) || _.isArguments(value)) {\n        shallow ? push.apply(output, value) : flatten(value, shallow, output);\n      } else {\n        output.push(value);\n      }\n    });\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, []);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iterator, context) {\n    if (_.isFunction(isSorted)) {\n      context = iterator;\n      iterator = isSorted;\n      isSorted = false;\n    }\n    var initial = iterator ? _.map(array, iterator, context) : array;\n    var results = [];\n    var seen = [];\n    each(initial, function(value, index) {\n      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {\n        seen.push(value);\n        results.push(array[index]);\n      }\n    });\n    return results;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(_.flatten(arguments, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var rest = slice.call(arguments, 1);\n    return _.filter(_.uniq(array), function(item) {\n      return _.every(rest, function(other) {\n        return _.indexOf(other, item) >= 0;\n      });\n    });\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));\n    return _.filter(array, function(value){ return !_.contains(rest, value); });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    var length = _.max(_.pluck(arguments, \"length\").concat(0));\n    var results = new Array(length);\n    for (var i = 0; i < length; i++) {\n      results[i] = _.pluck(arguments, '' + i);\n    }\n    return results;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    if (list == null) return {};\n    var result = {};\n    for (var i = 0, length = list.length; i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n  // we need this function. Return the position of the first occurrence of an\n  // item in an array, or -1 if the item is not included in the array.\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    if (array == null) return -1;\n    var i = 0, length = array.length;\n    if (isSorted) {\n      if (typeof isSorted == 'number') {\n        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);\n      } else {\n        i = _.sortedIndex(array, item);\n        return array[i] === item ? i : -1;\n      }\n    }\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);\n    for (; i < length; i++) if (array[i] === item) return i;\n    return -1;\n  };\n\n  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n  _.lastIndexOf = function(array, item, from) {\n    if (array == null) return -1;\n    var hasIndex = from != null;\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {\n      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);\n    }\n    var i = (hasIndex ? from : array.length);\n    while (i--) if (array[i] === item) return i;\n    return -1;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = arguments[2] || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var idx = 0;\n    var range = new Array(length);\n\n    while(idx < length) {\n      range[idx++] = start;\n      start += step;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Reusable constructor function for prototype setting.\n  var ctor = function(){};\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    var args, bound;\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError;\n    args = slice.call(arguments, 2);\n    return bound = function() {\n      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\n      ctor.prototype = func.prototype;\n      var self = new ctor;\n      ctor.prototype = null;\n      var result = func.apply(self, args.concat(slice.call(arguments)));\n      if (Object(result) === result) return result;\n      return self;\n    };\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context.\n  _.partial = function(func) {\n    var args = slice.call(arguments, 1);\n    return function() {\n      return func.apply(this, args.concat(slice.call(arguments)));\n    };\n  };\n\n  // Bind all of an object's methods to that object. Useful for ensuring that\n  // all callbacks defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var funcs = slice.call(arguments, 1);\n    if (funcs.length === 0) throw new Error(\"bindAll must be passed function names\");\n    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memo = {};\n    hasher || (hasher = _.identity);\n    return function() {\n      var key = hasher.apply(this, arguments);\n      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n    };\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){ return func.apply(null, args); }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = function(func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  };\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    options || (options = {});\n    var later = function() {\n      previous = options.leading === false ? 0 : new Date;\n      timeout = null;\n      result = func.apply(context, args);\n    };\n    return function() {\n      var now = new Date;\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0) {\n        clearTimeout(timeout);\n        timeout = null;\n        previous = now;\n        result = func.apply(context, args);\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = new Date();\n      var later = function() {\n        var last = (new Date()) - timestamp;\n        if (last < wait) {\n          timeout = setTimeout(later, wait - last);\n        } else {\n          timeout = null;\n          if (!immediate) result = func.apply(context, args);\n        }\n      };\n      var callNow = immediate && !timeout;\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n      if (callNow) result = func.apply(context, args);\n      return result;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = function(func) {\n    var ran = false, memo;\n    return function() {\n      if (ran) return memo;\n      ran = true;\n      memo = func.apply(this, arguments);\n      func = null;\n      return memo;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return function() {\n      var args = [func];\n      push.apply(args, arguments);\n      return wrapper.apply(this, args);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments;\n      for (var i = funcs.length - 1; i >= 0; i--) {\n        args = [funcs[i].apply(this, args)];\n      }\n      return args[0];\n    };\n  };\n\n  // Returns a function that will only be executed after being called N times.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Object Functions\n  // ----------------\n\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = nativeKeys || function(obj) {\n    if (obj !== Object(obj)) throw new TypeError('Invalid object');\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = new Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = new Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      if (source) {\n        for (var prop in source) {\n          obj[prop] = source[prop];\n        }\n      }\n    });\n    return obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(obj) {\n    var copy = {};\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n    each(keys, function(key) {\n      if (key in obj) copy[key] = obj[key];\n    });\n    return copy;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj) {\n    var copy = {};\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n    for (var key in obj) {\n      if (!_.contains(keys, key)) copy[key] = obj[key];\n    }\n    return copy;\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      if (source) {\n        for (var prop in source) {\n          if (obj[prop] === void 0) obj[prop] = source[prop];\n        }\n      }\n    });\n    return obj;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a == 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className != toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, dates, and booleans are compared by value.\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return a == String(b);\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n        // other numeric values.\n        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a == +b;\n      // RegExps are compared by their source patterns and flags.\n      case '[object RegExp]':\n        return a.source == b.source &&\n               a.global == b.global &&\n               a.multiline == b.multiline &&\n               a.ignoreCase == b.ignoreCase;\n    }\n    if (typeof a != 'object' || typeof b != 'object') return false;\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] == a) return bStack[length] == b;\n    }\n    // Objects with different constructors are not equivalent, but `Object`s\n    // from different frames are.\n    var aCtor = a.constructor, bCtor = b.constructor;\n    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&\n                             _.isFunction(bCtor) && (bCtor instanceof bCtor))) {\n      return false;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n    var size = 0, result = true;\n    // Recursively compare objects and arrays.\n    if (className == '[object Array]') {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      size = a.length;\n      result = size == b.length;\n      if (result) {\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (size--) {\n          if (!(result = eq(a[size], b[size], aStack, bStack))) break;\n        }\n      }\n    } else {\n      // Deep compare objects.\n      for (var key in a) {\n        if (_.has(a, key)) {\n          // Count the expected number of properties.\n          size++;\n          // Deep compare each member.\n          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;\n        }\n      }\n      // Ensure that both objects contain the same number of properties.\n      if (result) {\n        for (key in b) {\n          if (_.has(b, key) && !(size--)) break;\n        }\n        result = !size;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return result;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b, [], []);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\n    for (var key in obj) if (_.has(obj, key)) return false;\n    return true;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    return obj === Object(obj);\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.\n  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) == '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return !!(obj && _.has(obj, 'callee'));\n    };\n  }\n\n  // Optimize `isFunction` if appropriate.\n  if (typeof (/./) !== 'function') {\n    _.isFunction = function(obj) {\n      return typeof obj === 'function';\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj != +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iterators.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iterator, context) {\n    var accum = Array(Math.max(0, n));\n    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // List of HTML entities for escaping.\n  var entityMap = {\n    escape: {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#x27;'\n    }\n  };\n  entityMap.unescape = _.invert(entityMap.escape);\n\n  // Regexes containing the keys and values listed immediately above.\n  var entityRegexes = {\n    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),\n    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')\n  };\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  _.each(['escape', 'unescape'], function(method) {\n    _[method] = function(string) {\n      if (string == null) return '';\n      return ('' + string).replace(entityRegexes[method], function(match) {\n        return entityMap[method][match];\n      });\n    };\n  });\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property) {\n    if (object == null) return void 0;\n    var value = object[property];\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result.call(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\t':     't',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  _.template = function(text, data, settings) {\n    var render;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = new RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset)\n        .replace(escaper, function(match) { return '\\\\' + escapes[match]; });\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      }\n      if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      }\n      if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n      index = offset + match.length;\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + \"return __p;\\n\";\n\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    if (data) return render(data, _);\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled function source as a convenience for precompilation.\n    template.source = 'function(' + (settings.variable || 'obj') + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function, which will delegate to the wrapper.\n  _.chain = function(obj) {\n    return _(obj).chain();\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj) {\n    return this._chain ? _(obj).chain() : obj;\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];\n      return result.call(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result.call(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  _.extend(_.prototype, {\n\n    // Start chaining a wrapped Underscore object.\n    chain: function() {\n      this._chain = true;\n      return this;\n    },\n\n    // Extracts the result from a wrapped and chained object.\n    value: function() {\n      return this._wrapped;\n    }\n\n  });\n\n}).call(this);\n");
